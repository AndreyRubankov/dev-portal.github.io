var base=function(e){function t(o){if(a[o])return a[o].exports;var r=a[o]={exports:{},id:o,loaded:!1};return e[o].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var a={};return t.m=e,t.c=a,t.p="",t(0)}([function(e,t,a){e.exports=a(1)},function(e,t,a){function o(e){var t=e||{};self=this,this.apiKey=s,this.selectedCategory=ko.observable(""),this.selectedMethod=ko.observable(""),this.selectedParams=ko.observableArray([]),this.menu=new n(t,this.selectedCategory),this.methods=new l(t,this.selectedCategory,this.selectedMethod),this.params=new c(t,this.selectedMethod,this.selectedParams),this.sendButtonText=ko.pureComputed(this.getMethodName,this),this.URL=ko.computed(this.getUrl,this)}var r=a(2),s=a(3),i=a(4),n=a(5),c=a(7),l=a(8);a(9);o.prototype.onClickSendBtn=function(){i(this.URL())},o.prototype.getMethodName=function(){return this.selectedMethod().method.toLowerCase()},o.prototype.getUrl=function(){return[this.selectedMethod(),this.apiKey,this.selectedParams()]},ko.applyBindings(new o(r)),e.exports=r},function(e,t){var a={},o="../../apidescription.xml",r=function(e){var t=$(e).find("resources");t.each(function(){var e=$(this).find("resource");e.each(function(e,t){var o=$(t),r=$(o.find("method")[0]),s=r.find('[primary="true"]').text(),i=o.find("param"),n={};i.each(function(e,t){var a=$(this);n[a.attr("name")]={name:a.attr("name"),required:a.attr("required"),type:a.attr("type"),style:a.attr("style"),"default":a.attr("default"),doc:a.first("doc").text().trim()}}),a[s]||(a[s]={}),a[s][r.attr("name")]=a[s][r.attr("name")]||{},a[s].ALL=a[s].ALL||{},a[s].ALL[r.attr("id")]={id:r.attr("id"),name:r.attr("apigee:displayName")?r.attr("apigee:displayName"):r.attr("id"),method:r.attr("name"),category:s,path:o.attr("path"),parameters:n,base:o.parent().attr("base"),documentation:$(r.find("doc")[0]).attr("apigee:url"),description:$(r.find("doc")[0]).text().trim()},a[s][r.attr("name")][r.attr("id")]={id:r.attr("id"),name:r.attr("apigee:displayName")?r.attr("apigee:displayName"):r.attr("id"),method:r.attr("name"),category:s,path:o.attr("path"),parameters:n,base:o.parent().attr("base"),documentation:$(r.find("doc")[0]).attr("apigee:url"),description:$(r.find("doc")[0]).text().trim()}})})},s=function(){$.ajax({url:o,async:!1,dataType:$.browser.msie?"text":"xml",success:function(e){var t;"string"==typeof e?(t=new ActiveXObject("Microsoft.XMLDOM"),t.async=!1,t.loadXML(e)):t=e,r(t)},error:function(e,t,a){alert("Data Could Not Be Loaded - "+t)}})};s(),e.exports=a},function(e,t){var a=sessionStorage.getItem("tk-api-key")||"7elxdku9GGG5k8j0Xm8KWdANDgecHMV0";e.exports={name:"apikey",style:"query",value:ko.observable(a)}},function(e,t){var a=function(e,t,a){var o=encodeURI(e);console.log(o),$.ajax({type:t,url:o,async:!0,dataType:"json",complete:a})},o=function(e){var t,a,o,r,s,i;if(!e&&!e.length)return!1;o=e[0].base,r=e[0].path,s=e[1],i=e[2].filter(function(e){return"query"===e.style}),t=r.match(/([^{]*?)\w(?=\})/gim);var n=e[2].filter(function(e){return"template"===e.style});return t.forEach(function(e){var t=n.find(function(t){return t.name===e});r=r.replace("{"+t.name+"}",t.value()||t["default"])}),i[0]&&"apikey"===i[0].name||i.unshift(s),i=i.map(function(e){return[e.name,e.value()||e["default"]].join("=")}).join("&"),a=[o,"/",r,"?",i].join("")},r=function(e){console.clear();var t=o(e);a(t,e[0].method,function(e,t){if("error"==t){var a=e&&e.responseJSON&&e.responseJSON.errors&&e.responseJSON.errors[0];console.warn(t,e.status),a?(console.warn(a.code),console.warn(a.detail)):console.warn(e)}else console.log(t,e.status),console.log(e.responseJSON)})};e.exports=r},function(e,t,a){function o(e,t){r=this,this.category=t,this.categories=ko.observableArray(Object.keys(e).map(function(e,t){return{checked:ko.observable(!t),name:e,link:!1}})),this.selectCategory(this.categories()[0])}var r,s=a(6);o.prototype.selectCategory=function(e){var t=e.name;r.category(t),s.checkActive(r.categories,t)},e.exports=o},function(e,t){t.getModelArray=function(e){var t=e.obj||{},a=e.arr||[],o=e.prop||"name";for(var r in t)if(t.hasOwnProperty(r)){var s=a.find(function(e){return e.name===t[r][o]});s||a.push({checked:ko.observable(!1),name:t[r][o]})}return a},t.checkActive=function(e,t){return!(!e&&!t)&&void e(e().map(function(e){return e.name===t?e.checked(!0):e.checked(!1),e}))}},function(e,t){function a(e,t,a){r=e,o=this,this.animationSpeed=200,this.method=t,this.params=a,this.isHidden=ko.observable(!0),this.paramInFocus=ko.observable(""),this.paramsModel=ko.computed(this.updateParamsModel,this),this.paramInFocus(this.paramsModel()[0]),this.isDirty=ko.computed(this.checkDirty,this)}var o,r;a.prototype.checkDirty=function(){var e=this.paramsModel().filter(function(e){return e.isDirty()===!0});return e.length>0},a.prototype.updateParamsModel=function(e,t){var a=this.method().parameters||{},o=[];for(var r in a){var s=a[r];a.hasOwnProperty(r)&&(s.value=s.value||ko.observable(""),s.isDirty=ko.pureComputed(function(){return!!this.value().trim().length},s),s.hasCalendar=r.search(/(date|time)/gim)!=-1,s.hasPopUp=r.search(/(attractionId|venueId)/gim)!=-1,o.push(s))}return this.prepareUrlPairs(o,this.params),this.paramInFocus(o[0]),o},a.prototype.onEnterKeyDown=function(e,t){return 13!==t.keyCode||void $("#api-exp-get-btn").trigger("click")},a.prototype.slideToggle=function(e,t){$(t.currentTarget).parents(".js-slide-control").find(".js-slide-wrapper").slideToggle(e.animationSpeed,function(){e.isHidden(!e.isHidden())})},a.prototype.onFocus=function(e){o.paramInFocus(e)},a.prototype.prepareUrlPairs=function(e,t){return!(!e&&!t)&&t(e.filter(function(e){return e.value()||e["default"]}))},e.exports=a},function(e,t,a){"use strict";function o(e,t,a){r=this,s=e,this.category=t,this.method=a,this.togglePopUp=ko.observable(!1),this.radiosModel=ko.observableArray([]),this.selectModel=ko.observableArray([]),this.updateModel(this.category()),this.category.subscribe(this.updateModel)}var r,s,i=a(6);o.prototype.updateModel=function(e){r.updateRadiosModel(s[e]),r.updateSelect(r.radiosModel()[0])},o.prototype.onchangeRadios=function(e){i.checkActive(r.radiosModel,e.name),r.updateSelect(e)},o.prototype.updateRadiosModel=function(e){var t=e||{},a=[];for(var o in t)if(t.hasOwnProperty(o)){var r={checked:ko.observable("ALL"===o),name:o};"ALL"===o?a.unshift(r):a.push(r)}return this.radiosModel(a),a},o.prototype.updateSelect=function(e){var t=s[r.category()][e.name]||{},a=[],o=0;for(var i in t)if(t.hasOwnProperty(i)){var n=t[i];a.push({checked:ko.observable(!o),name:n.name,id:n.id,link:n.documentation,about:n.description,category:n.category,method:n.method}),!o&&this.method(s[n.category][n.method][n.id]),o++}r.selectModel(a)},o.prototype.onSelectMethod=function(e){i.checkActive(r.selectModel,e.name),r.method(s[e.category][e.method][e.id])},o.prototype.onAboutClick=function(e,t){e.togglePopUp(!e.togglePopUp())},e.exports=o},function(e,t){function a(e){r=this,this.animationSpeed=e.animationSpeed||200,this.selectModel=e.options||ko.observableArray([]),this.placeholder=ko.observable(e.placeholder||""),this.onselect=e.onselect||function(e){console.log(e+"selected!")},this.selected=ko.observable(this.selectModel()[0]),this.isOneOption=ko.pureComputed(function(){return this.selectModel().length<2},this)}function o(e){var t=$(e.currentTarget).parents(".js-custom-select");return{wrapper:t.find(".js-custom-select-wrapper"),layer:t.find(".js-custom-select-layer")}}var r;a.prototype.slideToggle=function(e,t){if(e.isOneOption())return!1;var a=o(t);a.wrapper.slideToggle(e.animationSpeed),a.layer.toggleClass("hidden")},a.prototype.selectItem=function(e,t){var a=this;this.selected(e),this.onselect(e),this.slideToggle(a,t)},e.exports=ko.components.register("custom-select",{viewModel:a,template:['<div class="api-exp-custom-select js-custom-select">','<div class="api-exp-custom-select-wrapper">','<select data-bind="options: selectModel, optionsText: \'name\', value: selected" class="api-exp-custom-select__field" name="api-exp-method"></select>','<span class="api-exp-custom-select__placeholder">','<input data-bind="event: {click: slideToggle}, attr: {value: selected().name, disabled: isOneOption}" type="text" value="" readonly="">','<b data-bind="css: {hidden: isOneOption}" class="api-exp-custom-select__chevron">&nbsp;</b>',"</span>",'<ul data-bind="foreach: selectModel" class="api-exp-custom-select__list js-custom-select-wrapper">','<li data-bind="css: {\'active\': checked}" class="api-exp-custom-select__item">','<button data-bind="event: {click: $parent.selectItem.bind($parent)}, text: name, css: {\'active\': checked()}, attr: {\'data-value\': name}"  class="api-exp-custom-select__item-label" href="#"></button>','<a data-bind="attr: {href: link}, css: {\'hidden\': !link}" class="api-exp-custom-select__item-link" target="_blank">&nbsp;</a>',"</li>","</ul>","</div>",'<div data-bind="click: slideToggle" class="api-exp-custom-select-layer js-custom-select-layer hidden"></div>',"</div>"].join("")})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,