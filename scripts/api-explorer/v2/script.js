var base =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
	                                                                                                                                                                                                                                                                               * Main file for Api Explrer v2.0
	                                                                                                                                                                                                                                                                               * For development please use Webpack to bundle all modules
	                                                                                                                                                                                                                                                                               * It can be made using npm scripts cmd - 'webpack'
	                                                                                                                                                                                                                                                                               */
	
	// custom bindings
	
	
	var _modules = __webpack_require__(2);
	
	var modules = _interopRequireWildcard(_modules);
	
	var _customBindings = __webpack_require__(16);
	
	var customBindings = _interopRequireWildcard(_customBindings);
	
	var _components = __webpack_require__(20);
	
	var components = _interopRequireWildcard(_components);
	
	var _services = __webpack_require__(35);
	
	var services = _interopRequireWildcard(_services);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var RequestsListViewModel = __webpack_require__(40);
	
	/**
	 * Gets deep prop
	 * @returns {*[]}
	 */
	Object.getProp = function (o, s) {
		if (((typeof o === 'undefined' ? 'undefined' : _typeof(o)) !== 'object' || o == null) && !s) {
			return;
		}
		s = s.replace(/\[(\w+)\]/g, '.$1'); // convert indexes to properties
		s = s.replace(/^\./, ''); // strip a leading dot
		var a = s.split('.');
		for (var i = 0, n = a.length; i < n; ++i) {
			var k = a[i];
			if (o && k in o) {
				o = o[k];
			} else {
				return;
			}
		}
		return o;
	};
	
	function Component(params) {
		return function (viewModel) {
			ko.components.register(params.name, {
				viewModel: viewModel,
				template: params.template
			});
		};
	}
	
	var AppViewModel = function () {
		function AppViewModel(_ref) {
			var _this = this;
	
			var _ref$base = _ref.base,
			    base = _ref$base === undefined ? {} : _ref$base,
			    apiKey = _ref.apiKey,
			    config = _ref.config,
			    rest = _ref.rest;
	
			_classCallCheck(this, AppViewModel);
	
			this.base = base;
			this.apiKey = apiKey;
			this.config = config;
			this.rest = rest;
	
			var parsedUrl = this.parseUrl();
	
			// observables
			this.selectedCategory = ko.observable(parsedUrl.apiCategory || '');
			this.selectedMethodType = ko.observable('ALL');
			this.selectedMethod = ko.observable(parsedUrl.methodId || '');
			this.selectedParams = ko.observableArray([]);
			this.requests = ko.observableArray([]);
			this.onError = ko.observable({});
			this.selectedMethodData = ko.observable(this.getMethodData({}));
	
			// computed
			this.URL = ko.computed(function () {
				return [ko.unwrap(_this.selectedMethodData), _this.apiKey, ko.unwrap(_this.selectedParams)];
			});
	
			this.sendButtonText = ko.pureComputed(function () {
				return ko.unwrap(_this.selectedMethodData).method;
			});
	
			this.sharePath = ko.pureComputed(function () {
				return _this.formDeepLinkingUrl();
			});
			this.requestsList = new RequestsListViewModel({
				requests: this.requests,
				selectedParams: this.selectedParams,
				sharePath: this.sharePath,
				setParams: this.setParams.bind(this)
			});
			this.selectedMethod.subscribe(function (val) {
				return _this.selectedMethodData(_this.getMethodData({ methodId: val }));
			});
		}
	
		/**
	  * Send request method
	  */
	
	
		_createClass(AppViewModel, [{
			key: 'onClickSendBtn',
			value: function onClickSendBtn() {
				this.rest(this.URL(), this.requests, this.onError, this.base);
			}
		}, {
			key: 'formDeepLinkingUrl',
			value: function formDeepLinkingUrl() {
				var location = window.location;
				var category = ko.unwrap(this.selectedCategory);
				var method = ko.unwrap(this.selectedMethod);
				var params = ko.unwrap(this.selectedParams);
	
				var querys = ['apiCategory=' + encodeURI(category), 'methodId=' + encodeURI(method)];
	
				params.map(function (param) {
					var value = ko.unwrap(param.value);
					var defaultValue = ko.unwrap(param.default);
					querys.push(param.name + '=' + (value !== '' ? value : defaultValue)); //todo: remove default from here when set up it in source like value by default
					return param;
				});
	
				return '' + location.origin + location.pathname.replace(/\/$/gmi, '') + '?' + querys.join('&');
			}
		}, {
			key: 'getMethodData',
			value: function getMethodData(_ref2) {
				var apiCategory = _ref2.apiCategory,
				    type = _ref2.type,
				    methodId = _ref2.methodId;
	
				var category = ko.unwrap(apiCategory || this.selectedCategory);
				var methodType = ko.unwrap(type || this.selectedMethodType || 'ALL');
				var method = ko.unwrap(methodId || this.selectedMethod);
				return this.base[category] && this.base[category][methodType] && this.base[category][methodType][method] || {};
			}
		}, {
			key: 'parseUrl',
			value: function parseUrl() {
				var _this2 = this;
	
				var location = window.location.search;
				if (location) {
					var querys;
					var obj;
	
					var _ret = function () {
						querys = location.replace(/^\?/g, '').split('&');
						obj = {
							apiCategory: '',
							methodId: '',
							parameters: []
						};
	
	
						querys.map(function (query) {
							var _decodeURI$split = decodeURI(query).split('='),
							    _decodeURI$split2 = _slicedToArray(_decodeURI$split, 2),
							    key = _decodeURI$split2[0],
							    val = _decodeURI$split2[1];
	
							if (key === 'apiCategory' || key === 'methodId') {
								obj[key] = val;
							} else {
								obj.parameters.push({
									name: key,
									value: val
								});
							}
						});
	
						var methodData = _this2.getMethodData(obj);
						var parameters = methodData.parameters;
	
						obj.parameters.map(function (obj) {
							parameters[obj.name].value = obj.value;
							return obj;
						});
						obj.parameters = parameters;
						return {
							v: obj
						};
					}();
	
					if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
				}
				return {};
			}
		}, {
			key: 'setParams',
			value: function setParams(_ref3) {
				var category = _ref3.category,
				    _ref3$method = _ref3.method,
				    method = _ref3$method === undefined ? 'ALL' : _ref3$method,
				    methodId = _ref3.methodId,
				    params = _ref3.params;
	
				this.selectedCategory(category);
				this.selectedMethodType(method);
				this.selectedMethod(methodId);
				this.selectedParams.notifySubscribers(params, 'paramsSet');
			}
		}]);
	
		return AppViewModel;
	}();
	
	/**
	 * Activates knockout.js
	 */
	
	
	ko.applyBindings(new AppViewModel(services));
	
	/**
	 * exports global variable
	 */
	module.exports = services.base;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(3);
	__webpack_require__(7);
	__webpack_require__(8);
	__webpack_require__(11);
	__webpack_require__(12);
	__webpack_require__(13);
	__webpack_require__(15);

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {"use strict";
	
	/*! jQuery Migrate v1.3.0 | (c) jQuery Foundation and other contributors | jquery.org/license */
	"undefined" == typeof jQuery.migrateMute && (jQuery.migrateMute = !0), function (a, b, c) {
	  function d(c) {
	    var d = b.console;f[c] || (f[c] = !0, a.migrateWarnings.push(c), d && d.warn && !a.migrateMute && (d.warn("JQMIGRATE: " + c), a.migrateTrace && d.trace && d.trace()));
	  }function e(b, c, e, f) {
	    if (Object.defineProperty) try {
	      return void Object.defineProperty(b, c, { configurable: !0, enumerable: !0, get: function get() {
	          return d(f), e;
	        }, set: function set(a) {
	          d(f), e = a;
	        } });
	    } catch (g) {}a._definePropertyBroken = !0, b[c] = e;
	  }a.migrateVersion = "1.3.0";var f = {};a.migrateWarnings = [], !a.migrateMute && b.console && b.console.log && b.console.log("JQMIGRATE: Logging is active"), a.migrateTrace === c && (a.migrateTrace = !0), a.migrateReset = function () {
	    f = {}, a.migrateWarnings.length = 0;
	  }, "BackCompat" === document.compatMode && d("jQuery is not compatible with Quirks Mode");var g = a("<input/>", { size: 1 }).attr("size") && a.attrFn,
	      h = a.attr,
	      i = a.attrHooks.value && a.attrHooks.value.get || function () {
	    return null;
	  },
	      j = a.attrHooks.value && a.attrHooks.value.set || function () {
	    return c;
	  },
	      k = /^(?:input|button)$/i,
	      l = /^[238]$/,
	      m = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
	      n = /^(?:checked|selected)$/i;e(a, "attrFn", g || {}, "jQuery.attrFn is deprecated"), a.attr = function (b, e, f, i) {
	    var j = e.toLowerCase(),
	        o = b && b.nodeType;return i && (h.length < 4 && d("jQuery.fn.attr( props, pass ) is deprecated"), b && !l.test(o) && (g ? e in g : a.isFunction(a.fn[e]))) ? a(b)[e](f) : ("type" === e && f !== c && k.test(b.nodeName) && b.parentNode && d("Can't change the 'type' of an input or button in IE 6/7/8"), !a.attrHooks[j] && m.test(j) && (a.attrHooks[j] = { get: function get(b, d) {
	        var e,
	            f = a.prop(b, d);return f === !0 || "boolean" != typeof f && (e = b.getAttributeNode(d)) && e.nodeValue !== !1 ? d.toLowerCase() : c;
	      }, set: function set(b, c, d) {
	        var e;return c === !1 ? a.removeAttr(b, d) : (e = a.propFix[d] || d, e in b && (b[e] = !0), b.setAttribute(d, d.toLowerCase())), d;
	      } }, n.test(j) && d("jQuery.fn.attr('" + j + "') might use property instead of attribute")), h.call(a, b, e, f));
	  }, a.attrHooks.value = { get: function get(a, b) {
	      var c = (a.nodeName || "").toLowerCase();return "button" === c ? i.apply(this, arguments) : ("input" !== c && "option" !== c && d("jQuery.fn.attr('value') no longer gets properties"), b in a ? a.value : null);
	    }, set: function set(a, b) {
	      var c = (a.nodeName || "").toLowerCase();return "button" === c ? j.apply(this, arguments) : ("input" !== c && "option" !== c && d("jQuery.fn.attr('value', val) no longer sets properties"), void (a.value = b));
	    } };var o,
	      p,
	      q = a.fn.init,
	      r = a.parseJSON,
	      s = /^\s*</,
	      t = /^([^<]*)(<[\w\W]+>)([^>]*)$/;a.fn.init = function (b, e, f) {
	    var g, h;return b && "string" == typeof b && !a.isPlainObject(e) && (g = t.exec(a.trim(b))) && g[0] && (s.test(b) || d("$(html) HTML strings must start with '<' character"), g[3] && d("$(html) HTML text after last tag is ignored"), "#" === g[0].charAt(0) && (d("HTML string cannot start with a '#' character"), a.error("JQMIGRATE: Invalid selector string (XSS)")), e && e.context && (e = e.context), a.parseHTML) ? q.call(this, a.parseHTML(g[2], e && e.ownerDocument || e || document, !0), e, f) : ("#" === b && (d("jQuery( '#' ) is not a valid selector"), b = []), h = q.apply(this, arguments), b && b.selector !== c ? (h.selector = b.selector, h.context = b.context) : (h.selector = "string" == typeof b ? b : "", b && (h.context = b.nodeType ? b : e || document)), h);
	  }, a.fn.init.prototype = a.fn, a.parseJSON = function (a) {
	    return a ? r.apply(this, arguments) : (d("jQuery.parseJSON requires a valid JSON string"), null);
	  }, a.uaMatch = function (a) {
	    a = a.toLowerCase();var b = /(chrome)[ \/]([\w.]+)/.exec(a) || /(webkit)[ \/]([\w.]+)/.exec(a) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(a) || /(msie) ([\w.]+)/.exec(a) || a.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(a) || [];return { browser: b[1] || "", version: b[2] || "0" };
	  }, a.browser || (o = a.uaMatch(navigator.userAgent), p = {}, o.browser && (p[o.browser] = !0, p.version = o.version), p.chrome ? p.webkit = !0 : p.webkit && (p.safari = !0), a.browser = p), e(a, "browser", a.browser, "jQuery.browser is deprecated"), a.boxModel = a.support.boxModel = "CSS1Compat" === document.compatMode, e(a, "boxModel", a.boxModel, "jQuery.boxModel is deprecated"), e(a.support, "boxModel", a.support.boxModel, "jQuery.support.boxModel is deprecated"), a.sub = function () {
	    function b(a, c) {
	      return new b.fn.init(a, c);
	    }a.extend(!0, b, this), b.superclass = this, b.fn = b.prototype = this(), b.fn.constructor = b, b.sub = this.sub, b.fn.init = function (d, e) {
	      var f = a.fn.init.call(this, d, e, c);return f instanceof b ? f : b(f);
	    }, b.fn.init.prototype = b.fn;var c = b(document);return d("jQuery.sub() is deprecated"), b;
	  }, a.fn.size = function () {
	    return d("jQuery.fn.size() is deprecated; use the .length property"), this.length;
	  };var u = !1;a.swap && a.each(["height", "width", "reliableMarginRight"], function (b, c) {
	    var d = a.cssHooks[c] && a.cssHooks[c].get;d && (a.cssHooks[c].get = function () {
	      var a;return u = !0, a = d.apply(this, arguments), u = !1, a;
	    });
	  }), a.swap = function (a, b, c, e) {
	    var f,
	        g,
	        h = {};u || d("jQuery.swap() is undocumented and deprecated");for (g in b) {
	      h[g] = a.style[g], a.style[g] = b[g];
	    }f = c.apply(a, e || []);for (g in b) {
	      a.style[g] = h[g];
	    }return f;
	  }, a.ajaxSetup({ converters: { "text json": a.parseJSON } });var v = a.fn.data;a.fn.data = function (b) {
	    var e,
	        f,
	        g = this[0];return !g || "events" !== b || 1 !== arguments.length || (e = a.data(g, b), f = a._data(g, b), e !== c && e !== f || f === c) ? v.apply(this, arguments) : (d("Use of jQuery.fn.data('events') is deprecated"), f);
	  };var w = /\/(java|ecma)script/i;a.clean || (a.clean = function (b, c, e, f) {
	    c = c || document, c = !c.nodeType && c[0] || c, c = c.ownerDocument || c, d("jQuery.clean() is deprecated");var g,
	        h,
	        i,
	        j,
	        k = [];if (a.merge(k, a.buildFragment(b, c).childNodes), e) for (i = function i(a) {
	      return !a.type || w.test(a.type) ? f ? f.push(a.parentNode ? a.parentNode.removeChild(a) : a) : e.appendChild(a) : void 0;
	    }, g = 0; null != (h = k[g]); g++) {
	      a.nodeName(h, "script") && i(h) || (e.appendChild(h), "undefined" != typeof h.getElementsByTagName && (j = a.grep(a.merge([], h.getElementsByTagName("script")), i), k.splice.apply(k, [g + 1, 0].concat(j)), g += j.length));
	    }return k;
	  });var x = a.event.add,
	      y = a.event.remove,
	      z = a.event.trigger,
	      A = a.fn.toggle,
	      B = a.fn.live,
	      C = a.fn.die,
	      D = a.fn.load,
	      E = "ajaxStart|ajaxStop|ajaxSend|ajaxComplete|ajaxError|ajaxSuccess",
	      F = new RegExp("\\b(?:" + E + ")\\b"),
	      G = /(?:^|\s)hover(\.\S+|)\b/,
	      H = function H(b) {
	    return "string" != typeof b || a.event.special.hover ? b : (G.test(b) && d("'hover' pseudo-event is deprecated, use 'mouseenter mouseleave'"), b && b.replace(G, "mouseenter$1 mouseleave$1"));
	  };a.event.props && "attrChange" !== a.event.props[0] && a.event.props.unshift("attrChange", "attrName", "relatedNode", "srcElement"), a.event.dispatch && e(a.event, "handle", a.event.dispatch, "jQuery.event.handle is undocumented and deprecated"), a.event.add = function (a, b, c, e, f) {
	    a !== document && F.test(b) && d("AJAX events should be attached to document: " + b), x.call(this, a, H(b || ""), c, e, f);
	  }, a.event.remove = function (a, b, c, d, e) {
	    y.call(this, a, H(b) || "", c, d, e);
	  }, a.each(["load", "unload", "error"], function (b, c) {
	    a.fn[c] = function () {
	      var a = Array.prototype.slice.call(arguments, 0);return d("jQuery.fn." + c + "() is deprecated"), "load" === c && "string" == typeof arguments[0] ? D.apply(this, arguments) : (a.splice(0, 0, c), arguments.length ? this.bind.apply(this, a) : (this.triggerHandler.apply(this, a), this));
	    };
	  }), a.fn.toggle = function (b, c) {
	    if (!a.isFunction(b) || !a.isFunction(c)) return A.apply(this, arguments);d("jQuery.fn.toggle(handler, handler...) is deprecated");var e = arguments,
	        f = b.guid || a.guid++,
	        g = 0,
	        h = function h(c) {
	      var d = (a._data(this, "lastToggle" + b.guid) || 0) % g;return a._data(this, "lastToggle" + b.guid, d + 1), c.preventDefault(), e[d].apply(this, arguments) || !1;
	    };for (h.guid = f; g < e.length;) {
	      e[g++].guid = f;
	    }return this.click(h);
	  }, a.fn.live = function (b, c, e) {
	    return d("jQuery.fn.live() is deprecated"), B ? B.apply(this, arguments) : (a(this.context).on(b, this.selector, c, e), this);
	  }, a.fn.die = function (b, c) {
	    return d("jQuery.fn.die() is deprecated"), C ? C.apply(this, arguments) : (a(this.context).off(b, this.selector || "**", c), this);
	  }, a.event.trigger = function (a, b, c, e) {
	    return c || F.test(a) || d("Global events are undocumented and deprecated"), z.call(this, a, b, c || document, e);
	  }, a.each(E.split("|"), function (b, c) {
	    a.event.special[c] = { setup: function setup() {
	        var b = this;return b !== document && (a.event.add(document, c + "." + a.guid, function () {
	          a.event.trigger(c, Array.prototype.slice.call(arguments, 1), b, !0);
	        }), a._data(this, c, a.guid++)), !1;
	      }, teardown: function teardown() {
	        return this !== document && a.event.remove(document, c + "." + a._data(this, c)), !1;
	      } };
	  }), a.event.special.ready = { setup: function setup() {
	      d("'ready' event is deprecated");
	    } };var I = a.fn.andSelf || a.fn.addBack,
	      J = a.fn.find;if (a.fn.andSelf = function () {
	    return d("jQuery.fn.andSelf() replaced by jQuery.fn.addBack()"), I.apply(this, arguments);
	  }, a.fn.find = function (a) {
	    var b = J.apply(this, arguments);return b.context = this.context, b.selector = this.selector ? this.selector + " " + a : a, b;
	  }, a.Callbacks) {
	    var K = a.Deferred,
	        L = [["resolve", "done", a.Callbacks("once memory"), a.Callbacks("once memory"), "resolved"], ["reject", "fail", a.Callbacks("once memory"), a.Callbacks("once memory"), "rejected"], ["notify", "progress", a.Callbacks("memory"), a.Callbacks("memory")]];a.Deferred = function (b) {
	      var c = K(),
	          e = c.promise();return c.pipe = e.pipe = function () {
	        var b = arguments;return d("deferred.pipe() is deprecated"), a.Deferred(function (d) {
	          a.each(L, function (f, g) {
	            var h = a.isFunction(b[f]) && b[f];c[g[1]](function () {
	              var b = h && h.apply(this, arguments);b && a.isFunction(b.promise) ? b.promise().done(d.resolve).fail(d.reject).progress(d.notify) : d[g[0] + "With"](this === e ? d.promise() : this, h ? [b] : arguments);
	            });
	          }), b = null;
	        }).promise();
	      }, c.isResolved = function () {
	        return d("deferred.isResolved is deprecated"), "resolved" === c.state();
	      }, c.isRejected = function () {
	        return d("deferred.isRejected is deprecated"), "rejected" === c.state();
	      }, b && b.call(c, c), c;
	    };
	  }
	}(jQuery, window);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/*! jQuery v1.11.3 | (c) 2005, 2015 jQuery Foundation, Inc. | jquery.org/license */
	!function (a, b) {
	  "object" == ( false ? "undefined" : _typeof(module)) && "object" == _typeof(module.exports) ? module.exports = a.document ? b(a, !0) : function (a) {
	    if (!a.document) throw new Error("jQuery requires a window with a document");return b(a);
	  } : b(a);
	}("undefined" != typeof window ? window : undefined, function (a, b) {
	  var c = [],
	      d = c.slice,
	      e = c.concat,
	      f = c.push,
	      g = c.indexOf,
	      h = {},
	      i = h.toString,
	      j = h.hasOwnProperty,
	      k = {},
	      l = "1.11.3",
	      m = function m(a, b) {
	    return new m.fn.init(a, b);
	  },
	      n = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
	      o = /^-ms-/,
	      p = /-([\da-z])/gi,
	      q = function q(a, b) {
	    return b.toUpperCase();
	  };m.fn = m.prototype = { jquery: l, constructor: m, selector: "", length: 0, toArray: function toArray() {
	      return d.call(this);
	    }, get: function get(a) {
	      return null != a ? 0 > a ? this[a + this.length] : this[a] : d.call(this);
	    }, pushStack: function pushStack(a) {
	      var b = m.merge(this.constructor(), a);return b.prevObject = this, b.context = this.context, b;
	    }, each: function each(a, b) {
	      return m.each(this, a, b);
	    }, map: function map(a) {
	      return this.pushStack(m.map(this, function (b, c) {
	        return a.call(b, c, b);
	      }));
	    }, slice: function slice() {
	      return this.pushStack(d.apply(this, arguments));
	    }, first: function first() {
	      return this.eq(0);
	    }, last: function last() {
	      return this.eq(-1);
	    }, eq: function eq(a) {
	      var b = this.length,
	          c = +a + (0 > a ? b : 0);return this.pushStack(c >= 0 && b > c ? [this[c]] : []);
	    }, end: function end() {
	      return this.prevObject || this.constructor(null);
	    }, push: f, sort: c.sort, splice: c.splice }, m.extend = m.fn.extend = function () {
	    var a,
	        b,
	        c,
	        d,
	        e,
	        f,
	        g = arguments[0] || {},
	        h = 1,
	        i = arguments.length,
	        j = !1;for ("boolean" == typeof g && (j = g, g = arguments[h] || {}, h++), "object" == (typeof g === "undefined" ? "undefined" : _typeof(g)) || m.isFunction(g) || (g = {}), h === i && (g = this, h--); i > h; h++) {
	      if (null != (e = arguments[h])) for (d in e) {
	        a = g[d], c = e[d], g !== c && (j && c && (m.isPlainObject(c) || (b = m.isArray(c))) ? (b ? (b = !1, f = a && m.isArray(a) ? a : []) : f = a && m.isPlainObject(a) ? a : {}, g[d] = m.extend(j, f, c)) : void 0 !== c && (g[d] = c));
	      }
	    }return g;
	  }, m.extend({ expando: "jQuery" + (l + Math.random()).replace(/\D/g, ""), isReady: !0, error: function error(a) {
	      throw new Error(a);
	    }, noop: function noop() {}, isFunction: function isFunction(a) {
	      return "function" === m.type(a);
	    }, isArray: Array.isArray || function (a) {
	      return "array" === m.type(a);
	    }, isWindow: function isWindow(a) {
	      return null != a && a == a.window;
	    }, isNumeric: function isNumeric(a) {
	      return !m.isArray(a) && a - parseFloat(a) + 1 >= 0;
	    }, isEmptyObject: function isEmptyObject(a) {
	      var b;for (b in a) {
	        return !1;
	      }return !0;
	    }, isPlainObject: function isPlainObject(a) {
	      var b;if (!a || "object" !== m.type(a) || a.nodeType || m.isWindow(a)) return !1;try {
	        if (a.constructor && !j.call(a, "constructor") && !j.call(a.constructor.prototype, "isPrototypeOf")) return !1;
	      } catch (c) {
	        return !1;
	      }if (k.ownLast) for (b in a) {
	        return j.call(a, b);
	      }for (b in a) {}return void 0 === b || j.call(a, b);
	    }, type: function type(a) {
	      return null == a ? a + "" : "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) || "function" == typeof a ? h[i.call(a)] || "object" : typeof a === "undefined" ? "undefined" : _typeof(a);
	    }, globalEval: function globalEval(b) {
	      b && m.trim(b) && (a.execScript || function (b) {
	        a.eval.call(a, b);
	      })(b);
	    }, camelCase: function camelCase(a) {
	      return a.replace(o, "ms-").replace(p, q);
	    }, nodeName: function nodeName(a, b) {
	      return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase();
	    }, each: function each(a, b, c) {
	      var d,
	          e = 0,
	          f = a.length,
	          g = r(a);if (c) {
	        if (g) {
	          for (; f > e; e++) {
	            if (d = b.apply(a[e], c), d === !1) break;
	          }
	        } else for (e in a) {
	          if (d = b.apply(a[e], c), d === !1) break;
	        }
	      } else if (g) {
	        for (; f > e; e++) {
	          if (d = b.call(a[e], e, a[e]), d === !1) break;
	        }
	      } else for (e in a) {
	        if (d = b.call(a[e], e, a[e]), d === !1) break;
	      }return a;
	    }, trim: function trim(a) {
	      return null == a ? "" : (a + "").replace(n, "");
	    }, makeArray: function makeArray(a, b) {
	      var c = b || [];return null != a && (r(Object(a)) ? m.merge(c, "string" == typeof a ? [a] : a) : f.call(c, a)), c;
	    }, inArray: function inArray(a, b, c) {
	      var d;if (b) {
	        if (g) return g.call(b, a, c);for (d = b.length, c = c ? 0 > c ? Math.max(0, d + c) : c : 0; d > c; c++) {
	          if (c in b && b[c] === a) return c;
	        }
	      }return -1;
	    }, merge: function merge(a, b) {
	      var c = +b.length,
	          d = 0,
	          e = a.length;while (c > d) {
	        a[e++] = b[d++];
	      }if (c !== c) while (void 0 !== b[d]) {
	        a[e++] = b[d++];
	      }return a.length = e, a;
	    }, grep: function grep(a, b, c) {
	      for (var d, e = [], f = 0, g = a.length, h = !c; g > f; f++) {
	        d = !b(a[f], f), d !== h && e.push(a[f]);
	      }return e;
	    }, map: function map(a, b, c) {
	      var d,
	          f = 0,
	          g = a.length,
	          h = r(a),
	          i = [];if (h) for (; g > f; f++) {
	        d = b(a[f], f, c), null != d && i.push(d);
	      } else for (f in a) {
	        d = b(a[f], f, c), null != d && i.push(d);
	      }return e.apply([], i);
	    }, guid: 1, proxy: function proxy(a, b) {
	      var c, e, f;return "string" == typeof b && (f = a[b], b = a, a = f), m.isFunction(a) ? (c = d.call(arguments, 2), e = function e() {
	        return a.apply(b || this, c.concat(d.call(arguments)));
	      }, e.guid = a.guid = a.guid || m.guid++, e) : void 0;
	    }, now: function now() {
	      return +new Date();
	    }, support: k }), m.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (a, b) {
	    h["[object " + b + "]"] = b.toLowerCase();
	  });function r(a) {
	    var b = "length" in a && a.length,
	        c = m.type(a);return "function" === c || m.isWindow(a) ? !1 : 1 === a.nodeType && b ? !0 : "array" === c || 0 === b || "number" == typeof b && b > 0 && b - 1 in a;
	  }var s = function (a) {
	    var b,
	        c,
	        d,
	        e,
	        f,
	        g,
	        h,
	        i,
	        j,
	        k,
	        l,
	        m,
	        n,
	        o,
	        p,
	        q,
	        r,
	        s,
	        t,
	        u = "sizzle" + 1 * new Date(),
	        v = a.document,
	        w = 0,
	        x = 0,
	        y = ha(),
	        z = ha(),
	        A = ha(),
	        B = function B(a, b) {
	      return a === b && (l = !0), 0;
	    },
	        C = 1 << 31,
	        D = {}.hasOwnProperty,
	        E = [],
	        F = E.pop,
	        G = E.push,
	        H = E.push,
	        I = E.slice,
	        J = function J(a, b) {
	      for (var c = 0, d = a.length; d > c; c++) {
	        if (a[c] === b) return c;
	      }return -1;
	    },
	        K = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
	        L = "[\\x20\\t\\r\\n\\f]",
	        M = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
	        N = M.replace("w", "w#"),
	        O = "\\[" + L + "*(" + M + ")(?:" + L + "*([*^$|!~]?=)" + L + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + N + "))|)" + L + "*\\]",
	        P = ":(" + M + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + O + ")*)|.*)\\)|)",
	        Q = new RegExp(L + "+", "g"),
	        R = new RegExp("^" + L + "+|((?:^|[^\\\\])(?:\\\\.)*)" + L + "+$", "g"),
	        S = new RegExp("^" + L + "*," + L + "*"),
	        T = new RegExp("^" + L + "*([>+~]|" + L + ")" + L + "*"),
	        U = new RegExp("=" + L + "*([^\\]'\"]*?)" + L + "*\\]", "g"),
	        V = new RegExp(P),
	        W = new RegExp("^" + N + "$"),
	        X = { ID: new RegExp("^#(" + M + ")"), CLASS: new RegExp("^\\.(" + M + ")"), TAG: new RegExp("^(" + M.replace("w", "w*") + ")"), ATTR: new RegExp("^" + O), PSEUDO: new RegExp("^" + P), CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + L + "*(even|odd|(([+-]|)(\\d*)n|)" + L + "*(?:([+-]|)" + L + "*(\\d+)|))" + L + "*\\)|)", "i"), bool: new RegExp("^(?:" + K + ")$", "i"), needsContext: new RegExp("^" + L + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + L + "*((?:-\\d)?\\d*)" + L + "*\\)|)(?=[^-]|$)", "i") },
	        Y = /^(?:input|select|textarea|button)$/i,
	        Z = /^h\d$/i,
	        $ = /^[^{]+\{\s*\[native \w/,
	        _ = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
	        aa = /[+~]/,
	        ba = /'|\\/g,
	        ca = new RegExp("\\\\([\\da-f]{1,6}" + L + "?|(" + L + ")|.)", "ig"),
	        da = function da(a, b, c) {
	      var d = "0x" + b - 65536;return d !== d || c ? b : 0 > d ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320);
	    },
	        ea = function ea() {
	      m();
	    };try {
	      H.apply(E = I.call(v.childNodes), v.childNodes), E[v.childNodes.length].nodeType;
	    } catch (fa) {
	      H = { apply: E.length ? function (a, b) {
	          G.apply(a, I.call(b));
	        } : function (a, b) {
	          var c = a.length,
	              d = 0;while (a[c++] = b[d++]) {}a.length = c - 1;
	        } };
	    }function ga(a, b, d, e) {
	      var f, h, j, k, l, o, r, s, w, x;if ((b ? b.ownerDocument || b : v) !== n && m(b), b = b || n, d = d || [], k = b.nodeType, "string" != typeof a || !a || 1 !== k && 9 !== k && 11 !== k) return d;if (!e && p) {
	        if (11 !== k && (f = _.exec(a))) if (j = f[1]) {
	          if (9 === k) {
	            if (h = b.getElementById(j), !h || !h.parentNode) return d;if (h.id === j) return d.push(h), d;
	          } else if (b.ownerDocument && (h = b.ownerDocument.getElementById(j)) && t(b, h) && h.id === j) return d.push(h), d;
	        } else {
	          if (f[2]) return H.apply(d, b.getElementsByTagName(a)), d;if ((j = f[3]) && c.getElementsByClassName) return H.apply(d, b.getElementsByClassName(j)), d;
	        }if (c.qsa && (!q || !q.test(a))) {
	          if (s = r = u, w = b, x = 1 !== k && a, 1 === k && "object" !== b.nodeName.toLowerCase()) {
	            o = g(a), (r = b.getAttribute("id")) ? s = r.replace(ba, "\\$&") : b.setAttribute("id", s), s = "[id='" + s + "'] ", l = o.length;while (l--) {
	              o[l] = s + ra(o[l]);
	            }w = aa.test(a) && pa(b.parentNode) || b, x = o.join(",");
	          }if (x) try {
	            return H.apply(d, w.querySelectorAll(x)), d;
	          } catch (y) {} finally {
	            r || b.removeAttribute("id");
	          }
	        }
	      }return i(a.replace(R, "$1"), b, d, e);
	    }function ha() {
	      var a = [];function b(c, e) {
	        return a.push(c + " ") > d.cacheLength && delete b[a.shift()], b[c + " "] = e;
	      }return b;
	    }function ia(a) {
	      return a[u] = !0, a;
	    }function ja(a) {
	      var b = n.createElement("div");try {
	        return !!a(b);
	      } catch (c) {
	        return !1;
	      } finally {
	        b.parentNode && b.parentNode.removeChild(b), b = null;
	      }
	    }function ka(a, b) {
	      var c = a.split("|"),
	          e = a.length;while (e--) {
	        d.attrHandle[c[e]] = b;
	      }
	    }function la(a, b) {
	      var c = b && a,
	          d = c && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || C) - (~a.sourceIndex || C);if (d) return d;if (c) while (c = c.nextSibling) {
	        if (c === b) return -1;
	      }return a ? 1 : -1;
	    }function ma(a) {
	      return function (b) {
	        var c = b.nodeName.toLowerCase();return "input" === c && b.type === a;
	      };
	    }function na(a) {
	      return function (b) {
	        var c = b.nodeName.toLowerCase();return ("input" === c || "button" === c) && b.type === a;
	      };
	    }function oa(a) {
	      return ia(function (b) {
	        return b = +b, ia(function (c, d) {
	          var e,
	              f = a([], c.length, b),
	              g = f.length;while (g--) {
	            c[e = f[g]] && (c[e] = !(d[e] = c[e]));
	          }
	        });
	      });
	    }function pa(a) {
	      return a && "undefined" != typeof a.getElementsByTagName && a;
	    }c = ga.support = {}, f = ga.isXML = function (a) {
	      var b = a && (a.ownerDocument || a).documentElement;return b ? "HTML" !== b.nodeName : !1;
	    }, m = ga.setDocument = function (a) {
	      var b,
	          e,
	          g = a ? a.ownerDocument || a : v;return g !== n && 9 === g.nodeType && g.documentElement ? (n = g, o = g.documentElement, e = g.defaultView, e && e !== e.top && (e.addEventListener ? e.addEventListener("unload", ea, !1) : e.attachEvent && e.attachEvent("onunload", ea)), p = !f(g), c.attributes = ja(function (a) {
	        return a.className = "i", !a.getAttribute("className");
	      }), c.getElementsByTagName = ja(function (a) {
	        return a.appendChild(g.createComment("")), !a.getElementsByTagName("*").length;
	      }), c.getElementsByClassName = $.test(g.getElementsByClassName), c.getById = ja(function (a) {
	        return o.appendChild(a).id = u, !g.getElementsByName || !g.getElementsByName(u).length;
	      }), c.getById ? (d.find.ID = function (a, b) {
	        if ("undefined" != typeof b.getElementById && p) {
	          var c = b.getElementById(a);return c && c.parentNode ? [c] : [];
	        }
	      }, d.filter.ID = function (a) {
	        var b = a.replace(ca, da);return function (a) {
	          return a.getAttribute("id") === b;
	        };
	      }) : (delete d.find.ID, d.filter.ID = function (a) {
	        var b = a.replace(ca, da);return function (a) {
	          var c = "undefined" != typeof a.getAttributeNode && a.getAttributeNode("id");return c && c.value === b;
	        };
	      }), d.find.TAG = c.getElementsByTagName ? function (a, b) {
	        return "undefined" != typeof b.getElementsByTagName ? b.getElementsByTagName(a) : c.qsa ? b.querySelectorAll(a) : void 0;
	      } : function (a, b) {
	        var c,
	            d = [],
	            e = 0,
	            f = b.getElementsByTagName(a);if ("*" === a) {
	          while (c = f[e++]) {
	            1 === c.nodeType && d.push(c);
	          }return d;
	        }return f;
	      }, d.find.CLASS = c.getElementsByClassName && function (a, b) {
	        return p ? b.getElementsByClassName(a) : void 0;
	      }, r = [], q = [], (c.qsa = $.test(g.querySelectorAll)) && (ja(function (a) {
	        o.appendChild(a).innerHTML = "<a id='" + u + "'></a><select id='" + u + "-\f]' msallowcapture=''><option selected=''></option></select>", a.querySelectorAll("[msallowcapture^='']").length && q.push("[*^$]=" + L + "*(?:''|\"\")"), a.querySelectorAll("[selected]").length || q.push("\\[" + L + "*(?:value|" + K + ")"), a.querySelectorAll("[id~=" + u + "-]").length || q.push("~="), a.querySelectorAll(":checked").length || q.push(":checked"), a.querySelectorAll("a#" + u + "+*").length || q.push(".#.+[+~]");
	      }), ja(function (a) {
	        var b = g.createElement("input");b.setAttribute("type", "hidden"), a.appendChild(b).setAttribute("name", "D"), a.querySelectorAll("[name=d]").length && q.push("name" + L + "*[*^$|!~]?="), a.querySelectorAll(":enabled").length || q.push(":enabled", ":disabled"), a.querySelectorAll("*,:x"), q.push(",.*:");
	      })), (c.matchesSelector = $.test(s = o.matches || o.webkitMatchesSelector || o.mozMatchesSelector || o.oMatchesSelector || o.msMatchesSelector)) && ja(function (a) {
	        c.disconnectedMatch = s.call(a, "div"), s.call(a, "[s!='']:x"), r.push("!=", P);
	      }), q = q.length && new RegExp(q.join("|")), r = r.length && new RegExp(r.join("|")), b = $.test(o.compareDocumentPosition), t = b || $.test(o.contains) ? function (a, b) {
	        var c = 9 === a.nodeType ? a.documentElement : a,
	            d = b && b.parentNode;return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)));
	      } : function (a, b) {
	        if (b) while (b = b.parentNode) {
	          if (b === a) return !0;
	        }return !1;
	      }, B = b ? function (a, b) {
	        if (a === b) return l = !0, 0;var d = !a.compareDocumentPosition - !b.compareDocumentPosition;return d ? d : (d = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & d || !c.sortDetached && b.compareDocumentPosition(a) === d ? a === g || a.ownerDocument === v && t(v, a) ? -1 : b === g || b.ownerDocument === v && t(v, b) ? 1 : k ? J(k, a) - J(k, b) : 0 : 4 & d ? -1 : 1);
	      } : function (a, b) {
	        if (a === b) return l = !0, 0;var c,
	            d = 0,
	            e = a.parentNode,
	            f = b.parentNode,
	            h = [a],
	            i = [b];if (!e || !f) return a === g ? -1 : b === g ? 1 : e ? -1 : f ? 1 : k ? J(k, a) - J(k, b) : 0;if (e === f) return la(a, b);c = a;while (c = c.parentNode) {
	          h.unshift(c);
	        }c = b;while (c = c.parentNode) {
	          i.unshift(c);
	        }while (h[d] === i[d]) {
	          d++;
	        }return d ? la(h[d], i[d]) : h[d] === v ? -1 : i[d] === v ? 1 : 0;
	      }, g) : n;
	    }, ga.matches = function (a, b) {
	      return ga(a, null, null, b);
	    }, ga.matchesSelector = function (a, b) {
	      if ((a.ownerDocument || a) !== n && m(a), b = b.replace(U, "='$1']"), !(!c.matchesSelector || !p || r && r.test(b) || q && q.test(b))) try {
	        var d = s.call(a, b);if (d || c.disconnectedMatch || a.document && 11 !== a.document.nodeType) return d;
	      } catch (e) {}return ga(b, n, null, [a]).length > 0;
	    }, ga.contains = function (a, b) {
	      return (a.ownerDocument || a) !== n && m(a), t(a, b);
	    }, ga.attr = function (a, b) {
	      (a.ownerDocument || a) !== n && m(a);var e = d.attrHandle[b.toLowerCase()],
	          f = e && D.call(d.attrHandle, b.toLowerCase()) ? e(a, b, !p) : void 0;return void 0 !== f ? f : c.attributes || !p ? a.getAttribute(b) : (f = a.getAttributeNode(b)) && f.specified ? f.value : null;
	    }, ga.error = function (a) {
	      throw new Error("Syntax error, unrecognized expression: " + a);
	    }, ga.uniqueSort = function (a) {
	      var b,
	          d = [],
	          e = 0,
	          f = 0;if (l = !c.detectDuplicates, k = !c.sortStable && a.slice(0), a.sort(B), l) {
	        while (b = a[f++]) {
	          b === a[f] && (e = d.push(f));
	        }while (e--) {
	          a.splice(d[e], 1);
	        }
	      }return k = null, a;
	    }, e = ga.getText = function (a) {
	      var b,
	          c = "",
	          d = 0,
	          f = a.nodeType;if (f) {
	        if (1 === f || 9 === f || 11 === f) {
	          if ("string" == typeof a.textContent) return a.textContent;for (a = a.firstChild; a; a = a.nextSibling) {
	            c += e(a);
	          }
	        } else if (3 === f || 4 === f) return a.nodeValue;
	      } else while (b = a[d++]) {
	        c += e(b);
	      }return c;
	    }, d = ga.selectors = { cacheLength: 50, createPseudo: ia, match: X, attrHandle: {}, find: {}, relative: { ">": { dir: "parentNode", first: !0 }, " ": { dir: "parentNode" }, "+": { dir: "previousSibling", first: !0 }, "~": { dir: "previousSibling" } }, preFilter: { ATTR: function ATTR(a) {
	          return a[1] = a[1].replace(ca, da), a[3] = (a[3] || a[4] || a[5] || "").replace(ca, da), "~=" === a[2] && (a[3] = " " + a[3] + " "), a.slice(0, 4);
	        }, CHILD: function CHILD(a) {
	          return a[1] = a[1].toLowerCase(), "nth" === a[1].slice(0, 3) ? (a[3] || ga.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * ("even" === a[3] || "odd" === a[3])), a[5] = +(a[7] + a[8] || "odd" === a[3])) : a[3] && ga.error(a[0]), a;
	        }, PSEUDO: function PSEUDO(a) {
	          var b,
	              c = !a[6] && a[2];return X.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || "" : c && V.test(c) && (b = g(c, !0)) && (b = c.indexOf(")", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3));
	        } }, filter: { TAG: function TAG(a) {
	          var b = a.replace(ca, da).toLowerCase();return "*" === a ? function () {
	            return !0;
	          } : function (a) {
	            return a.nodeName && a.nodeName.toLowerCase() === b;
	          };
	        }, CLASS: function CLASS(a) {
	          var b = y[a + " "];return b || (b = new RegExp("(^|" + L + ")" + a + "(" + L + "|$)")) && y(a, function (a) {
	            return b.test("string" == typeof a.className && a.className || "undefined" != typeof a.getAttribute && a.getAttribute("class") || "");
	          });
	        }, ATTR: function ATTR(a, b, c) {
	          return function (d) {
	            var e = ga.attr(d, a);return null == e ? "!=" === b : b ? (e += "", "=" === b ? e === c : "!=" === b ? e !== c : "^=" === b ? c && 0 === e.indexOf(c) : "*=" === b ? c && e.indexOf(c) > -1 : "$=" === b ? c && e.slice(-c.length) === c : "~=" === b ? (" " + e.replace(Q, " ") + " ").indexOf(c) > -1 : "|=" === b ? e === c || e.slice(0, c.length + 1) === c + "-" : !1) : !0;
	          };
	        }, CHILD: function CHILD(a, b, c, d, e) {
	          var f = "nth" !== a.slice(0, 3),
	              g = "last" !== a.slice(-4),
	              h = "of-type" === b;return 1 === d && 0 === e ? function (a) {
	            return !!a.parentNode;
	          } : function (b, c, i) {
	            var j,
	                k,
	                l,
	                m,
	                n,
	                o,
	                p = f !== g ? "nextSibling" : "previousSibling",
	                q = b.parentNode,
	                r = h && b.nodeName.toLowerCase(),
	                s = !i && !h;if (q) {
	              if (f) {
	                while (p) {
	                  l = b;while (l = l[p]) {
	                    if (h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) return !1;
	                  }o = p = "only" === a && !o && "nextSibling";
	                }return !0;
	              }if (o = [g ? q.firstChild : q.lastChild], g && s) {
	                k = q[u] || (q[u] = {}), j = k[a] || [], n = j[0] === w && j[1], m = j[0] === w && j[2], l = n && q.childNodes[n];while (l = ++n && l && l[p] || (m = n = 0) || o.pop()) {
	                  if (1 === l.nodeType && ++m && l === b) {
	                    k[a] = [w, n, m];break;
	                  }
	                }
	              } else if (s && (j = (b[u] || (b[u] = {}))[a]) && j[0] === w) m = j[1];else while (l = ++n && l && l[p] || (m = n = 0) || o.pop()) {
	                if ((h ? l.nodeName.toLowerCase() === r : 1 === l.nodeType) && ++m && (s && ((l[u] || (l[u] = {}))[a] = [w, m]), l === b)) break;
	              }return m -= e, m === d || m % d === 0 && m / d >= 0;
	            }
	          };
	        }, PSEUDO: function PSEUDO(a, b) {
	          var c,
	              e = d.pseudos[a] || d.setFilters[a.toLowerCase()] || ga.error("unsupported pseudo: " + a);return e[u] ? e(b) : e.length > 1 ? (c = [a, a, "", b], d.setFilters.hasOwnProperty(a.toLowerCase()) ? ia(function (a, c) {
	            var d,
	                f = e(a, b),
	                g = f.length;while (g--) {
	              d = J(a, f[g]), a[d] = !(c[d] = f[g]);
	            }
	          }) : function (a) {
	            return e(a, 0, c);
	          }) : e;
	        } }, pseudos: { not: ia(function (a) {
	          var b = [],
	              c = [],
	              d = h(a.replace(R, "$1"));return d[u] ? ia(function (a, b, c, e) {
	            var f,
	                g = d(a, null, e, []),
	                h = a.length;while (h--) {
	              (f = g[h]) && (a[h] = !(b[h] = f));
	            }
	          }) : function (a, e, f) {
	            return b[0] = a, d(b, null, f, c), b[0] = null, !c.pop();
	          };
	        }), has: ia(function (a) {
	          return function (b) {
	            return ga(a, b).length > 0;
	          };
	        }), contains: ia(function (a) {
	          return a = a.replace(ca, da), function (b) {
	            return (b.textContent || b.innerText || e(b)).indexOf(a) > -1;
	          };
	        }), lang: ia(function (a) {
	          return W.test(a || "") || ga.error("unsupported lang: " + a), a = a.replace(ca, da).toLowerCase(), function (b) {
	            var c;do {
	              if (c = p ? b.lang : b.getAttribute("xml:lang") || b.getAttribute("lang")) return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + "-");
	            } while ((b = b.parentNode) && 1 === b.nodeType);return !1;
	          };
	        }), target: function target(b) {
	          var c = a.location && a.location.hash;return c && c.slice(1) === b.id;
	        }, root: function root(a) {
	          return a === o;
	        }, focus: function focus(a) {
	          return a === n.activeElement && (!n.hasFocus || n.hasFocus()) && !!(a.type || a.href || ~a.tabIndex);
	        }, enabled: function enabled(a) {
	          return a.disabled === !1;
	        }, disabled: function disabled(a) {
	          return a.disabled === !0;
	        }, checked: function checked(a) {
	          var b = a.nodeName.toLowerCase();return "input" === b && !!a.checked || "option" === b && !!a.selected;
	        }, selected: function selected(a) {
	          return a.parentNode && a.parentNode.selectedIndex, a.selected === !0;
	        }, empty: function empty(a) {
	          for (a = a.firstChild; a; a = a.nextSibling) {
	            if (a.nodeType < 6) return !1;
	          }return !0;
	        }, parent: function parent(a) {
	          return !d.pseudos.empty(a);
	        }, header: function header(a) {
	          return Z.test(a.nodeName);
	        }, input: function input(a) {
	          return Y.test(a.nodeName);
	        }, button: function button(a) {
	          var b = a.nodeName.toLowerCase();return "input" === b && "button" === a.type || "button" === b;
	        }, text: function text(a) {
	          var b;return "input" === a.nodeName.toLowerCase() && "text" === a.type && (null == (b = a.getAttribute("type")) || "text" === b.toLowerCase());
	        }, first: oa(function () {
	          return [0];
	        }), last: oa(function (a, b) {
	          return [b - 1];
	        }), eq: oa(function (a, b, c) {
	          return [0 > c ? c + b : c];
	        }), even: oa(function (a, b) {
	          for (var c = 0; b > c; c += 2) {
	            a.push(c);
	          }return a;
	        }), odd: oa(function (a, b) {
	          for (var c = 1; b > c; c += 2) {
	            a.push(c);
	          }return a;
	        }), lt: oa(function (a, b, c) {
	          for (var d = 0 > c ? c + b : c; --d >= 0;) {
	            a.push(d);
	          }return a;
	        }), gt: oa(function (a, b, c) {
	          for (var d = 0 > c ? c + b : c; ++d < b;) {
	            a.push(d);
	          }return a;
	        }) } }, d.pseudos.nth = d.pseudos.eq;for (b in { radio: !0, checkbox: !0, file: !0, password: !0, image: !0 }) {
	      d.pseudos[b] = ma(b);
	    }for (b in { submit: !0, reset: !0 }) {
	      d.pseudos[b] = na(b);
	    }function qa() {}qa.prototype = d.filters = d.pseudos, d.setFilters = new qa(), g = ga.tokenize = function (a, b) {
	      var c,
	          e,
	          f,
	          g,
	          h,
	          i,
	          j,
	          k = z[a + " "];if (k) return b ? 0 : k.slice(0);h = a, i = [], j = d.preFilter;while (h) {
	        (!c || (e = S.exec(h))) && (e && (h = h.slice(e[0].length) || h), i.push(f = [])), c = !1, (e = T.exec(h)) && (c = e.shift(), f.push({ value: c, type: e[0].replace(R, " ") }), h = h.slice(c.length));for (g in d.filter) {
	          !(e = X[g].exec(h)) || j[g] && !(e = j[g](e)) || (c = e.shift(), f.push({ value: c, type: g, matches: e }), h = h.slice(c.length));
	        }if (!c) break;
	      }return b ? h.length : h ? ga.error(a) : z(a, i).slice(0);
	    };function ra(a) {
	      for (var b = 0, c = a.length, d = ""; c > b; b++) {
	        d += a[b].value;
	      }return d;
	    }function sa(a, b, c) {
	      var d = b.dir,
	          e = c && "parentNode" === d,
	          f = x++;return b.first ? function (b, c, f) {
	        while (b = b[d]) {
	          if (1 === b.nodeType || e) return a(b, c, f);
	        }
	      } : function (b, c, g) {
	        var h,
	            i,
	            j = [w, f];if (g) {
	          while (b = b[d]) {
	            if ((1 === b.nodeType || e) && a(b, c, g)) return !0;
	          }
	        } else while (b = b[d]) {
	          if (1 === b.nodeType || e) {
	            if (i = b[u] || (b[u] = {}), (h = i[d]) && h[0] === w && h[1] === f) return j[2] = h[2];if (i[d] = j, j[2] = a(b, c, g)) return !0;
	          }
	        }
	      };
	    }function ta(a) {
	      return a.length > 1 ? function (b, c, d) {
	        var e = a.length;while (e--) {
	          if (!a[e](b, c, d)) return !1;
	        }return !0;
	      } : a[0];
	    }function ua(a, b, c) {
	      for (var d = 0, e = b.length; e > d; d++) {
	        ga(a, b[d], c);
	      }return c;
	    }function va(a, b, c, d, e) {
	      for (var f, g = [], h = 0, i = a.length, j = null != b; i > h; h++) {
	        (f = a[h]) && (!c || c(f, d, e)) && (g.push(f), j && b.push(h));
	      }return g;
	    }function wa(a, b, c, d, e, f) {
	      return d && !d[u] && (d = wa(d)), e && !e[u] && (e = wa(e, f)), ia(function (f, g, h, i) {
	        var j,
	            k,
	            l,
	            m = [],
	            n = [],
	            o = g.length,
	            p = f || ua(b || "*", h.nodeType ? [h] : h, []),
	            q = !a || !f && b ? p : va(p, m, a, h, i),
	            r = c ? e || (f ? a : o || d) ? [] : g : q;if (c && c(q, r, h, i), d) {
	          j = va(r, n), d(j, [], h, i), k = j.length;while (k--) {
	            (l = j[k]) && (r[n[k]] = !(q[n[k]] = l));
	          }
	        }if (f) {
	          if (e || a) {
	            if (e) {
	              j = [], k = r.length;while (k--) {
	                (l = r[k]) && j.push(q[k] = l);
	              }e(null, r = [], j, i);
	            }k = r.length;while (k--) {
	              (l = r[k]) && (j = e ? J(f, l) : m[k]) > -1 && (f[j] = !(g[j] = l));
	            }
	          }
	        } else r = va(r === g ? r.splice(o, r.length) : r), e ? e(null, g, r, i) : H.apply(g, r);
	      });
	    }function xa(a) {
	      for (var b, c, e, f = a.length, g = d.relative[a[0].type], h = g || d.relative[" "], i = g ? 1 : 0, k = sa(function (a) {
	        return a === b;
	      }, h, !0), l = sa(function (a) {
	        return J(b, a) > -1;
	      }, h, !0), m = [function (a, c, d) {
	        var e = !g && (d || c !== j) || ((b = c).nodeType ? k(a, c, d) : l(a, c, d));return b = null, e;
	      }]; f > i; i++) {
	        if (c = d.relative[a[i].type]) m = [sa(ta(m), c)];else {
	          if (c = d.filter[a[i].type].apply(null, a[i].matches), c[u]) {
	            for (e = ++i; f > e; e++) {
	              if (d.relative[a[e].type]) break;
	            }return wa(i > 1 && ta(m), i > 1 && ra(a.slice(0, i - 1).concat({ value: " " === a[i - 2].type ? "*" : "" })).replace(R, "$1"), c, e > i && xa(a.slice(i, e)), f > e && xa(a = a.slice(e)), f > e && ra(a));
	          }m.push(c);
	        }
	      }return ta(m);
	    }function ya(a, b) {
	      var c = b.length > 0,
	          e = a.length > 0,
	          f = function f(_f, g, h, i, k) {
	        var l,
	            m,
	            o,
	            p = 0,
	            q = "0",
	            r = _f && [],
	            s = [],
	            t = j,
	            u = _f || e && d.find.TAG("*", k),
	            v = w += null == t ? 1 : Math.random() || .1,
	            x = u.length;for (k && (j = g !== n && g); q !== x && null != (l = u[q]); q++) {
	          if (e && l) {
	            m = 0;while (o = a[m++]) {
	              if (o(l, g, h)) {
	                i.push(l);break;
	              }
	            }k && (w = v);
	          }c && ((l = !o && l) && p--, _f && r.push(l));
	        }if (p += q, c && q !== p) {
	          m = 0;while (o = b[m++]) {
	            o(r, s, g, h);
	          }if (_f) {
	            if (p > 0) while (q--) {
	              r[q] || s[q] || (s[q] = F.call(i));
	            }s = va(s);
	          }H.apply(i, s), k && !_f && s.length > 0 && p + b.length > 1 && ga.uniqueSort(i);
	        }return k && (w = v, j = t), r;
	      };return c ? ia(f) : f;
	    }return h = ga.compile = function (a, b) {
	      var c,
	          d = [],
	          e = [],
	          f = A[a + " "];if (!f) {
	        b || (b = g(a)), c = b.length;while (c--) {
	          f = xa(b[c]), f[u] ? d.push(f) : e.push(f);
	        }f = A(a, ya(e, d)), f.selector = a;
	      }return f;
	    }, i = ga.select = function (a, b, e, f) {
	      var i,
	          j,
	          k,
	          l,
	          m,
	          n = "function" == typeof a && a,
	          o = !f && g(a = n.selector || a);if (e = e || [], 1 === o.length) {
	        if (j = o[0] = o[0].slice(0), j.length > 2 && "ID" === (k = j[0]).type && c.getById && 9 === b.nodeType && p && d.relative[j[1].type]) {
	          if (b = (d.find.ID(k.matches[0].replace(ca, da), b) || [])[0], !b) return e;n && (b = b.parentNode), a = a.slice(j.shift().value.length);
	        }i = X.needsContext.test(a) ? 0 : j.length;while (i--) {
	          if (k = j[i], d.relative[l = k.type]) break;if ((m = d.find[l]) && (f = m(k.matches[0].replace(ca, da), aa.test(j[0].type) && pa(b.parentNode) || b))) {
	            if (j.splice(i, 1), a = f.length && ra(j), !a) return H.apply(e, f), e;break;
	          }
	        }
	      }return (n || h(a, o))(f, b, !p, e, aa.test(a) && pa(b.parentNode) || b), e;
	    }, c.sortStable = u.split("").sort(B).join("") === u, c.detectDuplicates = !!l, m(), c.sortDetached = ja(function (a) {
	      return 1 & a.compareDocumentPosition(n.createElement("div"));
	    }), ja(function (a) {
	      return a.innerHTML = "<a href='#'></a>", "#" === a.firstChild.getAttribute("href");
	    }) || ka("type|href|height|width", function (a, b, c) {
	      return c ? void 0 : a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2);
	    }), c.attributes && ja(function (a) {
	      return a.innerHTML = "<input/>", a.firstChild.setAttribute("value", ""), "" === a.firstChild.getAttribute("value");
	    }) || ka("value", function (a, b, c) {
	      return c || "input" !== a.nodeName.toLowerCase() ? void 0 : a.defaultValue;
	    }), ja(function (a) {
	      return null == a.getAttribute("disabled");
	    }) || ka(K, function (a, b, c) {
	      var d;return c ? void 0 : a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null;
	    }), ga;
	  }(a);m.find = s, m.expr = s.selectors, m.expr[":"] = m.expr.pseudos, m.unique = s.uniqueSort, m.text = s.getText, m.isXMLDoc = s.isXML, m.contains = s.contains;var t = m.expr.match.needsContext,
	      u = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
	      v = /^.[^:#\[\.,]*$/;function w(a, b, c) {
	    if (m.isFunction(b)) return m.grep(a, function (a, d) {
	      return !!b.call(a, d, a) !== c;
	    });if (b.nodeType) return m.grep(a, function (a) {
	      return a === b !== c;
	    });if ("string" == typeof b) {
	      if (v.test(b)) return m.filter(b, a, c);b = m.filter(b, a);
	    }return m.grep(a, function (a) {
	      return m.inArray(a, b) >= 0 !== c;
	    });
	  }m.filter = function (a, b, c) {
	    var d = b[0];return c && (a = ":not(" + a + ")"), 1 === b.length && 1 === d.nodeType ? m.find.matchesSelector(d, a) ? [d] : [] : m.find.matches(a, m.grep(b, function (a) {
	      return 1 === a.nodeType;
	    }));
	  }, m.fn.extend({ find: function find(a) {
	      var b,
	          c = [],
	          d = this,
	          e = d.length;if ("string" != typeof a) return this.pushStack(m(a).filter(function () {
	        for (b = 0; e > b; b++) {
	          if (m.contains(d[b], this)) return !0;
	        }
	      }));for (b = 0; e > b; b++) {
	        m.find(a, d[b], c);
	      }return c = this.pushStack(e > 1 ? m.unique(c) : c), c.selector = this.selector ? this.selector + " " + a : a, c;
	    }, filter: function filter(a) {
	      return this.pushStack(w(this, a || [], !1));
	    }, not: function not(a) {
	      return this.pushStack(w(this, a || [], !0));
	    }, is: function is(a) {
	      return !!w(this, "string" == typeof a && t.test(a) ? m(a) : a || [], !1).length;
	    } });var x,
	      y = a.document,
	      z = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
	      A = m.fn.init = function (a, b) {
	    var c, d;if (!a) return this;if ("string" == typeof a) {
	      if (c = "<" === a.charAt(0) && ">" === a.charAt(a.length - 1) && a.length >= 3 ? [null, a, null] : z.exec(a), !c || !c[1] && b) return !b || b.jquery ? (b || x).find(a) : this.constructor(b).find(a);if (c[1]) {
	        if (b = b instanceof m ? b[0] : b, m.merge(this, m.parseHTML(c[1], b && b.nodeType ? b.ownerDocument || b : y, !0)), u.test(c[1]) && m.isPlainObject(b)) for (c in b) {
	          m.isFunction(this[c]) ? this[c](b[c]) : this.attr(c, b[c]);
	        }return this;
	      }if (d = y.getElementById(c[2]), d && d.parentNode) {
	        if (d.id !== c[2]) return x.find(a);this.length = 1, this[0] = d;
	      }return this.context = y, this.selector = a, this;
	    }return a.nodeType ? (this.context = this[0] = a, this.length = 1, this) : m.isFunction(a) ? "undefined" != typeof x.ready ? x.ready(a) : a(m) : (void 0 !== a.selector && (this.selector = a.selector, this.context = a.context), m.makeArray(a, this));
	  };A.prototype = m.fn, x = m(y);var B = /^(?:parents|prev(?:Until|All))/,
	      C = { children: !0, contents: !0, next: !0, prev: !0 };m.extend({ dir: function dir(a, b, c) {
	      var d = [],
	          e = a[b];while (e && 9 !== e.nodeType && (void 0 === c || 1 !== e.nodeType || !m(e).is(c))) {
	        1 === e.nodeType && d.push(e), e = e[b];
	      }return d;
	    }, sibling: function sibling(a, b) {
	      for (var c = []; a; a = a.nextSibling) {
	        1 === a.nodeType && a !== b && c.push(a);
	      }return c;
	    } }), m.fn.extend({ has: function has(a) {
	      var b,
	          c = m(a, this),
	          d = c.length;return this.filter(function () {
	        for (b = 0; d > b; b++) {
	          if (m.contains(this, c[b])) return !0;
	        }
	      });
	    }, closest: function closest(a, b) {
	      for (var c, d = 0, e = this.length, f = [], g = t.test(a) || "string" != typeof a ? m(a, b || this.context) : 0; e > d; d++) {
	        for (c = this[d]; c && c !== b; c = c.parentNode) {
	          if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && m.find.matchesSelector(c, a))) {
	            f.push(c);break;
	          }
	        }
	      }return this.pushStack(f.length > 1 ? m.unique(f) : f);
	    }, index: function index(a) {
	      return a ? "string" == typeof a ? m.inArray(this[0], m(a)) : m.inArray(a.jquery ? a[0] : a, this) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
	    }, add: function add(a, b) {
	      return this.pushStack(m.unique(m.merge(this.get(), m(a, b))));
	    }, addBack: function addBack(a) {
	      return this.add(null == a ? this.prevObject : this.prevObject.filter(a));
	    } });function D(a, b) {
	    do {
	      a = a[b];
	    } while (a && 1 !== a.nodeType);return a;
	  }m.each({ parent: function parent(a) {
	      var b = a.parentNode;return b && 11 !== b.nodeType ? b : null;
	    }, parents: function parents(a) {
	      return m.dir(a, "parentNode");
	    }, parentsUntil: function parentsUntil(a, b, c) {
	      return m.dir(a, "parentNode", c);
	    }, next: function next(a) {
	      return D(a, "nextSibling");
	    }, prev: function prev(a) {
	      return D(a, "previousSibling");
	    }, nextAll: function nextAll(a) {
	      return m.dir(a, "nextSibling");
	    }, prevAll: function prevAll(a) {
	      return m.dir(a, "previousSibling");
	    }, nextUntil: function nextUntil(a, b, c) {
	      return m.dir(a, "nextSibling", c);
	    }, prevUntil: function prevUntil(a, b, c) {
	      return m.dir(a, "previousSibling", c);
	    }, siblings: function siblings(a) {
	      return m.sibling((a.parentNode || {}).firstChild, a);
	    }, children: function children(a) {
	      return m.sibling(a.firstChild);
	    }, contents: function contents(a) {
	      return m.nodeName(a, "iframe") ? a.contentDocument || a.contentWindow.document : m.merge([], a.childNodes);
	    } }, function (a, b) {
	    m.fn[a] = function (c, d) {
	      var e = m.map(this, b, c);return "Until" !== a.slice(-5) && (d = c), d && "string" == typeof d && (e = m.filter(d, e)), this.length > 1 && (C[a] || (e = m.unique(e)), B.test(a) && (e = e.reverse())), this.pushStack(e);
	    };
	  });var E = /\S+/g,
	      F = {};function G(a) {
	    var b = F[a] = {};return m.each(a.match(E) || [], function (a, c) {
	      b[c] = !0;
	    }), b;
	  }m.Callbacks = function (a) {
	    a = "string" == typeof a ? F[a] || G(a) : m.extend({}, a);var b,
	        c,
	        d,
	        e,
	        f,
	        g,
	        h = [],
	        i = !a.once && [],
	        j = function j(l) {
	      for (c = a.memory && l, d = !0, f = g || 0, g = 0, e = h.length, b = !0; h && e > f; f++) {
	        if (h[f].apply(l[0], l[1]) === !1 && a.stopOnFalse) {
	          c = !1;break;
	        }
	      }b = !1, h && (i ? i.length && j(i.shift()) : c ? h = [] : k.disable());
	    },
	        k = { add: function add() {
	        if (h) {
	          var d = h.length;!function f(b) {
	            m.each(b, function (b, c) {
	              var d = m.type(c);"function" === d ? a.unique && k.has(c) || h.push(c) : c && c.length && "string" !== d && f(c);
	            });
	          }(arguments), b ? e = h.length : c && (g = d, j(c));
	        }return this;
	      }, remove: function remove() {
	        return h && m.each(arguments, function (a, c) {
	          var d;while ((d = m.inArray(c, h, d)) > -1) {
	            h.splice(d, 1), b && (e >= d && e--, f >= d && f--);
	          }
	        }), this;
	      }, has: function has(a) {
	        return a ? m.inArray(a, h) > -1 : !(!h || !h.length);
	      }, empty: function empty() {
	        return h = [], e = 0, this;
	      }, disable: function disable() {
	        return h = i = c = void 0, this;
	      }, disabled: function disabled() {
	        return !h;
	      }, lock: function lock() {
	        return i = void 0, c || k.disable(), this;
	      }, locked: function locked() {
	        return !i;
	      }, fireWith: function fireWith(a, c) {
	        return !h || d && !i || (c = c || [], c = [a, c.slice ? c.slice() : c], b ? i.push(c) : j(c)), this;
	      }, fire: function fire() {
	        return k.fireWith(this, arguments), this;
	      }, fired: function fired() {
	        return !!d;
	      } };return k;
	  }, m.extend({ Deferred: function Deferred(a) {
	      var b = [["resolve", "done", m.Callbacks("once memory"), "resolved"], ["reject", "fail", m.Callbacks("once memory"), "rejected"], ["notify", "progress", m.Callbacks("memory")]],
	          c = "pending",
	          d = { state: function state() {
	          return c;
	        }, always: function always() {
	          return e.done(arguments).fail(arguments), this;
	        }, then: function then() {
	          var a = arguments;return m.Deferred(function (c) {
	            m.each(b, function (b, f) {
	              var g = m.isFunction(a[b]) && a[b];e[f[1]](function () {
	                var a = g && g.apply(this, arguments);a && m.isFunction(a.promise) ? a.promise().done(c.resolve).fail(c.reject).progress(c.notify) : c[f[0] + "With"](this === d ? c.promise() : this, g ? [a] : arguments);
	              });
	            }), a = null;
	          }).promise();
	        }, promise: function promise(a) {
	          return null != a ? m.extend(a, d) : d;
	        } },
	          e = {};return d.pipe = d.then, m.each(b, function (a, f) {
	        var g = f[2],
	            h = f[3];d[f[1]] = g.add, h && g.add(function () {
	          c = h;
	        }, b[1 ^ a][2].disable, b[2][2].lock), e[f[0]] = function () {
	          return e[f[0] + "With"](this === e ? d : this, arguments), this;
	        }, e[f[0] + "With"] = g.fireWith;
	      }), d.promise(e), a && a.call(e, e), e;
	    }, when: function when(a) {
	      var b = 0,
	          c = d.call(arguments),
	          e = c.length,
	          f = 1 !== e || a && m.isFunction(a.promise) ? e : 0,
	          g = 1 === f ? a : m.Deferred(),
	          h = function h(a, b, c) {
	        return function (e) {
	          b[a] = this, c[a] = arguments.length > 1 ? d.call(arguments) : e, c === i ? g.notifyWith(b, c) : --f || g.resolveWith(b, c);
	        };
	      },
	          i,
	          j,
	          k;if (e > 1) for (i = new Array(e), j = new Array(e), k = new Array(e); e > b; b++) {
	        c[b] && m.isFunction(c[b].promise) ? c[b].promise().done(h(b, k, c)).fail(g.reject).progress(h(b, j, i)) : --f;
	      }return f || g.resolveWith(k, c), g.promise();
	    } });var H;m.fn.ready = function (a) {
	    return m.ready.promise().done(a), this;
	  }, m.extend({ isReady: !1, readyWait: 1, holdReady: function holdReady(a) {
	      a ? m.readyWait++ : m.ready(!0);
	    }, ready: function ready(a) {
	      if (a === !0 ? ! --m.readyWait : !m.isReady) {
	        if (!y.body) return setTimeout(m.ready);m.isReady = !0, a !== !0 && --m.readyWait > 0 || (H.resolveWith(y, [m]), m.fn.triggerHandler && (m(y).triggerHandler("ready"), m(y).off("ready")));
	      }
	    } });function I() {
	    y.addEventListener ? (y.removeEventListener("DOMContentLoaded", J, !1), a.removeEventListener("load", J, !1)) : (y.detachEvent("onreadystatechange", J), a.detachEvent("onload", J));
	  }function J() {
	    (y.addEventListener || "load" === event.type || "complete" === y.readyState) && (I(), m.ready());
	  }m.ready.promise = function (b) {
	    if (!H) if (H = m.Deferred(), "complete" === y.readyState) setTimeout(m.ready);else if (y.addEventListener) y.addEventListener("DOMContentLoaded", J, !1), a.addEventListener("load", J, !1);else {
	      y.attachEvent("onreadystatechange", J), a.attachEvent("onload", J);var c = !1;try {
	        c = null == a.frameElement && y.documentElement;
	      } catch (d) {}c && c.doScroll && !function e() {
	        if (!m.isReady) {
	          try {
	            c.doScroll("left");
	          } catch (a) {
	            return setTimeout(e, 50);
	          }I(), m.ready();
	        }
	      }();
	    }return H.promise(b);
	  };var K = "undefined",
	      L;for (L in m(k)) {
	    break;
	  }k.ownLast = "0" !== L, k.inlineBlockNeedsLayout = !1, m(function () {
	    var a, b, c, d;c = y.getElementsByTagName("body")[0], c && c.style && (b = y.createElement("div"), d = y.createElement("div"), d.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", c.appendChild(d).appendChild(b), _typeof(b.style.zoom) !== K && (b.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1", k.inlineBlockNeedsLayout = a = 3 === b.offsetWidth, a && (c.style.zoom = 1)), c.removeChild(d));
	  }), function () {
	    var a = y.createElement("div");if (null == k.deleteExpando) {
	      k.deleteExpando = !0;try {
	        delete a.test;
	      } catch (b) {
	        k.deleteExpando = !1;
	      }
	    }a = null;
	  }(), m.acceptData = function (a) {
	    var b = m.noData[(a.nodeName + " ").toLowerCase()],
	        c = +a.nodeType || 1;return 1 !== c && 9 !== c ? !1 : !b || b !== !0 && a.getAttribute("classid") === b;
	  };var M = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	      N = /([A-Z])/g;function O(a, b, c) {
	    if (void 0 === c && 1 === a.nodeType) {
	      var d = "data-" + b.replace(N, "-$1").toLowerCase();if (c = a.getAttribute(d), "string" == typeof c) {
	        try {
	          c = "true" === c ? !0 : "false" === c ? !1 : "null" === c ? null : +c + "" === c ? +c : M.test(c) ? m.parseJSON(c) : c;
	        } catch (e) {}m.data(a, b, c);
	      } else c = void 0;
	    }return c;
	  }function P(a) {
	    var b;for (b in a) {
	      if (("data" !== b || !m.isEmptyObject(a[b])) && "toJSON" !== b) return !1;
	    }return !0;
	  }function Q(a, b, d, e) {
	    if (m.acceptData(a)) {
	      var f,
	          g,
	          h = m.expando,
	          i = a.nodeType,
	          j = i ? m.cache : a,
	          k = i ? a[h] : a[h] && h;if (k && j[k] && (e || j[k].data) || void 0 !== d || "string" != typeof b) return k || (k = i ? a[h] = c.pop() || m.guid++ : h), j[k] || (j[k] = i ? {} : { toJSON: m.noop }), ("object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) || "function" == typeof b) && (e ? j[k] = m.extend(j[k], b) : j[k].data = m.extend(j[k].data, b)), g = j[k], e || (g.data || (g.data = {}), g = g.data), void 0 !== d && (g[m.camelCase(b)] = d), "string" == typeof b ? (f = g[b], null == f && (f = g[m.camelCase(b)])) : f = g, f;
	    }
	  }function R(a, b, c) {
	    if (m.acceptData(a)) {
	      var d,
	          e,
	          f = a.nodeType,
	          g = f ? m.cache : a,
	          h = f ? a[m.expando] : m.expando;if (g[h]) {
	        if (b && (d = c ? g[h] : g[h].data)) {
	          m.isArray(b) ? b = b.concat(m.map(b, m.camelCase)) : b in d ? b = [b] : (b = m.camelCase(b), b = b in d ? [b] : b.split(" ")), e = b.length;while (e--) {
	            delete d[b[e]];
	          }if (c ? !P(d) : !m.isEmptyObject(d)) return;
	        }(c || (delete g[h].data, P(g[h]))) && (f ? m.cleanData([a], !0) : k.deleteExpando || g != g.window ? delete g[h] : g[h] = null);
	      }
	    }
	  }m.extend({ cache: {}, noData: { "applet ": !0, "embed ": !0, "object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" }, hasData: function hasData(a) {
	      return a = a.nodeType ? m.cache[a[m.expando]] : a[m.expando], !!a && !P(a);
	    }, data: function data(a, b, c) {
	      return Q(a, b, c);
	    }, removeData: function removeData(a, b) {
	      return R(a, b);
	    }, _data: function _data(a, b, c) {
	      return Q(a, b, c, !0);
	    }, _removeData: function _removeData(a, b) {
	      return R(a, b, !0);
	    } }), m.fn.extend({ data: function data(a, b) {
	      var c,
	          d,
	          e,
	          f = this[0],
	          g = f && f.attributes;if (void 0 === a) {
	        if (this.length && (e = m.data(f), 1 === f.nodeType && !m._data(f, "parsedAttrs"))) {
	          c = g.length;while (c--) {
	            g[c] && (d = g[c].name, 0 === d.indexOf("data-") && (d = m.camelCase(d.slice(5)), O(f, d, e[d])));
	          }m._data(f, "parsedAttrs", !0);
	        }return e;
	      }return "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) ? this.each(function () {
	        m.data(this, a);
	      }) : arguments.length > 1 ? this.each(function () {
	        m.data(this, a, b);
	      }) : f ? O(f, a, m.data(f, a)) : void 0;
	    }, removeData: function removeData(a) {
	      return this.each(function () {
	        m.removeData(this, a);
	      });
	    } }), m.extend({ queue: function queue(a, b, c) {
	      var d;return a ? (b = (b || "fx") + "queue", d = m._data(a, b), c && (!d || m.isArray(c) ? d = m._data(a, b, m.makeArray(c)) : d.push(c)), d || []) : void 0;
	    }, dequeue: function dequeue(a, b) {
	      b = b || "fx";var c = m.queue(a, b),
	          d = c.length,
	          e = c.shift(),
	          f = m._queueHooks(a, b),
	          g = function g() {
	        m.dequeue(a, b);
	      };"inprogress" === e && (e = c.shift(), d--), e && ("fx" === b && c.unshift("inprogress"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire();
	    }, _queueHooks: function _queueHooks(a, b) {
	      var c = b + "queueHooks";return m._data(a, c) || m._data(a, c, { empty: m.Callbacks("once memory").add(function () {
	          m._removeData(a, b + "queue"), m._removeData(a, c);
	        }) });
	    } }), m.fn.extend({ queue: function queue(a, b) {
	      var c = 2;return "string" != typeof a && (b = a, a = "fx", c--), arguments.length < c ? m.queue(this[0], a) : void 0 === b ? this : this.each(function () {
	        var c = m.queue(this, a, b);m._queueHooks(this, a), "fx" === a && "inprogress" !== c[0] && m.dequeue(this, a);
	      });
	    }, dequeue: function dequeue(a) {
	      return this.each(function () {
	        m.dequeue(this, a);
	      });
	    }, clearQueue: function clearQueue(a) {
	      return this.queue(a || "fx", []);
	    }, promise: function promise(a, b) {
	      var c,
	          d = 1,
	          e = m.Deferred(),
	          f = this,
	          g = this.length,
	          h = function h() {
	        --d || e.resolveWith(f, [f]);
	      };"string" != typeof a && (b = a, a = void 0), a = a || "fx";while (g--) {
	        c = m._data(f[g], a + "queueHooks"), c && c.empty && (d++, c.empty.add(h));
	      }return h(), e.promise(b);
	    } });var S = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
	      T = ["Top", "Right", "Bottom", "Left"],
	      U = function U(a, b) {
	    return a = b || a, "none" === m.css(a, "display") || !m.contains(a.ownerDocument, a);
	  },
	      V = m.access = function (a, b, c, d, e, f, g) {
	    var h = 0,
	        i = a.length,
	        j = null == c;if ("object" === m.type(c)) {
	      e = !0;for (h in c) {
	        m.access(a, b, h, c[h], !0, f, g);
	      }
	    } else if (void 0 !== d && (e = !0, m.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function b(a, _b2, c) {
	      return j.call(m(a), c);
	    })), b)) for (; i > h; h++) {
	      b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));
	    }return e ? a : j ? b.call(a) : i ? b(a[0], c) : f;
	  },
	      W = /^(?:checkbox|radio)$/i;!function () {
	    var a = y.createElement("input"),
	        b = y.createElement("div"),
	        c = y.createDocumentFragment();if (b.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", k.leadingWhitespace = 3 === b.firstChild.nodeType, k.tbody = !b.getElementsByTagName("tbody").length, k.htmlSerialize = !!b.getElementsByTagName("link").length, k.html5Clone = "<:nav></:nav>" !== y.createElement("nav").cloneNode(!0).outerHTML, a.type = "checkbox", a.checked = !0, c.appendChild(a), k.appendChecked = a.checked, b.innerHTML = "<textarea>x</textarea>", k.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue, c.appendChild(b), b.innerHTML = "<input type='radio' checked='checked' name='t'/>", k.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, k.noCloneEvent = !0, b.attachEvent && (b.attachEvent("onclick", function () {
	      k.noCloneEvent = !1;
	    }), b.cloneNode(!0).click()), null == k.deleteExpando) {
	      k.deleteExpando = !0;try {
	        delete b.test;
	      } catch (d) {
	        k.deleteExpando = !1;
	      }
	    }
	  }(), function () {
	    var b,
	        c,
	        d = y.createElement("div");for (b in { submit: !0, change: !0, focusin: !0 }) {
	      c = "on" + b, (k[b + "Bubbles"] = c in a) || (d.setAttribute(c, "t"), k[b + "Bubbles"] = d.attributes[c].expando === !1);
	    }d = null;
	  }();var X = /^(?:input|select|textarea)$/i,
	      Y = /^key/,
	      Z = /^(?:mouse|pointer|contextmenu)|click/,
	      $ = /^(?:focusinfocus|focusoutblur)$/,
	      _ = /^([^.]*)(?:\.(.+)|)$/;function aa() {
	    return !0;
	  }function ba() {
	    return !1;
	  }function ca() {
	    try {
	      return y.activeElement;
	    } catch (a) {}
	  }m.event = { global: {}, add: function add(a, b, c, d, e) {
	      var f,
	          g,
	          h,
	          i,
	          j,
	          k,
	          l,
	          n,
	          o,
	          p,
	          q,
	          r = m._data(a);if (r) {
	        c.handler && (i = c, c = i.handler, e = i.selector), c.guid || (c.guid = m.guid++), (g = r.events) || (g = r.events = {}), (k = r.handle) || (k = r.handle = function (a) {
	          return (typeof m === "undefined" ? "undefined" : _typeof(m)) === K || a && m.event.triggered === a.type ? void 0 : m.event.dispatch.apply(k.elem, arguments);
	        }, k.elem = a), b = (b || "").match(E) || [""], h = b.length;while (h--) {
	          f = _.exec(b[h]) || [], o = q = f[1], p = (f[2] || "").split(".").sort(), o && (j = m.event.special[o] || {}, o = (e ? j.delegateType : j.bindType) || o, j = m.event.special[o] || {}, l = m.extend({ type: o, origType: q, data: d, handler: c, guid: c.guid, selector: e, needsContext: e && m.expr.match.needsContext.test(e), namespace: p.join(".") }, i), (n = g[o]) || (n = g[o] = [], n.delegateCount = 0, j.setup && j.setup.call(a, d, p, k) !== !1 || (a.addEventListener ? a.addEventListener(o, k, !1) : a.attachEvent && a.attachEvent("on" + o, k))), j.add && (j.add.call(a, l), l.handler.guid || (l.handler.guid = c.guid)), e ? n.splice(n.delegateCount++, 0, l) : n.push(l), m.event.global[o] = !0);
	        }a = null;
	      }
	    }, remove: function remove(a, b, c, d, e) {
	      var f,
	          g,
	          h,
	          i,
	          j,
	          k,
	          l,
	          n,
	          o,
	          p,
	          q,
	          r = m.hasData(a) && m._data(a);if (r && (k = r.events)) {
	        b = (b || "").match(E) || [""], j = b.length;while (j--) {
	          if (h = _.exec(b[j]) || [], o = q = h[1], p = (h[2] || "").split(".").sort(), o) {
	            l = m.event.special[o] || {}, o = (d ? l.delegateType : l.bindType) || o, n = k[o] || [], h = h[2] && new RegExp("(^|\\.)" + p.join("\\.(?:.*\\.|)") + "(\\.|$)"), i = f = n.length;while (f--) {
	              g = n[f], !e && q !== g.origType || c && c.guid !== g.guid || h && !h.test(g.namespace) || d && d !== g.selector && ("**" !== d || !g.selector) || (n.splice(f, 1), g.selector && n.delegateCount--, l.remove && l.remove.call(a, g));
	            }i && !n.length && (l.teardown && l.teardown.call(a, p, r.handle) !== !1 || m.removeEvent(a, o, r.handle), delete k[o]);
	          } else for (o in k) {
	            m.event.remove(a, o + b[j], c, d, !0);
	          }
	        }m.isEmptyObject(k) && (delete r.handle, m._removeData(a, "events"));
	      }
	    }, trigger: function trigger(b, c, d, e) {
	      var f,
	          g,
	          h,
	          i,
	          k,
	          l,
	          n,
	          o = [d || y],
	          p = j.call(b, "type") ? b.type : b,
	          q = j.call(b, "namespace") ? b.namespace.split(".") : [];if (h = l = d = d || y, 3 !== d.nodeType && 8 !== d.nodeType && !$.test(p + m.event.triggered) && (p.indexOf(".") >= 0 && (q = p.split("."), p = q.shift(), q.sort()), g = p.indexOf(":") < 0 && "on" + p, b = b[m.expando] ? b : new m.Event(p, "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && b), b.isTrigger = e ? 2 : 3, b.namespace = q.join("."), b.namespace_re = b.namespace ? new RegExp("(^|\\.)" + q.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, b.result = void 0, b.target || (b.target = d), c = null == c ? [b] : m.makeArray(c, [b]), k = m.event.special[p] || {}, e || !k.trigger || k.trigger.apply(d, c) !== !1)) {
	        if (!e && !k.noBubble && !m.isWindow(d)) {
	          for (i = k.delegateType || p, $.test(i + p) || (h = h.parentNode); h; h = h.parentNode) {
	            o.push(h), l = h;
	          }l === (d.ownerDocument || y) && o.push(l.defaultView || l.parentWindow || a);
	        }n = 0;while ((h = o[n++]) && !b.isPropagationStopped()) {
	          b.type = n > 1 ? i : k.bindType || p, f = (m._data(h, "events") || {})[b.type] && m._data(h, "handle"), f && f.apply(h, c), f = g && h[g], f && f.apply && m.acceptData(h) && (b.result = f.apply(h, c), b.result === !1 && b.preventDefault());
	        }if (b.type = p, !e && !b.isDefaultPrevented() && (!k._default || k._default.apply(o.pop(), c) === !1) && m.acceptData(d) && g && d[p] && !m.isWindow(d)) {
	          l = d[g], l && (d[g] = null), m.event.triggered = p;try {
	            d[p]();
	          } catch (r) {}m.event.triggered = void 0, l && (d[g] = l);
	        }return b.result;
	      }
	    }, dispatch: function dispatch(a) {
	      a = m.event.fix(a);var b,
	          c,
	          e,
	          f,
	          g,
	          h = [],
	          i = d.call(arguments),
	          j = (m._data(this, "events") || {})[a.type] || [],
	          k = m.event.special[a.type] || {};if (i[0] = a, a.delegateTarget = this, !k.preDispatch || k.preDispatch.call(this, a) !== !1) {
	        h = m.event.handlers.call(this, a, j), b = 0;while ((f = h[b++]) && !a.isPropagationStopped()) {
	          a.currentTarget = f.elem, g = 0;while ((e = f.handlers[g++]) && !a.isImmediatePropagationStopped()) {
	            (!a.namespace_re || a.namespace_re.test(e.namespace)) && (a.handleObj = e, a.data = e.data, c = ((m.event.special[e.origType] || {}).handle || e.handler).apply(f.elem, i), void 0 !== c && (a.result = c) === !1 && (a.preventDefault(), a.stopPropagation()));
	          }
	        }return k.postDispatch && k.postDispatch.call(this, a), a.result;
	      }
	    }, handlers: function handlers(a, b) {
	      var c,
	          d,
	          e,
	          f,
	          g = [],
	          h = b.delegateCount,
	          i = a.target;if (h && i.nodeType && (!a.button || "click" !== a.type)) for (; i != this; i = i.parentNode || this) {
	        if (1 === i.nodeType && (i.disabled !== !0 || "click" !== a.type)) {
	          for (e = [], f = 0; h > f; f++) {
	            d = b[f], c = d.selector + " ", void 0 === e[c] && (e[c] = d.needsContext ? m(c, this).index(i) >= 0 : m.find(c, this, null, [i]).length), e[c] && e.push(d);
	          }e.length && g.push({ elem: i, handlers: e });
	        }
	      }return h < b.length && g.push({ elem: this, handlers: b.slice(h) }), g;
	    }, fix: function fix(a) {
	      if (a[m.expando]) return a;var b,
	          c,
	          d,
	          e = a.type,
	          f = a,
	          g = this.fixHooks[e];g || (this.fixHooks[e] = g = Z.test(e) ? this.mouseHooks : Y.test(e) ? this.keyHooks : {}), d = g.props ? this.props.concat(g.props) : this.props, a = new m.Event(f), b = d.length;while (b--) {
	        c = d[b], a[c] = f[c];
	      }return a.target || (a.target = f.srcElement || y), 3 === a.target.nodeType && (a.target = a.target.parentNode), a.metaKey = !!a.metaKey, g.filter ? g.filter(a, f) : a;
	    }, props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "), fixHooks: {}, keyHooks: { props: "char charCode key keyCode".split(" "), filter: function filter(a, b) {
	        return null == a.which && (a.which = null != b.charCode ? b.charCode : b.keyCode), a;
	      } }, mouseHooks: { props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "), filter: function filter(a, b) {
	        var c,
	            d,
	            e,
	            f = b.button,
	            g = b.fromElement;return null == a.pageX && null != b.clientX && (d = a.target.ownerDocument || y, e = d.documentElement, c = d.body, a.pageX = b.clientX + (e && e.scrollLeft || c && c.scrollLeft || 0) - (e && e.clientLeft || c && c.clientLeft || 0), a.pageY = b.clientY + (e && e.scrollTop || c && c.scrollTop || 0) - (e && e.clientTop || c && c.clientTop || 0)), !a.relatedTarget && g && (a.relatedTarget = g === a.target ? b.toElement : g), a.which || void 0 === f || (a.which = 1 & f ? 1 : 2 & f ? 3 : 4 & f ? 2 : 0), a;
	      } }, special: { load: { noBubble: !0 }, focus: { trigger: function trigger() {
	          if (this !== ca() && this.focus) try {
	            return this.focus(), !1;
	          } catch (a) {}
	        }, delegateType: "focusin" }, blur: { trigger: function trigger() {
	          return this === ca() && this.blur ? (this.blur(), !1) : void 0;
	        }, delegateType: "focusout" }, click: { trigger: function trigger() {
	          return m.nodeName(this, "input") && "checkbox" === this.type && this.click ? (this.click(), !1) : void 0;
	        }, _default: function _default(a) {
	          return m.nodeName(a.target, "a");
	        } }, beforeunload: { postDispatch: function postDispatch(a) {
	          void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result);
	        } } }, simulate: function simulate(a, b, c, d) {
	      var e = m.extend(new m.Event(), c, { type: a, isSimulated: !0, originalEvent: {} });d ? m.event.trigger(e, null, b) : m.event.dispatch.call(b, e), e.isDefaultPrevented() && c.preventDefault();
	    } }, m.removeEvent = y.removeEventListener ? function (a, b, c) {
	    a.removeEventListener && a.removeEventListener(b, c, !1);
	  } : function (a, b, c) {
	    var d = "on" + b;a.detachEvent && (_typeof(a[d]) === K && (a[d] = null), a.detachEvent(d, c));
	  }, m.Event = function (a, b) {
	    return this instanceof m.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? aa : ba) : this.type = a, b && m.extend(this, b), this.timeStamp = a && a.timeStamp || m.now(), void (this[m.expando] = !0)) : new m.Event(a, b);
	  }, m.Event.prototype = { isDefaultPrevented: ba, isPropagationStopped: ba, isImmediatePropagationStopped: ba, preventDefault: function preventDefault() {
	      var a = this.originalEvent;this.isDefaultPrevented = aa, a && (a.preventDefault ? a.preventDefault() : a.returnValue = !1);
	    }, stopPropagation: function stopPropagation() {
	      var a = this.originalEvent;this.isPropagationStopped = aa, a && (a.stopPropagation && a.stopPropagation(), a.cancelBubble = !0);
	    }, stopImmediatePropagation: function stopImmediatePropagation() {
	      var a = this.originalEvent;this.isImmediatePropagationStopped = aa, a && a.stopImmediatePropagation && a.stopImmediatePropagation(), this.stopPropagation();
	    } }, m.each({ mouseenter: "mouseover", mouseleave: "mouseout", pointerenter: "pointerover", pointerleave: "pointerout" }, function (a, b) {
	    m.event.special[a] = { delegateType: b, bindType: b, handle: function handle(a) {
	        var c,
	            d = this,
	            e = a.relatedTarget,
	            f = a.handleObj;return (!e || e !== d && !m.contains(d, e)) && (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c;
	      } };
	  }), k.submitBubbles || (m.event.special.submit = { setup: function setup() {
	      return m.nodeName(this, "form") ? !1 : void m.event.add(this, "click._submit keypress._submit", function (a) {
	        var b = a.target,
	            c = m.nodeName(b, "input") || m.nodeName(b, "button") ? b.form : void 0;c && !m._data(c, "submitBubbles") && (m.event.add(c, "submit._submit", function (a) {
	          a._submit_bubble = !0;
	        }), m._data(c, "submitBubbles", !0));
	      });
	    }, postDispatch: function postDispatch(a) {
	      a._submit_bubble && (delete a._submit_bubble, this.parentNode && !a.isTrigger && m.event.simulate("submit", this.parentNode, a, !0));
	    }, teardown: function teardown() {
	      return m.nodeName(this, "form") ? !1 : void m.event.remove(this, "._submit");
	    } }), k.changeBubbles || (m.event.special.change = { setup: function setup() {
	      return X.test(this.nodeName) ? (("checkbox" === this.type || "radio" === this.type) && (m.event.add(this, "propertychange._change", function (a) {
	        "checked" === a.originalEvent.propertyName && (this._just_changed = !0);
	      }), m.event.add(this, "click._change", function (a) {
	        this._just_changed && !a.isTrigger && (this._just_changed = !1), m.event.simulate("change", this, a, !0);
	      })), !1) : void m.event.add(this, "beforeactivate._change", function (a) {
	        var b = a.target;X.test(b.nodeName) && !m._data(b, "changeBubbles") && (m.event.add(b, "change._change", function (a) {
	          !this.parentNode || a.isSimulated || a.isTrigger || m.event.simulate("change", this.parentNode, a, !0);
	        }), m._data(b, "changeBubbles", !0));
	      });
	    }, handle: function handle(a) {
	      var b = a.target;return this !== b || a.isSimulated || a.isTrigger || "radio" !== b.type && "checkbox" !== b.type ? a.handleObj.handler.apply(this, arguments) : void 0;
	    }, teardown: function teardown() {
	      return m.event.remove(this, "._change"), !X.test(this.nodeName);
	    } }), k.focusinBubbles || m.each({ focus: "focusin", blur: "focusout" }, function (a, b) {
	    var c = function c(a) {
	      m.event.simulate(b, a.target, m.event.fix(a), !0);
	    };m.event.special[b] = { setup: function setup() {
	        var d = this.ownerDocument || this,
	            e = m._data(d, b);e || d.addEventListener(a, c, !0), m._data(d, b, (e || 0) + 1);
	      }, teardown: function teardown() {
	        var d = this.ownerDocument || this,
	            e = m._data(d, b) - 1;e ? m._data(d, b, e) : (d.removeEventListener(a, c, !0), m._removeData(d, b));
	      } };
	  }), m.fn.extend({ on: function on(a, b, c, d, e) {
	      var f, g;if ("object" == (typeof a === "undefined" ? "undefined" : _typeof(a))) {
	        "string" != typeof b && (c = c || b, b = void 0);for (f in a) {
	          this.on(f, b, c, a[f], e);
	        }return this;
	      }if (null == c && null == d ? (d = b, c = b = void 0) : null == d && ("string" == typeof b ? (d = c, c = void 0) : (d = c, c = b, b = void 0)), d === !1) d = ba;else if (!d) return this;return 1 === e && (g = d, d = function d(a) {
	        return m().off(a), g.apply(this, arguments);
	      }, d.guid = g.guid || (g.guid = m.guid++)), this.each(function () {
	        m.event.add(this, a, d, c, b);
	      });
	    }, one: function one(a, b, c, d) {
	      return this.on(a, b, c, d, 1);
	    }, off: function off(a, b, c) {
	      var d, e;if (a && a.preventDefault && a.handleObj) return d = a.handleObj, m(a.delegateTarget).off(d.namespace ? d.origType + "." + d.namespace : d.origType, d.selector, d.handler), this;if ("object" == (typeof a === "undefined" ? "undefined" : _typeof(a))) {
	        for (e in a) {
	          this.off(e, b, a[e]);
	        }return this;
	      }return (b === !1 || "function" == typeof b) && (c = b, b = void 0), c === !1 && (c = ba), this.each(function () {
	        m.event.remove(this, a, c, b);
	      });
	    }, trigger: function trigger(a, b) {
	      return this.each(function () {
	        m.event.trigger(a, b, this);
	      });
	    }, triggerHandler: function triggerHandler(a, b) {
	      var c = this[0];return c ? m.event.trigger(a, b, c, !0) : void 0;
	    } });function da(a) {
	    var b = ea.split("|"),
	        c = a.createDocumentFragment();if (c.createElement) while (b.length) {
	      c.createElement(b.pop());
	    }return c;
	  }var ea = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	      fa = / jQuery\d+="(?:null|\d+)"/g,
	      ga = new RegExp("<(?:" + ea + ")[\\s/>]", "i"),
	      ha = /^\s+/,
	      ia = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	      ja = /<([\w:]+)/,
	      ka = /<tbody/i,
	      la = /<|&#?\w+;/,
	      ma = /<(?:script|style|link)/i,
	      na = /checked\s*(?:[^=]|=\s*.checked.)/i,
	      oa = /^$|\/(?:java|ecma)script/i,
	      pa = /^true\/(.*)/,
	      qa = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
	      ra = { option: [1, "<select multiple='multiple'>", "</select>"], legend: [1, "<fieldset>", "</fieldset>"], area: [1, "<map>", "</map>"], param: [1, "<object>", "</object>"], thead: [1, "<table>", "</table>"], tr: [2, "<table><tbody>", "</tbody></table>"], col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"], td: [3, "<table><tbody><tr>", "</tr></tbody></table>"], _default: k.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"] },
	      sa = da(y),
	      ta = sa.appendChild(y.createElement("div"));ra.optgroup = ra.option, ra.tbody = ra.tfoot = ra.colgroup = ra.caption = ra.thead, ra.th = ra.td;function ua(a, b) {
	    var c,
	        d,
	        e = 0,
	        f = _typeof(a.getElementsByTagName) !== K ? a.getElementsByTagName(b || "*") : _typeof(a.querySelectorAll) !== K ? a.querySelectorAll(b || "*") : void 0;if (!f) for (f = [], c = a.childNodes || a; null != (d = c[e]); e++) {
	      !b || m.nodeName(d, b) ? f.push(d) : m.merge(f, ua(d, b));
	    }return void 0 === b || b && m.nodeName(a, b) ? m.merge([a], f) : f;
	  }function va(a) {
	    W.test(a.type) && (a.defaultChecked = a.checked);
	  }function wa(a, b) {
	    return m.nodeName(a, "table") && m.nodeName(11 !== b.nodeType ? b : b.firstChild, "tr") ? a.getElementsByTagName("tbody")[0] || a.appendChild(a.ownerDocument.createElement("tbody")) : a;
	  }function xa(a) {
	    return a.type = (null !== m.find.attr(a, "type")) + "/" + a.type, a;
	  }function ya(a) {
	    var b = pa.exec(a.type);return b ? a.type = b[1] : a.removeAttribute("type"), a;
	  }function za(a, b) {
	    for (var c, d = 0; null != (c = a[d]); d++) {
	      m._data(c, "globalEval", !b || m._data(b[d], "globalEval"));
	    }
	  }function Aa(a, b) {
	    if (1 === b.nodeType && m.hasData(a)) {
	      var c,
	          d,
	          e,
	          f = m._data(a),
	          g = m._data(b, f),
	          h = f.events;if (h) {
	        delete g.handle, g.events = {};for (c in h) {
	          for (d = 0, e = h[c].length; e > d; d++) {
	            m.event.add(b, c, h[c][d]);
	          }
	        }
	      }g.data && (g.data = m.extend({}, g.data));
	    }
	  }function Ba(a, b) {
	    var c, d, e;if (1 === b.nodeType) {
	      if (c = b.nodeName.toLowerCase(), !k.noCloneEvent && b[m.expando]) {
	        e = m._data(b);for (d in e.events) {
	          m.removeEvent(b, d, e.handle);
	        }b.removeAttribute(m.expando);
	      }"script" === c && b.text !== a.text ? (xa(b).text = a.text, ya(b)) : "object" === c ? (b.parentNode && (b.outerHTML = a.outerHTML), k.html5Clone && a.innerHTML && !m.trim(b.innerHTML) && (b.innerHTML = a.innerHTML)) : "input" === c && W.test(a.type) ? (b.defaultChecked = b.checked = a.checked, b.value !== a.value && (b.value = a.value)) : "option" === c ? b.defaultSelected = b.selected = a.defaultSelected : ("input" === c || "textarea" === c) && (b.defaultValue = a.defaultValue);
	    }
	  }m.extend({ clone: function clone(a, b, c) {
	      var d,
	          e,
	          f,
	          g,
	          h,
	          i = m.contains(a.ownerDocument, a);if (k.html5Clone || m.isXMLDoc(a) || !ga.test("<" + a.nodeName + ">") ? f = a.cloneNode(!0) : (ta.innerHTML = a.outerHTML, ta.removeChild(f = ta.firstChild)), !(k.noCloneEvent && k.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || m.isXMLDoc(a))) for (d = ua(f), h = ua(a), g = 0; null != (e = h[g]); ++g) {
	        d[g] && Ba(e, d[g]);
	      }if (b) if (c) for (h = h || ua(a), d = d || ua(f), g = 0; null != (e = h[g]); g++) {
	        Aa(e, d[g]);
	      } else Aa(a, f);return d = ua(f, "script"), d.length > 0 && za(d, !i && ua(a, "script")), d = h = e = null, f;
	    }, buildFragment: function buildFragment(a, b, c, d) {
	      for (var e, f, g, h, i, j, l, n = a.length, o = da(b), p = [], q = 0; n > q; q++) {
	        if (f = a[q], f || 0 === f) if ("object" === m.type(f)) m.merge(p, f.nodeType ? [f] : f);else if (la.test(f)) {
	          h = h || o.appendChild(b.createElement("div")), i = (ja.exec(f) || ["", ""])[1].toLowerCase(), l = ra[i] || ra._default, h.innerHTML = l[1] + f.replace(ia, "<$1></$2>") + l[2], e = l[0];while (e--) {
	            h = h.lastChild;
	          }if (!k.leadingWhitespace && ha.test(f) && p.push(b.createTextNode(ha.exec(f)[0])), !k.tbody) {
	            f = "table" !== i || ka.test(f) ? "<table>" !== l[1] || ka.test(f) ? 0 : h : h.firstChild, e = f && f.childNodes.length;while (e--) {
	              m.nodeName(j = f.childNodes[e], "tbody") && !j.childNodes.length && f.removeChild(j);
	            }
	          }m.merge(p, h.childNodes), h.textContent = "";while (h.firstChild) {
	            h.removeChild(h.firstChild);
	          }h = o.lastChild;
	        } else p.push(b.createTextNode(f));
	      }h && o.removeChild(h), k.appendChecked || m.grep(ua(p, "input"), va), q = 0;while (f = p[q++]) {
	        if ((!d || -1 === m.inArray(f, d)) && (g = m.contains(f.ownerDocument, f), h = ua(o.appendChild(f), "script"), g && za(h), c)) {
	          e = 0;while (f = h[e++]) {
	            oa.test(f.type || "") && c.push(f);
	          }
	        }
	      }return h = null, o;
	    }, cleanData: function cleanData(a, b) {
	      for (var d, e, f, g, h = 0, i = m.expando, j = m.cache, l = k.deleteExpando, n = m.event.special; null != (d = a[h]); h++) {
	        if ((b || m.acceptData(d)) && (f = d[i], g = f && j[f])) {
	          if (g.events) for (e in g.events) {
	            n[e] ? m.event.remove(d, e) : m.removeEvent(d, e, g.handle);
	          }j[f] && (delete j[f], l ? delete d[i] : _typeof(d.removeAttribute) !== K ? d.removeAttribute(i) : d[i] = null, c.push(f));
	        }
	      }
	    } }), m.fn.extend({ text: function text(a) {
	      return V(this, function (a) {
	        return void 0 === a ? m.text(this) : this.empty().append((this[0] && this[0].ownerDocument || y).createTextNode(a));
	      }, null, a, arguments.length);
	    }, append: function append() {
	      return this.domManip(arguments, function (a) {
	        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
	          var b = wa(this, a);b.appendChild(a);
	        }
	      });
	    }, prepend: function prepend() {
	      return this.domManip(arguments, function (a) {
	        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
	          var b = wa(this, a);b.insertBefore(a, b.firstChild);
	        }
	      });
	    }, before: function before() {
	      return this.domManip(arguments, function (a) {
	        this.parentNode && this.parentNode.insertBefore(a, this);
	      });
	    }, after: function after() {
	      return this.domManip(arguments, function (a) {
	        this.parentNode && this.parentNode.insertBefore(a, this.nextSibling);
	      });
	    }, remove: function remove(a, b) {
	      for (var c, d = a ? m.filter(a, this) : this, e = 0; null != (c = d[e]); e++) {
	        b || 1 !== c.nodeType || m.cleanData(ua(c)), c.parentNode && (b && m.contains(c.ownerDocument, c) && za(ua(c, "script")), c.parentNode.removeChild(c));
	      }return this;
	    }, empty: function empty() {
	      for (var a, b = 0; null != (a = this[b]); b++) {
	        1 === a.nodeType && m.cleanData(ua(a, !1));while (a.firstChild) {
	          a.removeChild(a.firstChild);
	        }a.options && m.nodeName(a, "select") && (a.options.length = 0);
	      }return this;
	    }, clone: function clone(a, b) {
	      return a = null == a ? !1 : a, b = null == b ? a : b, this.map(function () {
	        return m.clone(this, a, b);
	      });
	    }, html: function html(a) {
	      return V(this, function (a) {
	        var b = this[0] || {},
	            c = 0,
	            d = this.length;if (void 0 === a) return 1 === b.nodeType ? b.innerHTML.replace(fa, "") : void 0;if (!("string" != typeof a || ma.test(a) || !k.htmlSerialize && ga.test(a) || !k.leadingWhitespace && ha.test(a) || ra[(ja.exec(a) || ["", ""])[1].toLowerCase()])) {
	          a = a.replace(ia, "<$1></$2>");try {
	            for (; d > c; c++) {
	              b = this[c] || {}, 1 === b.nodeType && (m.cleanData(ua(b, !1)), b.innerHTML = a);
	            }b = 0;
	          } catch (e) {}
	        }b && this.empty().append(a);
	      }, null, a, arguments.length);
	    }, replaceWith: function replaceWith() {
	      var a = arguments[0];return this.domManip(arguments, function (b) {
	        a = this.parentNode, m.cleanData(ua(this)), a && a.replaceChild(b, this);
	      }), a && (a.length || a.nodeType) ? this : this.remove();
	    }, detach: function detach(a) {
	      return this.remove(a, !0);
	    }, domManip: function domManip(a, b) {
	      a = e.apply([], a);var c,
	          d,
	          f,
	          g,
	          h,
	          i,
	          j = 0,
	          l = this.length,
	          n = this,
	          o = l - 1,
	          p = a[0],
	          q = m.isFunction(p);if (q || l > 1 && "string" == typeof p && !k.checkClone && na.test(p)) return this.each(function (c) {
	        var d = n.eq(c);q && (a[0] = p.call(this, c, d.html())), d.domManip(a, b);
	      });if (l && (i = m.buildFragment(a, this[0].ownerDocument, !1, this), c = i.firstChild, 1 === i.childNodes.length && (i = c), c)) {
	        for (g = m.map(ua(i, "script"), xa), f = g.length; l > j; j++) {
	          d = i, j !== o && (d = m.clone(d, !0, !0), f && m.merge(g, ua(d, "script"))), b.call(this[j], d, j);
	        }if (f) for (h = g[g.length - 1].ownerDocument, m.map(g, ya), j = 0; f > j; j++) {
	          d = g[j], oa.test(d.type || "") && !m._data(d, "globalEval") && m.contains(h, d) && (d.src ? m._evalUrl && m._evalUrl(d.src) : m.globalEval((d.text || d.textContent || d.innerHTML || "").replace(qa, "")));
	        }i = c = null;
	      }return this;
	    } }), m.each({ appendTo: "append", prependTo: "prepend", insertBefore: "before", insertAfter: "after", replaceAll: "replaceWith" }, function (a, b) {
	    m.fn[a] = function (a) {
	      for (var c, d = 0, e = [], g = m(a), h = g.length - 1; h >= d; d++) {
	        c = d === h ? this : this.clone(!0), m(g[d])[b](c), f.apply(e, c.get());
	      }return this.pushStack(e);
	    };
	  });var Ca,
	      Da = {};function Ea(b, c) {
	    var d,
	        e = m(c.createElement(b)).appendTo(c.body),
	        f = a.getDefaultComputedStyle && (d = a.getDefaultComputedStyle(e[0])) ? d.display : m.css(e[0], "display");return e.detach(), f;
	  }function Fa(a) {
	    var b = y,
	        c = Da[a];return c || (c = Ea(a, b), "none" !== c && c || (Ca = (Ca || m("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement), b = (Ca[0].contentWindow || Ca[0].contentDocument).document, b.write(), b.close(), c = Ea(a, b), Ca.detach()), Da[a] = c), c;
	  }!function () {
	    var a;k.shrinkWrapBlocks = function () {
	      if (null != a) return a;a = !1;var b, c, d;return c = y.getElementsByTagName("body")[0], c && c.style ? (b = y.createElement("div"), d = y.createElement("div"), d.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", c.appendChild(d).appendChild(b), _typeof(b.style.zoom) !== K && (b.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1", b.appendChild(y.createElement("div")).style.width = "5px", a = 3 !== b.offsetWidth), c.removeChild(d), a) : void 0;
	    };
	  }();var Ga = /^margin/,
	      Ha = new RegExp("^(" + S + ")(?!px)[a-z%]+$", "i"),
	      Ia,
	      Ja,
	      Ka = /^(top|right|bottom|left)$/;a.getComputedStyle ? (Ia = function Ia(b) {
	    return b.ownerDocument.defaultView.opener ? b.ownerDocument.defaultView.getComputedStyle(b, null) : a.getComputedStyle(b, null);
	  }, Ja = function Ja(a, b, c) {
	    var d,
	        e,
	        f,
	        g,
	        h = a.style;return c = c || Ia(a), g = c ? c.getPropertyValue(b) || c[b] : void 0, c && ("" !== g || m.contains(a.ownerDocument, a) || (g = m.style(a, b)), Ha.test(g) && Ga.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f)), void 0 === g ? g : g + "";
	  }) : y.documentElement.currentStyle && (Ia = function Ia(a) {
	    return a.currentStyle;
	  }, Ja = function Ja(a, b, c) {
	    var d,
	        e,
	        f,
	        g,
	        h = a.style;return c = c || Ia(a), g = c ? c[b] : void 0, null == g && h && h[b] && (g = h[b]), Ha.test(g) && !Ka.test(b) && (d = h.left, e = a.runtimeStyle, f = e && e.left, f && (e.left = a.currentStyle.left), h.left = "fontSize" === b ? "1em" : g, g = h.pixelLeft + "px", h.left = d, f && (e.left = f)), void 0 === g ? g : g + "" || "auto";
	  });function La(a, b) {
	    return { get: function get() {
	        var c = a();if (null != c) return c ? void delete this.get : (this.get = b).apply(this, arguments);
	      } };
	  }!function () {
	    var b, c, d, e, f, g, h;if (b = y.createElement("div"), b.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", d = b.getElementsByTagName("a")[0], c = d && d.style) {
	      (function () {
	        var i = function i() {
	          var b, c, d, i;c = y.getElementsByTagName("body")[0], c && c.style && (b = y.createElement("div"), d = y.createElement("div"), d.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", c.appendChild(d).appendChild(b), b.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute", e = f = !1, h = !0, a.getComputedStyle && (e = "1%" !== (a.getComputedStyle(b, null) || {}).top, f = "4px" === (a.getComputedStyle(b, null) || { width: "4px" }).width, i = b.appendChild(y.createElement("div")), i.style.cssText = b.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0", i.style.marginRight = i.style.width = "0", b.style.width = "1px", h = !parseFloat((a.getComputedStyle(i, null) || {}).marginRight), b.removeChild(i)), b.innerHTML = "<table><tr><td></td><td>t</td></tr></table>", i = b.getElementsByTagName("td"), i[0].style.cssText = "margin:0;border:0;padding:0;display:none", g = 0 === i[0].offsetHeight, g && (i[0].style.display = "", i[1].style.display = "none", g = 0 === i[0].offsetHeight), c.removeChild(d));
	        };
	
	        c.cssText = "float:left;opacity:.5", k.opacity = "0.5" === c.opacity, k.cssFloat = !!c.cssFloat, b.style.backgroundClip = "content-box", b.cloneNode(!0).style.backgroundClip = "", k.clearCloneStyle = "content-box" === b.style.backgroundClip, k.boxSizing = "" === c.boxSizing || "" === c.MozBoxSizing || "" === c.WebkitBoxSizing, m.extend(k, { reliableHiddenOffsets: function reliableHiddenOffsets() {
	            return null == g && i(), g;
	          }, boxSizingReliable: function boxSizingReliable() {
	            return null == f && i(), f;
	          }, pixelPosition: function pixelPosition() {
	            return null == e && i(), e;
	          }, reliableMarginRight: function reliableMarginRight() {
	            return null == h && i(), h;
	          } });
	      })();
	    }
	  }(), m.swap = function (a, b, c, d) {
	    var e,
	        f,
	        g = {};for (f in b) {
	      g[f] = a.style[f], a.style[f] = b[f];
	    }e = c.apply(a, d || []);for (f in b) {
	      a.style[f] = g[f];
	    }return e;
	  };var Ma = /alpha\([^)]*\)/i,
	      Na = /opacity\s*=\s*([^)]*)/,
	      Oa = /^(none|table(?!-c[ea]).+)/,
	      Pa = new RegExp("^(" + S + ")(.*)$", "i"),
	      Qa = new RegExp("^([+-])=(" + S + ")", "i"),
	      Ra = { position: "absolute", visibility: "hidden", display: "block" },
	      Sa = { letterSpacing: "0", fontWeight: "400" },
	      Ta = ["Webkit", "O", "Moz", "ms"];function Ua(a, b) {
	    if (b in a) return b;var c = b.charAt(0).toUpperCase() + b.slice(1),
	        d = b,
	        e = Ta.length;while (e--) {
	      if (b = Ta[e] + c, b in a) return b;
	    }return d;
	  }function Va(a, b) {
	    for (var c, d, e, f = [], g = 0, h = a.length; h > g; g++) {
	      d = a[g], d.style && (f[g] = m._data(d, "olddisplay"), c = d.style.display, b ? (f[g] || "none" !== c || (d.style.display = ""), "" === d.style.display && U(d) && (f[g] = m._data(d, "olddisplay", Fa(d.nodeName)))) : (e = U(d), (c && "none" !== c || !e) && m._data(d, "olddisplay", e ? c : m.css(d, "display"))));
	    }for (g = 0; h > g; g++) {
	      d = a[g], d.style && (b && "none" !== d.style.display && "" !== d.style.display || (d.style.display = b ? f[g] || "" : "none"));
	    }return a;
	  }function Wa(a, b, c) {
	    var d = Pa.exec(b);return d ? Math.max(0, d[1] - (c || 0)) + (d[2] || "px") : b;
	  }function Xa(a, b, c, d, e) {
	    for (var f = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0, g = 0; 4 > f; f += 2) {
	      "margin" === c && (g += m.css(a, c + T[f], !0, e)), d ? ("content" === c && (g -= m.css(a, "padding" + T[f], !0, e)), "margin" !== c && (g -= m.css(a, "border" + T[f] + "Width", !0, e))) : (g += m.css(a, "padding" + T[f], !0, e), "padding" !== c && (g += m.css(a, "border" + T[f] + "Width", !0, e)));
	    }return g;
	  }function Ya(a, b, c) {
	    var d = !0,
	        e = "width" === b ? a.offsetWidth : a.offsetHeight,
	        f = Ia(a),
	        g = k.boxSizing && "border-box" === m.css(a, "boxSizing", !1, f);if (0 >= e || null == e) {
	      if (e = Ja(a, b, f), (0 > e || null == e) && (e = a.style[b]), Ha.test(e)) return e;d = g && (k.boxSizingReliable() || e === a.style[b]), e = parseFloat(e) || 0;
	    }return e + Xa(a, b, c || (g ? "border" : "content"), d, f) + "px";
	  }m.extend({ cssHooks: { opacity: { get: function get(a, b) {
	          if (b) {
	            var c = Ja(a, "opacity");return "" === c ? "1" : c;
	          }
	        } } }, cssNumber: { columnCount: !0, fillOpacity: !0, flexGrow: !0, flexShrink: !0, fontWeight: !0, lineHeight: !0, opacity: !0, order: !0, orphans: !0, widows: !0, zIndex: !0, zoom: !0 }, cssProps: { "float": k.cssFloat ? "cssFloat" : "styleFloat" }, style: function style(a, b, c, d) {
	      if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {
	        var e,
	            f,
	            g,
	            h = m.camelCase(b),
	            i = a.style;if (b = m.cssProps[h] || (m.cssProps[h] = Ua(i, h)), g = m.cssHooks[b] || m.cssHooks[h], void 0 === c) return g && "get" in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b];if (f = typeof c === "undefined" ? "undefined" : _typeof(c), "string" === f && (e = Qa.exec(c)) && (c = (e[1] + 1) * e[2] + parseFloat(m.css(a, b)), f = "number"), null != c && c === c && ("number" !== f || m.cssNumber[h] || (c += "px"), k.clearCloneStyle || "" !== c || 0 !== b.indexOf("background") || (i[b] = "inherit"), !(g && "set" in g && void 0 === (c = g.set(a, c, d))))) try {
	          i[b] = c;
	        } catch (j) {}
	      }
	    }, css: function css(a, b, c, d) {
	      var e,
	          f,
	          g,
	          h = m.camelCase(b);return b = m.cssProps[h] || (m.cssProps[h] = Ua(a.style, h)), g = m.cssHooks[b] || m.cssHooks[h], g && "get" in g && (f = g.get(a, !0, c)), void 0 === f && (f = Ja(a, b, d)), "normal" === f && b in Sa && (f = Sa[b]), "" === c || c ? (e = parseFloat(f), c === !0 || m.isNumeric(e) ? e || 0 : f) : f;
	    } }), m.each(["height", "width"], function (a, b) {
	    m.cssHooks[b] = { get: function get(a, c, d) {
	        return c ? Oa.test(m.css(a, "display")) && 0 === a.offsetWidth ? m.swap(a, Ra, function () {
	          return Ya(a, b, d);
	        }) : Ya(a, b, d) : void 0;
	      }, set: function set(a, c, d) {
	        var e = d && Ia(a);return Wa(a, c, d ? Xa(a, b, d, k.boxSizing && "border-box" === m.css(a, "boxSizing", !1, e), e) : 0);
	      } };
	  }), k.opacity || (m.cssHooks.opacity = { get: function get(a, b) {
	      return Na.test((b && a.currentStyle ? a.currentStyle.filter : a.style.filter) || "") ? .01 * parseFloat(RegExp.$1) + "" : b ? "1" : "";
	    }, set: function set(a, b) {
	      var c = a.style,
	          d = a.currentStyle,
	          e = m.isNumeric(b) ? "alpha(opacity=" + 100 * b + ")" : "",
	          f = d && d.filter || c.filter || "";c.zoom = 1, (b >= 1 || "" === b) && "" === m.trim(f.replace(Ma, "")) && c.removeAttribute && (c.removeAttribute("filter"), "" === b || d && !d.filter) || (c.filter = Ma.test(f) ? f.replace(Ma, e) : f + " " + e);
	    } }), m.cssHooks.marginRight = La(k.reliableMarginRight, function (a, b) {
	    return b ? m.swap(a, { display: "inline-block" }, Ja, [a, "marginRight"]) : void 0;
	  }), m.each({ margin: "", padding: "", border: "Width" }, function (a, b) {
	    m.cssHooks[a + b] = { expand: function expand(c) {
	        for (var d = 0, e = {}, f = "string" == typeof c ? c.split(" ") : [c]; 4 > d; d++) {
	          e[a + T[d] + b] = f[d] || f[d - 2] || f[0];
	        }return e;
	      } }, Ga.test(a) || (m.cssHooks[a + b].set = Wa);
	  }), m.fn.extend({ css: function css(a, b) {
	      return V(this, function (a, b, c) {
	        var d,
	            e,
	            f = {},
	            g = 0;if (m.isArray(b)) {
	          for (d = Ia(a), e = b.length; e > g; g++) {
	            f[b[g]] = m.css(a, b[g], !1, d);
	          }return f;
	        }return void 0 !== c ? m.style(a, b, c) : m.css(a, b);
	      }, a, b, arguments.length > 1);
	    }, show: function show() {
	      return Va(this, !0);
	    }, hide: function hide() {
	      return Va(this);
	    }, toggle: function toggle(a) {
	      return "boolean" == typeof a ? a ? this.show() : this.hide() : this.each(function () {
	        U(this) ? m(this).show() : m(this).hide();
	      });
	    } });function Za(a, b, c, d, e) {
	    return new Za.prototype.init(a, b, c, d, e);
	  }m.Tween = Za, Za.prototype = { constructor: Za, init: function init(a, b, c, d, e, f) {
	      this.elem = a, this.prop = c, this.easing = e || "swing", this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (m.cssNumber[c] ? "" : "px");
	    }, cur: function cur() {
	      var a = Za.propHooks[this.prop];return a && a.get ? a.get(this) : Za.propHooks._default.get(this);
	    }, run: function run(a) {
	      var b,
	          c = Za.propHooks[this.prop];return this.options.duration ? this.pos = b = m.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : this.pos = b = a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : Za.propHooks._default.set(this), this;
	    } }, Za.prototype.init.prototype = Za.prototype, Za.propHooks = { _default: { get: function get(a) {
	        var b;return null == a.elem[a.prop] || a.elem.style && null != a.elem.style[a.prop] ? (b = m.css(a.elem, a.prop, ""), b && "auto" !== b ? b : 0) : a.elem[a.prop];
	      }, set: function set(a) {
	        m.fx.step[a.prop] ? m.fx.step[a.prop](a) : a.elem.style && (null != a.elem.style[m.cssProps[a.prop]] || m.cssHooks[a.prop]) ? m.style(a.elem, a.prop, a.now + a.unit) : a.elem[a.prop] = a.now;
	      } } }, Za.propHooks.scrollTop = Za.propHooks.scrollLeft = { set: function set(a) {
	      a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now);
	    } }, m.easing = { linear: function linear(a) {
	      return a;
	    }, swing: function swing(a) {
	      return .5 - Math.cos(a * Math.PI) / 2;
	    } }, m.fx = Za.prototype.init, m.fx.step = {};var $a,
	      _a,
	      ab = /^(?:toggle|show|hide)$/,
	      bb = new RegExp("^(?:([+-])=|)(" + S + ")([a-z%]*)$", "i"),
	      cb = /queueHooks$/,
	      db = [ib],
	      eb = { "*": [function (a, b) {
	      var c = this.createTween(a, b),
	          d = c.cur(),
	          e = bb.exec(b),
	          f = e && e[3] || (m.cssNumber[a] ? "" : "px"),
	          g = (m.cssNumber[a] || "px" !== f && +d) && bb.exec(m.css(c.elem, a)),
	          h = 1,
	          i = 20;if (g && g[3] !== f) {
	        f = f || g[3], e = e || [], g = +d || 1;do {
	          h = h || ".5", g /= h, m.style(c.elem, a, g + f);
	        } while (h !== (h = c.cur() / d) && 1 !== h && --i);
	      }return e && (g = c.start = +g || +d || 0, c.unit = f, c.end = e[1] ? g + (e[1] + 1) * e[2] : +e[2]), c;
	    }] };function fb() {
	    return setTimeout(function () {
	      $a = void 0;
	    }), $a = m.now();
	  }function gb(a, b) {
	    var c,
	        d = { height: a },
	        e = 0;for (b = b ? 1 : 0; 4 > e; e += 2 - b) {
	      c = T[e], d["margin" + c] = d["padding" + c] = a;
	    }return b && (d.opacity = d.width = a), d;
	  }function hb(a, b, c) {
	    for (var d, e = (eb[b] || []).concat(eb["*"]), f = 0, g = e.length; g > f; f++) {
	      if (d = e[f].call(c, b, a)) return d;
	    }
	  }function ib(a, b, c) {
	    var d,
	        e,
	        f,
	        g,
	        h,
	        i,
	        j,
	        l,
	        n = this,
	        o = {},
	        p = a.style,
	        q = a.nodeType && U(a),
	        r = m._data(a, "fxshow");c.queue || (h = m._queueHooks(a, "fx"), null == h.unqueued && (h.unqueued = 0, i = h.empty.fire, h.empty.fire = function () {
	      h.unqueued || i();
	    }), h.unqueued++, n.always(function () {
	      n.always(function () {
	        h.unqueued--, m.queue(a, "fx").length || h.empty.fire();
	      });
	    })), 1 === a.nodeType && ("height" in b || "width" in b) && (c.overflow = [p.overflow, p.overflowX, p.overflowY], j = m.css(a, "display"), l = "none" === j ? m._data(a, "olddisplay") || Fa(a.nodeName) : j, "inline" === l && "none" === m.css(a, "float") && (k.inlineBlockNeedsLayout && "inline" !== Fa(a.nodeName) ? p.zoom = 1 : p.display = "inline-block")), c.overflow && (p.overflow = "hidden", k.shrinkWrapBlocks() || n.always(function () {
	      p.overflow = c.overflow[0], p.overflowX = c.overflow[1], p.overflowY = c.overflow[2];
	    }));for (d in b) {
	      if (e = b[d], ab.exec(e)) {
	        if (delete b[d], f = f || "toggle" === e, e === (q ? "hide" : "show")) {
	          if ("show" !== e || !r || void 0 === r[d]) continue;q = !0;
	        }o[d] = r && r[d] || m.style(a, d);
	      } else j = void 0;
	    }if (m.isEmptyObject(o)) "inline" === ("none" === j ? Fa(a.nodeName) : j) && (p.display = j);else {
	      r ? "hidden" in r && (q = r.hidden) : r = m._data(a, "fxshow", {}), f && (r.hidden = !q), q ? m(a).show() : n.done(function () {
	        m(a).hide();
	      }), n.done(function () {
	        var b;m._removeData(a, "fxshow");for (b in o) {
	          m.style(a, b, o[b]);
	        }
	      });for (d in o) {
	        g = hb(q ? r[d] : 0, d, n), d in r || (r[d] = g.start, q && (g.end = g.start, g.start = "width" === d || "height" === d ? 1 : 0));
	      }
	    }
	  }function jb(a, b) {
	    var c, d, e, f, g;for (c in a) {
	      if (d = m.camelCase(c), e = b[d], f = a[c], m.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = m.cssHooks[d], g && "expand" in g) {
	        f = g.expand(f), delete a[d];for (c in f) {
	          c in a || (a[c] = f[c], b[c] = e);
	        }
	      } else b[d] = e;
	    }
	  }function kb(a, b, c) {
	    var d,
	        e,
	        f = 0,
	        g = db.length,
	        h = m.Deferred().always(function () {
	      delete i.elem;
	    }),
	        i = function i() {
	      if (e) return !1;for (var b = $a || fb(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; i > g; g++) {
	        j.tweens[g].run(f);
	      }return h.notifyWith(a, [j, f, c]), 1 > f && i ? c : (h.resolveWith(a, [j]), !1);
	    },
	        j = h.promise({ elem: a, props: m.extend({}, b), opts: m.extend(!0, { specialEasing: {} }, c), originalProperties: b, originalOptions: c, startTime: $a || fb(), duration: c.duration, tweens: [], createTween: function createTween(b, c) {
	        var d = m.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);return j.tweens.push(d), d;
	      }, stop: function stop(b) {
	        var c = 0,
	            d = b ? j.tweens.length : 0;if (e) return this;for (e = !0; d > c; c++) {
	          j.tweens[c].run(1);
	        }return b ? h.resolveWith(a, [j, b]) : h.rejectWith(a, [j, b]), this;
	      } }),
	        k = j.props;for (jb(k, j.opts.specialEasing); g > f; f++) {
	      if (d = db[f].call(j, a, k, j.opts)) return d;
	    }return m.map(k, hb, j), m.isFunction(j.opts.start) && j.opts.start.call(a, j), m.fx.timer(m.extend(i, { elem: a, anim: j, queue: j.opts.queue })), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always);
	  }m.Animation = m.extend(kb, { tweener: function tweener(a, b) {
	      m.isFunction(a) ? (b = a, a = ["*"]) : a = a.split(" ");for (var c, d = 0, e = a.length; e > d; d++) {
	        c = a[d], eb[c] = eb[c] || [], eb[c].unshift(b);
	      }
	    }, prefilter: function prefilter(a, b) {
	      b ? db.unshift(a) : db.push(a);
	    } }), m.speed = function (a, b, c) {
	    var d = a && "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) ? m.extend({}, a) : { complete: c || !c && b || m.isFunction(a) && a, duration: a, easing: c && b || b && !m.isFunction(b) && b };return d.duration = m.fx.off ? 0 : "number" == typeof d.duration ? d.duration : d.duration in m.fx.speeds ? m.fx.speeds[d.duration] : m.fx.speeds._default, (null == d.queue || d.queue === !0) && (d.queue = "fx"), d.old = d.complete, d.complete = function () {
	      m.isFunction(d.old) && d.old.call(this), d.queue && m.dequeue(this, d.queue);
	    }, d;
	  }, m.fn.extend({ fadeTo: function fadeTo(a, b, c, d) {
	      return this.filter(U).css("opacity", 0).show().end().animate({ opacity: b }, a, c, d);
	    }, animate: function animate(a, b, c, d) {
	      var e = m.isEmptyObject(a),
	          f = m.speed(b, c, d),
	          g = function g() {
	        var b = kb(this, m.extend({}, a), f);(e || m._data(this, "finish")) && b.stop(!0);
	      };return g.finish = g, e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g);
	    }, stop: function stop(a, b, c) {
	      var d = function d(a) {
	        var b = a.stop;delete a.stop, b(c);
	      };return "string" != typeof a && (c = b, b = a, a = void 0), b && a !== !1 && this.queue(a || "fx", []), this.each(function () {
	        var b = !0,
	            e = null != a && a + "queueHooks",
	            f = m.timers,
	            g = m._data(this);if (e) g[e] && g[e].stop && d(g[e]);else for (e in g) {
	          g[e] && g[e].stop && cb.test(e) && d(g[e]);
	        }for (e = f.length; e--;) {
	          f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), b = !1, f.splice(e, 1));
	        }(b || !c) && m.dequeue(this, a);
	      });
	    }, finish: function finish(a) {
	      return a !== !1 && (a = a || "fx"), this.each(function () {
	        var b,
	            c = m._data(this),
	            d = c[a + "queue"],
	            e = c[a + "queueHooks"],
	            f = m.timers,
	            g = d ? d.length : 0;for (c.finish = !0, m.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--;) {
	          f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1));
	        }for (b = 0; g > b; b++) {
	          d[b] && d[b].finish && d[b].finish.call(this);
	        }delete c.finish;
	      });
	    } }), m.each(["toggle", "show", "hide"], function (a, b) {
	    var c = m.fn[b];m.fn[b] = function (a, d, e) {
	      return null == a || "boolean" == typeof a ? c.apply(this, arguments) : this.animate(gb(b, !0), a, d, e);
	    };
	  }), m.each({ slideDown: gb("show"), slideUp: gb("hide"), slideToggle: gb("toggle"), fadeIn: { opacity: "show" }, fadeOut: { opacity: "hide" }, fadeToggle: { opacity: "toggle" } }, function (a, b) {
	    m.fn[a] = function (a, c, d) {
	      return this.animate(b, a, c, d);
	    };
	  }), m.timers = [], m.fx.tick = function () {
	    var a,
	        b = m.timers,
	        c = 0;for ($a = m.now(); c < b.length; c++) {
	      a = b[c], a() || b[c] !== a || b.splice(c--, 1);
	    }b.length || m.fx.stop(), $a = void 0;
	  }, m.fx.timer = function (a) {
	    m.timers.push(a), a() ? m.fx.start() : m.timers.pop();
	  }, m.fx.interval = 13, m.fx.start = function () {
	    _a || (_a = setInterval(m.fx.tick, m.fx.interval));
	  }, m.fx.stop = function () {
	    clearInterval(_a), _a = null;
	  }, m.fx.speeds = { slow: 600, fast: 200, _default: 400 }, m.fn.delay = function (a, b) {
	    return a = m.fx ? m.fx.speeds[a] || a : a, b = b || "fx", this.queue(b, function (b, c) {
	      var d = setTimeout(b, a);c.stop = function () {
	        clearTimeout(d);
	      };
	    });
	  }, function () {
	    var a, b, c, d, e;b = y.createElement("div"), b.setAttribute("className", "t"), b.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", d = b.getElementsByTagName("a")[0], c = y.createElement("select"), e = c.appendChild(y.createElement("option")), a = b.getElementsByTagName("input")[0], d.style.cssText = "top:1px", k.getSetAttribute = "t" !== b.className, k.style = /top/.test(d.getAttribute("style")), k.hrefNormalized = "/a" === d.getAttribute("href"), k.checkOn = !!a.value, k.optSelected = e.selected, k.enctype = !!y.createElement("form").enctype, c.disabled = !0, k.optDisabled = !e.disabled, a = y.createElement("input"), a.setAttribute("value", ""), k.input = "" === a.getAttribute("value"), a.value = "t", a.setAttribute("type", "radio"), k.radioValue = "t" === a.value;
	  }();var lb = /\r/g;m.fn.extend({ val: function val(a) {
	      var b,
	          c,
	          d,
	          e = this[0];{
	        if (arguments.length) return d = m.isFunction(a), this.each(function (c) {
	          var e;1 === this.nodeType && (e = d ? a.call(this, c, m(this).val()) : a, null == e ? e = "" : "number" == typeof e ? e += "" : m.isArray(e) && (e = m.map(e, function (a) {
	            return null == a ? "" : a + "";
	          })), b = m.valHooks[this.type] || m.valHooks[this.nodeName.toLowerCase()], b && "set" in b && void 0 !== b.set(this, e, "value") || (this.value = e));
	        });if (e) return b = m.valHooks[e.type] || m.valHooks[e.nodeName.toLowerCase()], b && "get" in b && void 0 !== (c = b.get(e, "value")) ? c : (c = e.value, "string" == typeof c ? c.replace(lb, "") : null == c ? "" : c);
	      }
	    } }), m.extend({ valHooks: { option: { get: function get(a) {
	          var b = m.find.attr(a, "value");return null != b ? b : m.trim(m.text(a));
	        } }, select: { get: function get(a) {
	          for (var b, c, d = a.options, e = a.selectedIndex, f = "select-one" === a.type || 0 > e, g = f ? null : [], h = f ? e + 1 : d.length, i = 0 > e ? h : f ? e : 0; h > i; i++) {
	            if (c = d[i], !(!c.selected && i !== e || (k.optDisabled ? c.disabled : null !== c.getAttribute("disabled")) || c.parentNode.disabled && m.nodeName(c.parentNode, "optgroup"))) {
	              if (b = m(c).val(), f) return b;g.push(b);
	            }
	          }return g;
	        }, set: function set(a, b) {
	          var c,
	              d,
	              e = a.options,
	              f = m.makeArray(b),
	              g = e.length;while (g--) {
	            if (d = e[g], m.inArray(m.valHooks.option.get(d), f) >= 0) try {
	              d.selected = c = !0;
	            } catch (h) {
	              d.scrollHeight;
	            } else d.selected = !1;
	          }return c || (a.selectedIndex = -1), e;
	        } } } }), m.each(["radio", "checkbox"], function () {
	    m.valHooks[this] = { set: function set(a, b) {
	        return m.isArray(b) ? a.checked = m.inArray(m(a).val(), b) >= 0 : void 0;
	      } }, k.checkOn || (m.valHooks[this].get = function (a) {
	      return null === a.getAttribute("value") ? "on" : a.value;
	    });
	  });var mb,
	      nb,
	      ob = m.expr.attrHandle,
	      pb = /^(?:checked|selected)$/i,
	      qb = k.getSetAttribute,
	      rb = k.input;m.fn.extend({ attr: function attr(a, b) {
	      return V(this, m.attr, a, b, arguments.length > 1);
	    }, removeAttr: function removeAttr(a) {
	      return this.each(function () {
	        m.removeAttr(this, a);
	      });
	    } }), m.extend({ attr: function attr(a, b, c) {
	      var d,
	          e,
	          f = a.nodeType;if (a && 3 !== f && 8 !== f && 2 !== f) return _typeof(a.getAttribute) === K ? m.prop(a, b, c) : (1 === f && m.isXMLDoc(a) || (b = b.toLowerCase(), d = m.attrHooks[b] || (m.expr.match.bool.test(b) ? nb : mb)), void 0 === c ? d && "get" in d && null !== (e = d.get(a, b)) ? e : (e = m.find.attr(a, b), null == e ? void 0 : e) : null !== c ? d && "set" in d && void 0 !== (e = d.set(a, c, b)) ? e : (a.setAttribute(b, c + ""), c) : void m.removeAttr(a, b));
	    }, removeAttr: function removeAttr(a, b) {
	      var c,
	          d,
	          e = 0,
	          f = b && b.match(E);if (f && 1 === a.nodeType) while (c = f[e++]) {
	        d = m.propFix[c] || c, m.expr.match.bool.test(c) ? rb && qb || !pb.test(c) ? a[d] = !1 : a[m.camelCase("default-" + c)] = a[d] = !1 : m.attr(a, c, ""), a.removeAttribute(qb ? c : d);
	      }
	    }, attrHooks: { type: { set: function set(a, b) {
	          if (!k.radioValue && "radio" === b && m.nodeName(a, "input")) {
	            var c = a.value;return a.setAttribute("type", b), c && (a.value = c), b;
	          }
	        } } } }), nb = { set: function set(a, b, c) {
	      return b === !1 ? m.removeAttr(a, c) : rb && qb || !pb.test(c) ? a.setAttribute(!qb && m.propFix[c] || c, c) : a[m.camelCase("default-" + c)] = a[c] = !0, c;
	    } }, m.each(m.expr.match.bool.source.match(/\w+/g), function (a, b) {
	    var c = ob[b] || m.find.attr;ob[b] = rb && qb || !pb.test(b) ? function (a, b, d) {
	      var e, f;return d || (f = ob[b], ob[b] = e, e = null != c(a, b, d) ? b.toLowerCase() : null, ob[b] = f), e;
	    } : function (a, b, c) {
	      return c ? void 0 : a[m.camelCase("default-" + b)] ? b.toLowerCase() : null;
	    };
	  }), rb && qb || (m.attrHooks.value = { set: function set(a, b, c) {
	      return m.nodeName(a, "input") ? void (a.defaultValue = b) : mb && mb.set(a, b, c);
	    } }), qb || (mb = { set: function set(a, b, c) {
	      var d = a.getAttributeNode(c);return d || a.setAttributeNode(d = a.ownerDocument.createAttribute(c)), d.value = b += "", "value" === c || b === a.getAttribute(c) ? b : void 0;
	    } }, ob.id = ob.name = ob.coords = function (a, b, c) {
	    var d;return c ? void 0 : (d = a.getAttributeNode(b)) && "" !== d.value ? d.value : null;
	  }, m.valHooks.button = { get: function get(a, b) {
	      var c = a.getAttributeNode(b);return c && c.specified ? c.value : void 0;
	    }, set: mb.set }, m.attrHooks.contenteditable = { set: function set(a, b, c) {
	      mb.set(a, "" === b ? !1 : b, c);
	    } }, m.each(["width", "height"], function (a, b) {
	    m.attrHooks[b] = { set: function set(a, c) {
	        return "" === c ? (a.setAttribute(b, "auto"), c) : void 0;
	      } };
	  })), k.style || (m.attrHooks.style = { get: function get(a) {
	      return a.style.cssText || void 0;
	    }, set: function set(a, b) {
	      return a.style.cssText = b + "";
	    } });var sb = /^(?:input|select|textarea|button|object)$/i,
	      tb = /^(?:a|area)$/i;m.fn.extend({ prop: function prop(a, b) {
	      return V(this, m.prop, a, b, arguments.length > 1);
	    }, removeProp: function removeProp(a) {
	      return a = m.propFix[a] || a, this.each(function () {
	        try {
	          this[a] = void 0, delete this[a];
	        } catch (b) {}
	      });
	    } }), m.extend({ propFix: { "for": "htmlFor", "class": "className" }, prop: function prop(a, b, c) {
	      var d,
	          e,
	          f,
	          g = a.nodeType;if (a && 3 !== g && 8 !== g && 2 !== g) return f = 1 !== g || !m.isXMLDoc(a), f && (b = m.propFix[b] || b, e = m.propHooks[b]), void 0 !== c ? e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && "get" in e && null !== (d = e.get(a, b)) ? d : a[b];
	    }, propHooks: { tabIndex: { get: function get(a) {
	          var b = m.find.attr(a, "tabindex");return b ? parseInt(b, 10) : sb.test(a.nodeName) || tb.test(a.nodeName) && a.href ? 0 : -1;
	        } } } }), k.hrefNormalized || m.each(["href", "src"], function (a, b) {
	    m.propHooks[b] = { get: function get(a) {
	        return a.getAttribute(b, 4);
	      } };
	  }), k.optSelected || (m.propHooks.selected = { get: function get(a) {
	      var b = a.parentNode;return b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex), null;
	    } }), m.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
	    m.propFix[this.toLowerCase()] = this;
	  }), k.enctype || (m.propFix.enctype = "encoding");var ub = /[\t\r\n\f]/g;m.fn.extend({ addClass: function addClass(a) {
	      var b,
	          c,
	          d,
	          e,
	          f,
	          g,
	          h = 0,
	          i = this.length,
	          j = "string" == typeof a && a;if (m.isFunction(a)) return this.each(function (b) {
	        m(this).addClass(a.call(this, b, this.className));
	      });if (j) for (b = (a || "").match(E) || []; i > h; h++) {
	        if (c = this[h], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(ub, " ") : " ")) {
	          f = 0;while (e = b[f++]) {
	            d.indexOf(" " + e + " ") < 0 && (d += e + " ");
	          }g = m.trim(d), c.className !== g && (c.className = g);
	        }
	      }return this;
	    }, removeClass: function removeClass(a) {
	      var b,
	          c,
	          d,
	          e,
	          f,
	          g,
	          h = 0,
	          i = this.length,
	          j = 0 === arguments.length || "string" == typeof a && a;if (m.isFunction(a)) return this.each(function (b) {
	        m(this).removeClass(a.call(this, b, this.className));
	      });if (j) for (b = (a || "").match(E) || []; i > h; h++) {
	        if (c = this[h], d = 1 === c.nodeType && (c.className ? (" " + c.className + " ").replace(ub, " ") : "")) {
	          f = 0;while (e = b[f++]) {
	            while (d.indexOf(" " + e + " ") >= 0) {
	              d = d.replace(" " + e + " ", " ");
	            }
	          }g = a ? m.trim(d) : "", c.className !== g && (c.className = g);
	        }
	      }return this;
	    }, toggleClass: function toggleClass(a, b) {
	      var c = typeof a === "undefined" ? "undefined" : _typeof(a);return "boolean" == typeof b && "string" === c ? b ? this.addClass(a) : this.removeClass(a) : this.each(m.isFunction(a) ? function (c) {
	        m(this).toggleClass(a.call(this, c, this.className, b), b);
	      } : function () {
	        if ("string" === c) {
	          var b,
	              d = 0,
	              e = m(this),
	              f = a.match(E) || [];while (b = f[d++]) {
	            e.hasClass(b) ? e.removeClass(b) : e.addClass(b);
	          }
	        } else (c === K || "boolean" === c) && (this.className && m._data(this, "__className__", this.className), this.className = this.className || a === !1 ? "" : m._data(this, "__className__") || "");
	      });
	    }, hasClass: function hasClass(a) {
	      for (var b = " " + a + " ", c = 0, d = this.length; d > c; c++) {
	        if (1 === this[c].nodeType && (" " + this[c].className + " ").replace(ub, " ").indexOf(b) >= 0) return !0;
	      }return !1;
	    } }), m.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function (a, b) {
	    m.fn[b] = function (a, c) {
	      return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b);
	    };
	  }), m.fn.extend({ hover: function hover(a, b) {
	      return this.mouseenter(a).mouseleave(b || a);
	    }, bind: function bind(a, b, c) {
	      return this.on(a, null, b, c);
	    }, unbind: function unbind(a, b) {
	      return this.off(a, null, b);
	    }, delegate: function delegate(a, b, c, d) {
	      return this.on(b, a, c, d);
	    }, undelegate: function undelegate(a, b, c) {
	      return 1 === arguments.length ? this.off(a, "**") : this.off(b, a || "**", c);
	    } });var vb = m.now(),
	      wb = /\?/,
	      xb = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;m.parseJSON = function (b) {
	    if (a.JSON && a.JSON.parse) return a.JSON.parse(b + "");var c,
	        d = null,
	        e = m.trim(b + "");return e && !m.trim(e.replace(xb, function (a, b, e, f) {
	      return c && b && (d = 0), 0 === d ? a : (c = e || b, d += !f - !e, "");
	    })) ? Function("return " + e)() : m.error("Invalid JSON: " + b);
	  }, m.parseXML = function (b) {
	    var c, d;if (!b || "string" != typeof b) return null;try {
	      a.DOMParser ? (d = new DOMParser(), c = d.parseFromString(b, "text/xml")) : (c = new ActiveXObject("Microsoft.XMLDOM"), c.async = "false", c.loadXML(b));
	    } catch (e) {
	      c = void 0;
	    }return c && c.documentElement && !c.getElementsByTagName("parsererror").length || m.error("Invalid XML: " + b), c;
	  };var yb,
	      zb,
	      Ab = /#.*$/,
	      Bb = /([?&])_=[^&]*/,
	      Cb = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm,
	      Db = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	      Eb = /^(?:GET|HEAD)$/,
	      Fb = /^\/\//,
	      Gb = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
	      Hb = {},
	      Ib = {},
	      Jb = "*/".concat("*");try {
	    zb = location.href;
	  } catch (Kb) {
	    zb = y.createElement("a"), zb.href = "", zb = zb.href;
	  }yb = Gb.exec(zb.toLowerCase()) || [];function Lb(a) {
	    return function (b, c) {
	      "string" != typeof b && (c = b, b = "*");var d,
	          e = 0,
	          f = b.toLowerCase().match(E) || [];if (m.isFunction(c)) while (d = f[e++]) {
	        "+" === d.charAt(0) ? (d = d.slice(1) || "*", (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c);
	      }
	    };
	  }function Mb(a, b, c, d) {
	    var e = {},
	        f = a === Ib;function g(h) {
	      var i;return e[h] = !0, m.each(a[h] || [], function (a, h) {
	        var j = h(b, c, d);return "string" != typeof j || f || e[j] ? f ? !(i = j) : void 0 : (b.dataTypes.unshift(j), g(j), !1);
	      }), i;
	    }return g(b.dataTypes[0]) || !e["*"] && g("*");
	  }function Nb(a, b) {
	    var c,
	        d,
	        e = m.ajaxSettings.flatOptions || {};for (d in b) {
	      void 0 !== b[d] && ((e[d] ? a : c || (c = {}))[d] = b[d]);
	    }return c && m.extend(!0, a, c), a;
	  }function Ob(a, b, c) {
	    var d,
	        e,
	        f,
	        g,
	        h = a.contents,
	        i = a.dataTypes;while ("*" === i[0]) {
	      i.shift(), void 0 === e && (e = a.mimeType || b.getResponseHeader("Content-Type"));
	    }if (e) for (g in h) {
	      if (h[g] && h[g].test(e)) {
	        i.unshift(g);break;
	      }
	    }if (i[0] in c) f = i[0];else {
	      for (g in c) {
	        if (!i[0] || a.converters[g + " " + i[0]]) {
	          f = g;break;
	        }d || (d = g);
	      }f = f || d;
	    }return f ? (f !== i[0] && i.unshift(f), c[f]) : void 0;
	  }function Pb(a, b, c, d) {
	    var e,
	        f,
	        g,
	        h,
	        i,
	        j = {},
	        k = a.dataTypes.slice();if (k[1]) for (g in a.converters) {
	      j[g.toLowerCase()] = a.converters[g];
	    }f = k.shift();while (f) {
	      if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift()) if ("*" === f) f = i;else if ("*" !== i && i !== f) {
	        if (g = j[i + " " + f] || j["* " + f], !g) for (e in j) {
	          if (h = e.split(" "), h[1] === f && (g = j[i + " " + h[0]] || j["* " + h[0]])) {
	            g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1]));break;
	          }
	        }if (g !== !0) if (g && a["throws"]) b = g(b);else try {
	          b = g(b);
	        } catch (l) {
	          return { state: "parsererror", error: g ? l : "No conversion from " + i + " to " + f };
	        }
	      }
	    }return { state: "success", data: b };
	  }m.extend({ active: 0, lastModified: {}, etag: {}, ajaxSettings: { url: zb, type: "GET", isLocal: Db.test(yb[1]), global: !0, processData: !0, async: !0, contentType: "application/x-www-form-urlencoded; charset=UTF-8", accepts: { "*": Jb, text: "text/plain", html: "text/html", xml: "application/xml, text/xml", json: "application/json, text/javascript" }, contents: { xml: /xml/, html: /html/, json: /json/ }, responseFields: { xml: "responseXML", text: "responseText", json: "responseJSON" }, converters: { "* text": String, "text html": !0, "text json": m.parseJSON, "text xml": m.parseXML }, flatOptions: { url: !0, context: !0 } }, ajaxSetup: function ajaxSetup(a, b) {
	      return b ? Nb(Nb(a, m.ajaxSettings), b) : Nb(m.ajaxSettings, a);
	    }, ajaxPrefilter: Lb(Hb), ajaxTransport: Lb(Ib), ajax: function ajax(a, b) {
	      "object" == (typeof a === "undefined" ? "undefined" : _typeof(a)) && (b = a, a = void 0), b = b || {};var c,
	          d,
	          e,
	          f,
	          g,
	          h,
	          i,
	          j,
	          k = m.ajaxSetup({}, b),
	          l = k.context || k,
	          n = k.context && (l.nodeType || l.jquery) ? m(l) : m.event,
	          o = m.Deferred(),
	          p = m.Callbacks("once memory"),
	          q = k.statusCode || {},
	          r = {},
	          s = {},
	          t = 0,
	          u = "canceled",
	          v = { readyState: 0, getResponseHeader: function getResponseHeader(a) {
	          var b;if (2 === t) {
	            if (!j) {
	              j = {};while (b = Cb.exec(f)) {
	                j[b[1].toLowerCase()] = b[2];
	              }
	            }b = j[a.toLowerCase()];
	          }return null == b ? null : b;
	        }, getAllResponseHeaders: function getAllResponseHeaders() {
	          return 2 === t ? f : null;
	        }, setRequestHeader: function setRequestHeader(a, b) {
	          var c = a.toLowerCase();return t || (a = s[c] = s[c] || a, r[a] = b), this;
	        }, overrideMimeType: function overrideMimeType(a) {
	          return t || (k.mimeType = a), this;
	        }, statusCode: function statusCode(a) {
	          var b;if (a) if (2 > t) for (b in a) {
	            q[b] = [q[b], a[b]];
	          } else v.always(a[v.status]);return this;
	        }, abort: function abort(a) {
	          var b = a || u;return i && i.abort(b), x(0, b), this;
	        } };if (o.promise(v).complete = p.add, v.success = v.done, v.error = v.fail, k.url = ((a || k.url || zb) + "").replace(Ab, "").replace(Fb, yb[1] + "//"), k.type = b.method || b.type || k.method || k.type, k.dataTypes = m.trim(k.dataType || "*").toLowerCase().match(E) || [""], null == k.crossDomain && (c = Gb.exec(k.url.toLowerCase()), k.crossDomain = !(!c || c[1] === yb[1] && c[2] === yb[2] && (c[3] || ("http:" === c[1] ? "80" : "443")) === (yb[3] || ("http:" === yb[1] ? "80" : "443")))), k.data && k.processData && "string" != typeof k.data && (k.data = m.param(k.data, k.traditional)), Mb(Hb, k, b, v), 2 === t) return v;h = m.event && k.global, h && 0 === m.active++ && m.event.trigger("ajaxStart"), k.type = k.type.toUpperCase(), k.hasContent = !Eb.test(k.type), e = k.url, k.hasContent || (k.data && (e = k.url += (wb.test(e) ? "&" : "?") + k.data, delete k.data), k.cache === !1 && (k.url = Bb.test(e) ? e.replace(Bb, "$1_=" + vb++) : e + (wb.test(e) ? "&" : "?") + "_=" + vb++)), k.ifModified && (m.lastModified[e] && v.setRequestHeader("If-Modified-Since", m.lastModified[e]), m.etag[e] && v.setRequestHeader("If-None-Match", m.etag[e])), (k.data && k.hasContent && k.contentType !== !1 || b.contentType) && v.setRequestHeader("Content-Type", k.contentType), v.setRequestHeader("Accept", k.dataTypes[0] && k.accepts[k.dataTypes[0]] ? k.accepts[k.dataTypes[0]] + ("*" !== k.dataTypes[0] ? ", " + Jb + "; q=0.01" : "") : k.accepts["*"]);for (d in k.headers) {
	        v.setRequestHeader(d, k.headers[d]);
	      }if (k.beforeSend && (k.beforeSend.call(l, v, k) === !1 || 2 === t)) return v.abort();u = "abort";for (d in { success: 1, error: 1, complete: 1 }) {
	        v[d](k[d]);
	      }if (i = Mb(Ib, k, b, v)) {
	        v.readyState = 1, h && n.trigger("ajaxSend", [v, k]), k.async && k.timeout > 0 && (g = setTimeout(function () {
	          v.abort("timeout");
	        }, k.timeout));try {
	          t = 1, i.send(r, x);
	        } catch (w) {
	          if (!(2 > t)) throw w;x(-1, w);
	        }
	      } else x(-1, "No Transport");function x(a, b, c, d) {
	        var j,
	            r,
	            s,
	            u,
	            w,
	            x = b;2 !== t && (t = 2, g && clearTimeout(g), i = void 0, f = d || "", v.readyState = a > 0 ? 4 : 0, j = a >= 200 && 300 > a || 304 === a, c && (u = Ob(k, v, c)), u = Pb(k, u, v, j), j ? (k.ifModified && (w = v.getResponseHeader("Last-Modified"), w && (m.lastModified[e] = w), w = v.getResponseHeader("etag"), w && (m.etag[e] = w)), 204 === a || "HEAD" === k.type ? x = "nocontent" : 304 === a ? x = "notmodified" : (x = u.state, r = u.data, s = u.error, j = !s)) : (s = x, (a || !x) && (x = "error", 0 > a && (a = 0))), v.status = a, v.statusText = (b || x) + "", j ? o.resolveWith(l, [r, x, v]) : o.rejectWith(l, [v, x, s]), v.statusCode(q), q = void 0, h && n.trigger(j ? "ajaxSuccess" : "ajaxError", [v, k, j ? r : s]), p.fireWith(l, [v, x]), h && (n.trigger("ajaxComplete", [v, k]), --m.active || m.event.trigger("ajaxStop")));
	      }return v;
	    }, getJSON: function getJSON(a, b, c) {
	      return m.get(a, b, c, "json");
	    }, getScript: function getScript(a, b) {
	      return m.get(a, void 0, b, "script");
	    } }), m.each(["get", "post"], function (a, b) {
	    m[b] = function (a, c, d, e) {
	      return m.isFunction(c) && (e = e || d, d = c, c = void 0), m.ajax({ url: a, type: b, dataType: e, data: c, success: d });
	    };
	  }), m._evalUrl = function (a) {
	    return m.ajax({ url: a, type: "GET", dataType: "script", async: !1, global: !1, "throws": !0 });
	  }, m.fn.extend({ wrapAll: function wrapAll(a) {
	      if (m.isFunction(a)) return this.each(function (b) {
	        m(this).wrapAll(a.call(this, b));
	      });if (this[0]) {
	        var b = m(a, this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode && b.insertBefore(this[0]), b.map(function () {
	          var a = this;while (a.firstChild && 1 === a.firstChild.nodeType) {
	            a = a.firstChild;
	          }return a;
	        }).append(this);
	      }return this;
	    }, wrapInner: function wrapInner(a) {
	      return this.each(m.isFunction(a) ? function (b) {
	        m(this).wrapInner(a.call(this, b));
	      } : function () {
	        var b = m(this),
	            c = b.contents();c.length ? c.wrapAll(a) : b.append(a);
	      });
	    }, wrap: function wrap(a) {
	      var b = m.isFunction(a);return this.each(function (c) {
	        m(this).wrapAll(b ? a.call(this, c) : a);
	      });
	    }, unwrap: function unwrap() {
	      return this.parent().each(function () {
	        m.nodeName(this, "body") || m(this).replaceWith(this.childNodes);
	      }).end();
	    } }), m.expr.filters.hidden = function (a) {
	    return a.offsetWidth <= 0 && a.offsetHeight <= 0 || !k.reliableHiddenOffsets() && "none" === (a.style && a.style.display || m.css(a, "display"));
	  }, m.expr.filters.visible = function (a) {
	    return !m.expr.filters.hidden(a);
	  };var Qb = /%20/g,
	      Rb = /\[\]$/,
	      Sb = /\r?\n/g,
	      Tb = /^(?:submit|button|image|reset|file)$/i,
	      Ub = /^(?:input|select|textarea|keygen)/i;function Vb(a, b, c, d) {
	    var e;if (m.isArray(b)) m.each(b, function (b, e) {
	      c || Rb.test(a) ? d(a, e) : Vb(a + "[" + ("object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) ? b : "") + "]", e, c, d);
	    });else if (c || "object" !== m.type(b)) d(a, b);else for (e in b) {
	      Vb(a + "[" + e + "]", b[e], c, d);
	    }
	  }m.param = function (a, b) {
	    var c,
	        d = [],
	        e = function e(a, b) {
	      b = m.isFunction(b) ? b() : null == b ? "" : b, d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(b);
	    };if (void 0 === b && (b = m.ajaxSettings && m.ajaxSettings.traditional), m.isArray(a) || a.jquery && !m.isPlainObject(a)) m.each(a, function () {
	      e(this.name, this.value);
	    });else for (c in a) {
	      Vb(c, a[c], b, e);
	    }return d.join("&").replace(Qb, "+");
	  }, m.fn.extend({ serialize: function serialize() {
	      return m.param(this.serializeArray());
	    }, serializeArray: function serializeArray() {
	      return this.map(function () {
	        var a = m.prop(this, "elements");return a ? m.makeArray(a) : this;
	      }).filter(function () {
	        var a = this.type;return this.name && !m(this).is(":disabled") && Ub.test(this.nodeName) && !Tb.test(a) && (this.checked || !W.test(a));
	      }).map(function (a, b) {
	        var c = m(this).val();return null == c ? null : m.isArray(c) ? m.map(c, function (a) {
	          return { name: b.name, value: a.replace(Sb, "\r\n") };
	        }) : { name: b.name, value: c.replace(Sb, "\r\n") };
	      }).get();
	    } }), m.ajaxSettings.xhr = void 0 !== a.ActiveXObject ? function () {
	    return !this.isLocal && /^(get|post|head|put|delete|options)$/i.test(this.type) && Zb() || $b();
	  } : Zb;var Wb = 0,
	      Xb = {},
	      Yb = m.ajaxSettings.xhr();a.attachEvent && a.attachEvent("onunload", function () {
	    for (var a in Xb) {
	      Xb[a](void 0, !0);
	    }
	  }), k.cors = !!Yb && "withCredentials" in Yb, Yb = k.ajax = !!Yb, Yb && m.ajaxTransport(function (a) {
	    if (!a.crossDomain || k.cors) {
	      var _b3;return { send: function send(c, d) {
	          var e,
	              f = a.xhr(),
	              g = ++Wb;if (f.open(a.type, a.url, a.async, a.username, a.password), a.xhrFields) for (e in a.xhrFields) {
	            f[e] = a.xhrFields[e];
	          }a.mimeType && f.overrideMimeType && f.overrideMimeType(a.mimeType), a.crossDomain || c["X-Requested-With"] || (c["X-Requested-With"] = "XMLHttpRequest");for (e in c) {
	            void 0 !== c[e] && f.setRequestHeader(e, c[e] + "");
	          }f.send(a.hasContent && a.data || null), _b3 = function b(c, e) {
	            var h, i, j;if (_b3 && (e || 4 === f.readyState)) if (delete Xb[g], _b3 = void 0, f.onreadystatechange = m.noop, e) 4 !== f.readyState && f.abort();else {
	              j = {}, h = f.status, "string" == typeof f.responseText && (j.text = f.responseText);try {
	                i = f.statusText;
	              } catch (k) {
	                i = "";
	              }h || !a.isLocal || a.crossDomain ? 1223 === h && (h = 204) : h = j.text ? 200 : 404;
	            }j && d(h, i, j, f.getAllResponseHeaders());
	          }, a.async ? 4 === f.readyState ? setTimeout(_b3) : f.onreadystatechange = Xb[g] = _b3 : _b3();
	        }, abort: function abort() {
	          _b3 && _b3(void 0, !0);
	        } };
	    }
	  });function Zb() {
	    try {
	      return new a.XMLHttpRequest();
	    } catch (b) {}
	  }function $b() {
	    try {
	      return new a.ActiveXObject("Microsoft.XMLHTTP");
	    } catch (b) {}
	  }m.ajaxSetup({ accepts: { script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" }, contents: { script: /(?:java|ecma)script/ }, converters: { "text script": function textScript(a) {
	        return m.globalEval(a), a;
	      } } }), m.ajaxPrefilter("script", function (a) {
	    void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = "GET", a.global = !1);
	  }), m.ajaxTransport("script", function (a) {
	    if (a.crossDomain) {
	      var b,
	          c = y.head || m("head")[0] || y.documentElement;return { send: function send(d, e) {
	          b = y.createElement("script"), b.async = !0, a.scriptCharset && (b.charset = a.scriptCharset), b.src = a.url, b.onload = b.onreadystatechange = function (a, c) {
	            (c || !b.readyState || /loaded|complete/.test(b.readyState)) && (b.onload = b.onreadystatechange = null, b.parentNode && b.parentNode.removeChild(b), b = null, c || e(200, "success"));
	          }, c.insertBefore(b, c.firstChild);
	        }, abort: function abort() {
	          b && b.onload(void 0, !0);
	        } };
	    }
	  });var _b = [],
	      ac = /(=)\?(?=&|$)|\?\?/;m.ajaxSetup({ jsonp: "callback", jsonpCallback: function jsonpCallback() {
	      var a = _b.pop() || m.expando + "_" + vb++;return this[a] = !0, a;
	    } }), m.ajaxPrefilter("json jsonp", function (b, c, d) {
	    var e,
	        f,
	        g,
	        h = b.jsonp !== !1 && (ac.test(b.url) ? "url" : "string" == typeof b.data && !(b.contentType || "").indexOf("application/x-www-form-urlencoded") && ac.test(b.data) && "data");return h || "jsonp" === b.dataTypes[0] ? (e = b.jsonpCallback = m.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(ac, "$1" + e) : b.jsonp !== !1 && (b.url += (wb.test(b.url) ? "&" : "?") + b.jsonp + "=" + e), b.converters["script json"] = function () {
	      return g || m.error(e + " was not called"), g[0];
	    }, b.dataTypes[0] = "json", f = a[e], a[e] = function () {
	      g = arguments;
	    }, d.always(function () {
	      a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, _b.push(e)), g && m.isFunction(f) && f(g[0]), g = f = void 0;
	    }), "script") : void 0;
	  }), m.parseHTML = function (a, b, c) {
	    if (!a || "string" != typeof a) return null;"boolean" == typeof b && (c = b, b = !1), b = b || y;var d = u.exec(a),
	        e = !c && [];return d ? [b.createElement(d[1])] : (d = m.buildFragment([a], b, e), e && e.length && m(e).remove(), m.merge([], d.childNodes));
	  };var bc = m.fn.load;m.fn.load = function (a, b, c) {
	    if ("string" != typeof a && bc) return bc.apply(this, arguments);var d,
	        e,
	        f,
	        g = this,
	        h = a.indexOf(" ");return h >= 0 && (d = m.trim(a.slice(h, a.length)), a = a.slice(0, h)), m.isFunction(b) ? (c = b, b = void 0) : b && "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && (f = "POST"), g.length > 0 && m.ajax({ url: a, type: f, dataType: "html", data: b }).done(function (a) {
	      e = arguments, g.html(d ? m("<div>").append(m.parseHTML(a)).find(d) : a);
	    }).complete(c && function (a, b) {
	      g.each(c, e || [a.responseText, b, a]);
	    }), this;
	  }, m.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (a, b) {
	    m.fn[b] = function (a) {
	      return this.on(b, a);
	    };
	  }), m.expr.filters.animated = function (a) {
	    return m.grep(m.timers, function (b) {
	      return a === b.elem;
	    }).length;
	  };var cc = a.document.documentElement;function dc(a) {
	    return m.isWindow(a) ? a : 9 === a.nodeType ? a.defaultView || a.parentWindow : !1;
	  }m.offset = { setOffset: function setOffset(a, b, c) {
	      var d,
	          e,
	          f,
	          g,
	          h,
	          i,
	          j,
	          k = m.css(a, "position"),
	          l = m(a),
	          n = {};"static" === k && (a.style.position = "relative"), h = l.offset(), f = m.css(a, "top"), i = m.css(a, "left"), j = ("absolute" === k || "fixed" === k) && m.inArray("auto", [f, i]) > -1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), m.isFunction(b) && (b = b.call(a, c, h)), null != b.top && (n.top = b.top - h.top + g), null != b.left && (n.left = b.left - h.left + e), "using" in b ? b.using.call(a, n) : l.css(n);
	    } }, m.fn.extend({ offset: function offset(a) {
	      if (arguments.length) return void 0 === a ? this : this.each(function (b) {
	        m.offset.setOffset(this, a, b);
	      });var b,
	          c,
	          d = { top: 0, left: 0 },
	          e = this[0],
	          f = e && e.ownerDocument;if (f) return b = f.documentElement, m.contains(b, e) ? (_typeof(e.getBoundingClientRect) !== K && (d = e.getBoundingClientRect()), c = dc(f), { top: d.top + (c.pageYOffset || b.scrollTop) - (b.clientTop || 0), left: d.left + (c.pageXOffset || b.scrollLeft) - (b.clientLeft || 0) }) : d;
	    }, position: function position() {
	      if (this[0]) {
	        var a,
	            b,
	            c = { top: 0, left: 0 },
	            d = this[0];return "fixed" === m.css(d, "position") ? b = d.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), m.nodeName(a[0], "html") || (c = a.offset()), c.top += m.css(a[0], "borderTopWidth", !0), c.left += m.css(a[0], "borderLeftWidth", !0)), { top: b.top - c.top - m.css(d, "marginTop", !0), left: b.left - c.left - m.css(d, "marginLeft", !0) };
	      }
	    }, offsetParent: function offsetParent() {
	      return this.map(function () {
	        var a = this.offsetParent || cc;while (a && !m.nodeName(a, "html") && "static" === m.css(a, "position")) {
	          a = a.offsetParent;
	        }return a || cc;
	      });
	    } }), m.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (a, b) {
	    var c = /Y/.test(b);m.fn[a] = function (d) {
	      return V(this, function (a, d, e) {
	        var f = dc(a);return void 0 === e ? f ? b in f ? f[b] : f.document.documentElement[d] : a[d] : void (f ? f.scrollTo(c ? m(f).scrollLeft() : e, c ? e : m(f).scrollTop()) : a[d] = e);
	      }, a, d, arguments.length, null);
	    };
	  }), m.each(["top", "left"], function (a, b) {
	    m.cssHooks[b] = La(k.pixelPosition, function (a, c) {
	      return c ? (c = Ja(a, b), Ha.test(c) ? m(a).position()[b] + "px" : c) : void 0;
	    });
	  }), m.each({ Height: "height", Width: "width" }, function (a, b) {
	    m.each({ padding: "inner" + a, content: b, "": "outer" + a }, function (c, d) {
	      m.fn[d] = function (d, e) {
	        var f = arguments.length && (c || "boolean" != typeof d),
	            g = c || (d === !0 || e === !0 ? "margin" : "border");return V(this, function (b, c, d) {
	          var e;return m.isWindow(b) ? b.document.documentElement["client" + a] : 9 === b.nodeType ? (e = b.documentElement, Math.max(b.body["scroll" + a], e["scroll" + a], b.body["offset" + a], e["offset" + a], e["client" + a])) : void 0 === d ? m.css(b, c, g) : m.style(b, c, d, g);
	        }, b, f ? d : void 0, f, null);
	      };
	    });
	  }), m.fn.size = function () {
	    return this.length;
	  }, m.fn.andSelf = m.fn.addBack, "function" == "function" && __webpack_require__(6) && !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
	    return m;
	  }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));var ec = a.jQuery,
	      fc = a.$;return m.noConflict = function (b) {
	    return a.$ === m && (a.$ = fc), b && a.jQuery === m && (a.jQuery = ec), m;
	  }, (typeof b === "undefined" ? "undefined" : _typeof(b)) === K && (a.jQuery = a.$ = m), m;
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)(module)))

/***/ },
/* 5 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 6 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;
	
	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/*!
	 * Bootstrap v3.3.6 (http://getbootstrap.com)
	 * Copyright 2011-2015 Twitter, Inc.
	 * Licensed under the MIT license
	 */
	if ("undefined" == typeof jQuery) throw new Error("Bootstrap's JavaScript requires jQuery");+function (a) {
	  "use strict";
	  var b = a.fn.jquery.split(" ")[0].split(".");if (b[0] < 2 && b[1] < 9 || 1 == b[0] && 9 == b[1] && b[2] < 1 || b[0] > 2) throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 3");
	}(jQuery), +function (a) {
	  "use strict";
	  function b() {
	    var a = document.createElement("bootstrap"),
	        b = { WebkitTransition: "webkitTransitionEnd", MozTransition: "transitionend", OTransition: "oTransitionEnd otransitionend", transition: "transitionend" };for (var c in b) {
	      if (void 0 !== a.style[c]) return { end: b[c] };
	    }return !1;
	  }a.fn.emulateTransitionEnd = function (b) {
	    var c = !1,
	        d = this;a(this).one("bsTransitionEnd", function () {
	      c = !0;
	    });var e = function e() {
	      c || a(d).trigger(a.support.transition.end);
	    };return setTimeout(e, b), this;
	  }, a(function () {
	    a.support.transition = b(), a.support.transition && (a.event.special.bsTransitionEnd = { bindType: a.support.transition.end, delegateType: a.support.transition.end, handle: function handle(b) {
	        return a(b.target).is(this) ? b.handleObj.handler.apply(this, arguments) : void 0;
	      } });
	  });
	}(jQuery), +function (a) {
	  "use strict";
	  function b(b) {
	    return this.each(function () {
	      var c = a(this),
	          e = c.data("bs.alert");e || c.data("bs.alert", e = new d(this)), "string" == typeof b && e[b].call(c);
	    });
	  }var c = '[data-dismiss="alert"]',
	      d = function d(b) {
	    a(b).on("click", c, this.close);
	  };d.VERSION = "3.3.6", d.TRANSITION_DURATION = 150, d.prototype.close = function (b) {
	    function c() {
	      g.detach().trigger("closed.bs.alert").remove();
	    }var e = a(this),
	        f = e.attr("data-target");f || (f = e.attr("href"), f = f && f.replace(/.*(?=#[^\s]*$)/, ""));var g = a(f);b && b.preventDefault(), g.length || (g = e.closest(".alert")), g.trigger(b = a.Event("close.bs.alert")), b.isDefaultPrevented() || (g.removeClass("in"), a.support.transition && g.hasClass("fade") ? g.one("bsTransitionEnd", c).emulateTransitionEnd(d.TRANSITION_DURATION) : c());
	  };var e = a.fn.alert;a.fn.alert = b, a.fn.alert.Constructor = d, a.fn.alert.noConflict = function () {
	    return a.fn.alert = e, this;
	  }, a(document).on("click.bs.alert.data-api", c, d.prototype.close);
	}(jQuery), +function (a) {
	  "use strict";
	  function b(b) {
	    return this.each(function () {
	      var d = a(this),
	          e = d.data("bs.button"),
	          f = "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && b;e || d.data("bs.button", e = new c(this, f)), "toggle" == b ? e.toggle() : b && e.setState(b);
	    });
	  }var c = function c(b, d) {
	    this.$element = a(b), this.options = a.extend({}, c.DEFAULTS, d), this.isLoading = !1;
	  };c.VERSION = "3.3.6", c.DEFAULTS = { loadingText: "loading..." }, c.prototype.setState = function (b) {
	    var c = "disabled",
	        d = this.$element,
	        e = d.is("input") ? "val" : "html",
	        f = d.data();b += "Text", null == f.resetText && d.data("resetText", d[e]()), setTimeout(a.proxy(function () {
	      d[e](null == f[b] ? this.options[b] : f[b]), "loadingText" == b ? (this.isLoading = !0, d.addClass(c).attr(c, c)) : this.isLoading && (this.isLoading = !1, d.removeClass(c).removeAttr(c));
	    }, this), 0);
	  }, c.prototype.toggle = function () {
	    var a = !0,
	        b = this.$element.closest('[data-toggle="buttons"]');if (b.length) {
	      var c = this.$element.find("input");"radio" == c.prop("type") ? (c.prop("checked") && (a = !1), b.find(".active").removeClass("active"), this.$element.addClass("active")) : "checkbox" == c.prop("type") && (c.prop("checked") !== this.$element.hasClass("active") && (a = !1), this.$element.toggleClass("active")), c.prop("checked", this.$element.hasClass("active")), a && c.trigger("change");
	    } else this.$element.attr("aria-pressed", !this.$element.hasClass("active")), this.$element.toggleClass("active");
	  };var d = a.fn.button;a.fn.button = b, a.fn.button.Constructor = c, a.fn.button.noConflict = function () {
	    return a.fn.button = d, this;
	  }, a(document).on("click.bs.button.data-api", '[data-toggle^="button"]', function (c) {
	    var d = a(c.target);d.hasClass("btn") || (d = d.closest(".btn")), b.call(d, "toggle"), a(c.target).is('input[type="radio"]') || a(c.target).is('input[type="checkbox"]') || c.preventDefault();
	  }).on("focus.bs.button.data-api blur.bs.button.data-api", '[data-toggle^="button"]', function (b) {
	    a(b.target).closest(".btn").toggleClass("focus", /^focus(in)?$/.test(b.type));
	  });
	}(jQuery), +function (a) {
	  "use strict";
	  function b(b) {
	    return this.each(function () {
	      var d = a(this),
	          e = d.data("bs.carousel"),
	          f = a.extend({}, c.DEFAULTS, d.data(), "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && b),
	          g = "string" == typeof b ? b : f.slide;e || d.data("bs.carousel", e = new c(this, f)), "number" == typeof b ? e.to(b) : g ? e[g]() : f.interval && e.pause().cycle();
	    });
	  }var c = function c(b, _c) {
	    this.$element = a(b), this.$indicators = this.$element.find(".carousel-indicators"), this.options = _c, this.paused = null, this.sliding = null, this.interval = null, this.$active = null, this.$items = null, this.options.keyboard && this.$element.on("keydown.bs.carousel", a.proxy(this.keydown, this)), "hover" == this.options.pause && !("ontouchstart" in document.documentElement) && this.$element.on("mouseenter.bs.carousel", a.proxy(this.pause, this)).on("mouseleave.bs.carousel", a.proxy(this.cycle, this));
	  };c.VERSION = "3.3.6", c.TRANSITION_DURATION = 600, c.DEFAULTS = { interval: 5e3, pause: "hover", wrap: !0, keyboard: !0 }, c.prototype.keydown = function (a) {
	    if (!/input|textarea/i.test(a.target.tagName)) {
	      switch (a.which) {case 37:
	          this.prev();break;case 39:
	          this.next();break;default:
	          return;}a.preventDefault();
	    }
	  }, c.prototype.cycle = function (b) {
	    return b || (this.paused = !1), this.interval && clearInterval(this.interval), this.options.interval && !this.paused && (this.interval = setInterval(a.proxy(this.next, this), this.options.interval)), this;
	  }, c.prototype.getItemIndex = function (a) {
	    return this.$items = a.parent().children(".item"), this.$items.index(a || this.$active);
	  }, c.prototype.getItemForDirection = function (a, b) {
	    var c = this.getItemIndex(b),
	        d = "prev" == a && 0 === c || "next" == a && c == this.$items.length - 1;if (d && !this.options.wrap) return b;var e = "prev" == a ? -1 : 1,
	        f = (c + e) % this.$items.length;return this.$items.eq(f);
	  }, c.prototype.to = function (a) {
	    var b = this,
	        c = this.getItemIndex(this.$active = this.$element.find(".item.active"));return a > this.$items.length - 1 || 0 > a ? void 0 : this.sliding ? this.$element.one("slid.bs.carousel", function () {
	      b.to(a);
	    }) : c == a ? this.pause().cycle() : this.slide(a > c ? "next" : "prev", this.$items.eq(a));
	  }, c.prototype.pause = function (b) {
	    return b || (this.paused = !0), this.$element.find(".next, .prev").length && a.support.transition && (this.$element.trigger(a.support.transition.end), this.cycle(!0)), this.interval = clearInterval(this.interval), this;
	  }, c.prototype.next = function () {
	    return this.sliding ? void 0 : this.slide("next");
	  }, c.prototype.prev = function () {
	    return this.sliding ? void 0 : this.slide("prev");
	  }, c.prototype.slide = function (b, d) {
	    var e = this.$element.find(".item.active"),
	        f = d || this.getItemForDirection(b, e),
	        g = this.interval,
	        h = "next" == b ? "left" : "right",
	        i = this;if (f.hasClass("active")) return this.sliding = !1;var j = f[0],
	        k = a.Event("slide.bs.carousel", { relatedTarget: j, direction: h });if (this.$element.trigger(k), !k.isDefaultPrevented()) {
	      if (this.sliding = !0, g && this.pause(), this.$indicators.length) {
	        this.$indicators.find(".active").removeClass("active");var l = a(this.$indicators.children()[this.getItemIndex(f)]);l && l.addClass("active");
	      }var m = a.Event("slid.bs.carousel", { relatedTarget: j, direction: h });return a.support.transition && this.$element.hasClass("slide") ? (f.addClass(b), f[0].offsetWidth, e.addClass(h), f.addClass(h), e.one("bsTransitionEnd", function () {
	        f.removeClass([b, h].join(" ")).addClass("active"), e.removeClass(["active", h].join(" ")), i.sliding = !1, setTimeout(function () {
	          i.$element.trigger(m);
	        }, 0);
	      }).emulateTransitionEnd(c.TRANSITION_DURATION)) : (e.removeClass("active"), f.addClass("active"), this.sliding = !1, this.$element.trigger(m)), g && this.cycle(), this;
	    }
	  };var d = a.fn.carousel;a.fn.carousel = b, a.fn.carousel.Constructor = c, a.fn.carousel.noConflict = function () {
	    return a.fn.carousel = d, this;
	  };var e = function e(c) {
	    var d,
	        e = a(this),
	        f = a(e.attr("data-target") || (d = e.attr("href")) && d.replace(/.*(?=#[^\s]+$)/, ""));if (f.hasClass("carousel")) {
	      var g = a.extend({}, f.data(), e.data()),
	          h = e.attr("data-slide-to");h && (g.interval = !1), b.call(f, g), h && f.data("bs.carousel").to(h), c.preventDefault();
	    }
	  };a(document).on("click.bs.carousel.data-api", "[data-slide]", e).on("click.bs.carousel.data-api", "[data-slide-to]", e), a(window).on("load", function () {
	    a('[data-ride="carousel"]').each(function () {
	      var c = a(this);b.call(c, c.data());
	    });
	  });
	}(jQuery), +function (a) {
	  "use strict";
	  function b(b) {
	    var c,
	        d = b.attr("data-target") || (c = b.attr("href")) && c.replace(/.*(?=#[^\s]+$)/, "");return a(d);
	  }function c(b) {
	    return this.each(function () {
	      var c = a(this),
	          e = c.data("bs.collapse"),
	          f = a.extend({}, d.DEFAULTS, c.data(), "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && b);!e && f.toggle && /show|hide/.test(b) && (f.toggle = !1), e || c.data("bs.collapse", e = new d(this, f)), "string" == typeof b && e[b]();
	    });
	  }var d = function d(b, c) {
	    this.$element = a(b), this.options = a.extend({}, d.DEFAULTS, c), this.$trigger = a('[data-toggle="collapse"][href="#' + b.id + '"],[data-toggle="collapse"][data-target="#' + b.id + '"]'), this.transitioning = null, this.options.parent ? this.$parent = this.getParent() : this.addAriaAndCollapsedClass(this.$element, this.$trigger), this.options.toggle && this.toggle();
	  };d.VERSION = "3.3.6", d.TRANSITION_DURATION = 350, d.DEFAULTS = { toggle: !0 }, d.prototype.dimension = function () {
	    var a = this.$element.hasClass("width");return a ? "width" : "height";
	  }, d.prototype.show = function () {
	    if (!this.transitioning && !this.$element.hasClass("in")) {
	      var b,
	          e = this.$parent && this.$parent.children(".panel").children(".in, .collapsing");if (!(e && e.length && (b = e.data("bs.collapse"), b && b.transitioning))) {
	        var f = a.Event("show.bs.collapse");if (this.$element.trigger(f), !f.isDefaultPrevented()) {
	          e && e.length && (c.call(e, "hide"), b || e.data("bs.collapse", null));var g = this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[g](0).attr("aria-expanded", !0), this.$trigger.removeClass("collapsed").attr("aria-expanded", !0), this.transitioning = 1;var h = function h() {
	            this.$element.removeClass("collapsing").addClass("collapse in")[g](""), this.transitioning = 0, this.$element.trigger("shown.bs.collapse");
	          };if (!a.support.transition) return h.call(this);var i = a.camelCase(["scroll", g].join("-"));this.$element.one("bsTransitionEnd", a.proxy(h, this)).emulateTransitionEnd(d.TRANSITION_DURATION)[g](this.$element[0][i]);
	        }
	      }
	    }
	  }, d.prototype.hide = function () {
	    if (!this.transitioning && this.$element.hasClass("in")) {
	      var b = a.Event("hide.bs.collapse");if (this.$element.trigger(b), !b.isDefaultPrevented()) {
	        var c = this.dimension();this.$element[c](this.$element[c]())[0].offsetHeight, this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded", !1), this.$trigger.addClass("collapsed").attr("aria-expanded", !1), this.transitioning = 1;var e = function e() {
	          this.transitioning = 0, this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse");
	        };return a.support.transition ? void this.$element[c](0).one("bsTransitionEnd", a.proxy(e, this)).emulateTransitionEnd(d.TRANSITION_DURATION) : e.call(this);
	      }
	    }
	  }, d.prototype.toggle = function () {
	    this[this.$element.hasClass("in") ? "hide" : "show"]();
	  }, d.prototype.getParent = function () {
	    return a(this.options.parent).find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]').each(a.proxy(function (c, d) {
	      var e = a(d);this.addAriaAndCollapsedClass(b(e), e);
	    }, this)).end();
	  }, d.prototype.addAriaAndCollapsedClass = function (a, b) {
	    var c = a.hasClass("in");a.attr("aria-expanded", c), b.toggleClass("collapsed", !c).attr("aria-expanded", c);
	  };var e = a.fn.collapse;a.fn.collapse = c, a.fn.collapse.Constructor = d, a.fn.collapse.noConflict = function () {
	    return a.fn.collapse = e, this;
	  }, a(document).on("click.bs.collapse.data-api", '[data-toggle="collapse"]', function (d) {
	    var e = a(this);e.attr("data-target") || d.preventDefault();var f = b(e),
	        g = f.data("bs.collapse"),
	        h = g ? "toggle" : e.data();c.call(f, h);
	  });
	}(jQuery), +function (a) {
	  "use strict";
	  function b(b) {
	    var c = b.attr("data-target");c || (c = b.attr("href"), c = c && /#[A-Za-z]/.test(c) && c.replace(/.*(?=#[^\s]*$)/, ""));var d = c && a(c);return d && d.length ? d : b.parent();
	  }function c(c) {
	    c && 3 === c.which || (a(e).remove(), a(f).each(function () {
	      var d = a(this),
	          e = b(d),
	          f = { relatedTarget: this };e.hasClass("open") && (c && "click" == c.type && /input|textarea/i.test(c.target.tagName) && a.contains(e[0], c.target) || (e.trigger(c = a.Event("hide.bs.dropdown", f)), c.isDefaultPrevented() || (d.attr("aria-expanded", "false"), e.removeClass("open").trigger(a.Event("hidden.bs.dropdown", f)))));
	    }));
	  }function d(b) {
	    return this.each(function () {
	      var c = a(this),
	          d = c.data("bs.dropdown");d || c.data("bs.dropdown", d = new g(this)), "string" == typeof b && d[b].call(c);
	    });
	  }var e = ".dropdown-backdrop",
	      f = '[data-toggle="dropdown"]',
	      g = function g(b) {
	    a(b).on("click.bs.dropdown", this.toggle);
	  };g.VERSION = "3.3.6", g.prototype.toggle = function (d) {
	    var e = a(this);if (!e.is(".disabled, :disabled")) {
	      var f = b(e),
	          g = f.hasClass("open");if (c(), !g) {
	        "ontouchstart" in document.documentElement && !f.closest(".navbar-nav").length && a(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(a(this)).on("click", c);var h = { relatedTarget: this };if (f.trigger(d = a.Event("show.bs.dropdown", h)), d.isDefaultPrevented()) return;e.trigger("focus").attr("aria-expanded", "true"), f.toggleClass("open").trigger(a.Event("shown.bs.dropdown", h));
	      }return !1;
	    }
	  }, g.prototype.keydown = function (c) {
	    if (/(38|40|27|32)/.test(c.which) && !/input|textarea/i.test(c.target.tagName)) {
	      var d = a(this);if (c.preventDefault(), c.stopPropagation(), !d.is(".disabled, :disabled")) {
	        var e = b(d),
	            g = e.hasClass("open");if (!g && 27 != c.which || g && 27 == c.which) return 27 == c.which && e.find(f).trigger("focus"), d.trigger("click");var h = " li:not(.disabled):visible a",
	            i = e.find(".dropdown-menu" + h);if (i.length) {
	          var j = i.index(c.target);38 == c.which && j > 0 && j--, 40 == c.which && j < i.length - 1 && j++, ~j || (j = 0), i.eq(j).trigger("focus");
	        }
	      }
	    }
	  };var h = a.fn.dropdown;a.fn.dropdown = d, a.fn.dropdown.Constructor = g, a.fn.dropdown.noConflict = function () {
	    return a.fn.dropdown = h, this;
	  }, a(document).on("click.bs.dropdown.data-api", c).on("click.bs.dropdown.data-api", ".dropdown form", function (a) {
	    a.stopPropagation();
	  }).on("click.bs.dropdown.data-api", f, g.prototype.toggle).on("keydown.bs.dropdown.data-api", f, g.prototype.keydown).on("keydown.bs.dropdown.data-api", ".dropdown-menu", g.prototype.keydown);
	}(jQuery), +function (a) {
	  "use strict";
	  function b(b, d) {
	    return this.each(function () {
	      var e = a(this),
	          f = e.data("bs.modal"),
	          g = a.extend({}, c.DEFAULTS, e.data(), "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && b);f || e.data("bs.modal", f = new c(this, g)), "string" == typeof b ? f[b](d) : g.show && f.show(d);
	    });
	  }var c = function c(b, _c2) {
	    this.options = _c2, this.$body = a(document.body), this.$element = a(b), this.$dialog = this.$element.find(".modal-dialog"), this.$backdrop = null, this.isShown = null, this.originalBodyPad = null, this.scrollbarWidth = 0, this.ignoreBackdropClick = !1, this.options.remote && this.$element.find(".modal-content").load(this.options.remote, a.proxy(function () {
	      this.$element.trigger("loaded.bs.modal");
	    }, this));
	  };c.VERSION = "3.3.6", c.TRANSITION_DURATION = 300, c.BACKDROP_TRANSITION_DURATION = 150, c.DEFAULTS = { backdrop: !0, keyboard: !0, show: !0 }, c.prototype.toggle = function (a) {
	    return this.isShown ? this.hide() : this.show(a);
	  }, c.prototype.show = function (b) {
	    var d = this,
	        e = a.Event("show.bs.modal", { relatedTarget: b });this.$element.trigger(e), this.isShown || e.isDefaultPrevented() || (this.isShown = !0, this.checkScrollbar(), this.setScrollbar(), this.$body.addClass("modal-open"), this.escape(), this.resize(), this.$element.on("click.dismiss.bs.modal", '[data-dismiss="modal"]', a.proxy(this.hide, this)), this.$dialog.on("mousedown.dismiss.bs.modal", function () {
	      d.$element.one("mouseup.dismiss.bs.modal", function (b) {
	        a(b.target).is(d.$element) && (d.ignoreBackdropClick = !0);
	      });
	    }), this.backdrop(function () {
	      var e = a.support.transition && d.$element.hasClass("fade");d.$element.parent().length || d.$element.appendTo(d.$body), d.$element.show().scrollTop(0), d.adjustDialog(), e && d.$element[0].offsetWidth, d.$element.addClass("in"), d.enforceFocus();var f = a.Event("shown.bs.modal", { relatedTarget: b });e ? d.$dialog.one("bsTransitionEnd", function () {
	        d.$element.trigger("focus").trigger(f);
	      }).emulateTransitionEnd(c.TRANSITION_DURATION) : d.$element.trigger("focus").trigger(f);
	    }));
	  }, c.prototype.hide = function (b) {
	    b && b.preventDefault(), b = a.Event("hide.bs.modal"), this.$element.trigger(b), this.isShown && !b.isDefaultPrevented() && (this.isShown = !1, this.escape(), this.resize(), a(document).off("focusin.bs.modal"), this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"), this.$dialog.off("mousedown.dismiss.bs.modal"), a.support.transition && this.$element.hasClass("fade") ? this.$element.one("bsTransitionEnd", a.proxy(this.hideModal, this)).emulateTransitionEnd(c.TRANSITION_DURATION) : this.hideModal());
	  }, c.prototype.enforceFocus = function () {
	    a(document).off("focusin.bs.modal").on("focusin.bs.modal", a.proxy(function (a) {
	      this.$element[0] === a.target || this.$element.has(a.target).length || this.$element.trigger("focus");
	    }, this));
	  }, c.prototype.escape = function () {
	    this.isShown && this.options.keyboard ? this.$element.on("keydown.dismiss.bs.modal", a.proxy(function (a) {
	      27 == a.which && this.hide();
	    }, this)) : this.isShown || this.$element.off("keydown.dismiss.bs.modal");
	  }, c.prototype.resize = function () {
	    this.isShown ? a(window).on("resize.bs.modal", a.proxy(this.handleUpdate, this)) : a(window).off("resize.bs.modal");
	  }, c.prototype.hideModal = function () {
	    var a = this;this.$element.hide(), this.backdrop(function () {
	      a.$body.removeClass("modal-open"), a.resetAdjustments(), a.resetScrollbar(), a.$element.trigger("hidden.bs.modal");
	    });
	  }, c.prototype.removeBackdrop = function () {
	    this.$backdrop && this.$backdrop.remove(), this.$backdrop = null;
	  }, c.prototype.backdrop = function (b) {
	    var d = this,
	        e = this.$element.hasClass("fade") ? "fade" : "";if (this.isShown && this.options.backdrop) {
	      var f = a.support.transition && e;if (this.$backdrop = a(document.createElement("div")).addClass("modal-backdrop " + e).appendTo(this.$body), this.$element.on("click.dismiss.bs.modal", a.proxy(function (a) {
	        return this.ignoreBackdropClick ? void (this.ignoreBackdropClick = !1) : void (a.target === a.currentTarget && ("static" == this.options.backdrop ? this.$element[0].focus() : this.hide()));
	      }, this)), f && this.$backdrop[0].offsetWidth, this.$backdrop.addClass("in"), !b) return;f ? this.$backdrop.one("bsTransitionEnd", b).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION) : b();
	    } else if (!this.isShown && this.$backdrop) {
	      this.$backdrop.removeClass("in");var g = function g() {
	        d.removeBackdrop(), b && b();
	      };a.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one("bsTransitionEnd", g).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION) : g();
	    } else b && b();
	  }, c.prototype.handleUpdate = function () {
	    this.adjustDialog();
	  }, c.prototype.adjustDialog = function () {
	    var a = this.$element[0].scrollHeight > document.documentElement.clientHeight;this.$element.css({ paddingLeft: !this.bodyIsOverflowing && a ? this.scrollbarWidth : "", paddingRight: this.bodyIsOverflowing && !a ? this.scrollbarWidth : "" });
	  }, c.prototype.resetAdjustments = function () {
	    this.$element.css({ paddingLeft: "", paddingRight: "" });
	  }, c.prototype.checkScrollbar = function () {
	    var a = window.innerWidth;if (!a) {
	      var b = document.documentElement.getBoundingClientRect();a = b.right - Math.abs(b.left);
	    }this.bodyIsOverflowing = document.body.clientWidth < a, this.scrollbarWidth = this.measureScrollbar();
	  }, c.prototype.setScrollbar = function () {
	    var a = parseInt(this.$body.css("padding-right") || 0, 10);this.originalBodyPad = document.body.style.paddingRight || "", this.bodyIsOverflowing && this.$body.css("padding-right", a + this.scrollbarWidth);
	  }, c.prototype.resetScrollbar = function () {
	    this.$body.css("padding-right", this.originalBodyPad);
	  }, c.prototype.measureScrollbar = function () {
	    var a = document.createElement("div");a.className = "modal-scrollbar-measure", this.$body.append(a);var b = a.offsetWidth - a.clientWidth;return this.$body[0].removeChild(a), b;
	  };var d = a.fn.modal;a.fn.modal = b, a.fn.modal.Constructor = c, a.fn.modal.noConflict = function () {
	    return a.fn.modal = d, this;
	  }, a(document).on("click.bs.modal.data-api", '[data-toggle="modal"]', function (c) {
	    var d = a(this),
	        e = d.attr("href"),
	        f = a(d.attr("data-target") || e && e.replace(/.*(?=#[^\s]+$)/, "")),
	        g = f.data("bs.modal") ? "toggle" : a.extend({ remote: !/#/.test(e) && e }, f.data(), d.data());d.is("a") && c.preventDefault(), f.one("show.bs.modal", function (a) {
	      a.isDefaultPrevented() || f.one("hidden.bs.modal", function () {
	        d.is(":visible") && d.trigger("focus");
	      });
	    }), b.call(f, g, this);
	  });
	}(jQuery), +function (a) {
	  "use strict";
	  function b(b) {
	    return this.each(function () {
	      var d = a(this),
	          e = d.data("bs.tooltip"),
	          f = "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && b;(e || !/destroy|hide/.test(b)) && (e || d.data("bs.tooltip", e = new c(this, f)), "string" == typeof b && e[b]());
	    });
	  }var c = function c(a, b) {
	    this.type = null, this.options = null, this.enabled = null, this.timeout = null, this.hoverState = null, this.$element = null, this.inState = null, this.init("tooltip", a, b);
	  };c.VERSION = "3.3.6", c.TRANSITION_DURATION = 150, c.DEFAULTS = { animation: !0, placement: "top", selector: !1, template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>', trigger: "hover focus", title: "", delay: 0, html: !1, container: !1, viewport: { selector: "body", padding: 0 } }, c.prototype.init = function (b, c, d) {
	    if (this.enabled = !0, this.type = b, this.$element = a(c), this.options = this.getOptions(d), this.$viewport = this.options.viewport && a(a.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : this.options.viewport.selector || this.options.viewport), this.inState = { click: !1, hover: !1, focus: !1 }, this.$element[0] instanceof document.constructor && !this.options.selector) throw new Error("`selector` option must be specified when initializing " + this.type + " on the window.document object!");for (var e = this.options.trigger.split(" "), f = e.length; f--;) {
	      var g = e[f];if ("click" == g) this.$element.on("click." + this.type, this.options.selector, a.proxy(this.toggle, this));else if ("manual" != g) {
	        var h = "hover" == g ? "mouseenter" : "focusin",
	            i = "hover" == g ? "mouseleave" : "focusout";this.$element.on(h + "." + this.type, this.options.selector, a.proxy(this.enter, this)), this.$element.on(i + "." + this.type, this.options.selector, a.proxy(this.leave, this));
	      }
	    }this.options.selector ? this._options = a.extend({}, this.options, { trigger: "manual", selector: "" }) : this.fixTitle();
	  }, c.prototype.getDefaults = function () {
	    return c.DEFAULTS;
	  }, c.prototype.getOptions = function (b) {
	    return b = a.extend({}, this.getDefaults(), this.$element.data(), b), b.delay && "number" == typeof b.delay && (b.delay = { show: b.delay, hide: b.delay }), b;
	  }, c.prototype.getDelegateOptions = function () {
	    var b = {},
	        c = this.getDefaults();return this._options && a.each(this._options, function (a, d) {
	      c[a] != d && (b[a] = d);
	    }), b;
	  }, c.prototype.enter = function (b) {
	    var c = b instanceof this.constructor ? b : a(b.currentTarget).data("bs." + this.type);return c || (c = new this.constructor(b.currentTarget, this.getDelegateOptions()), a(b.currentTarget).data("bs." + this.type, c)), b instanceof a.Event && (c.inState["focusin" == b.type ? "focus" : "hover"] = !0), c.tip().hasClass("in") || "in" == c.hoverState ? void (c.hoverState = "in") : (clearTimeout(c.timeout), c.hoverState = "in", c.options.delay && c.options.delay.show ? void (c.timeout = setTimeout(function () {
	      "in" == c.hoverState && c.show();
	    }, c.options.delay.show)) : c.show());
	  }, c.prototype.isInStateTrue = function () {
	    for (var a in this.inState) {
	      if (this.inState[a]) return !0;
	    }return !1;
	  }, c.prototype.leave = function (b) {
	    var c = b instanceof this.constructor ? b : a(b.currentTarget).data("bs." + this.type);return c || (c = new this.constructor(b.currentTarget, this.getDelegateOptions()), a(b.currentTarget).data("bs." + this.type, c)), b instanceof a.Event && (c.inState["focusout" == b.type ? "focus" : "hover"] = !1), c.isInStateTrue() ? void 0 : (clearTimeout(c.timeout), c.hoverState = "out", c.options.delay && c.options.delay.hide ? void (c.timeout = setTimeout(function () {
	      "out" == c.hoverState && c.hide();
	    }, c.options.delay.hide)) : c.hide());
	  }, c.prototype.show = function () {
	    var b = a.Event("show.bs." + this.type);if (this.hasContent() && this.enabled) {
	      this.$element.trigger(b);var d = a.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]);if (b.isDefaultPrevented() || !d) return;var e = this,
	          f = this.tip(),
	          g = this.getUID(this.type);this.setContent(), f.attr("id", g), this.$element.attr("aria-describedby", g), this.options.animation && f.addClass("fade");var h = "function" == typeof this.options.placement ? this.options.placement.call(this, f[0], this.$element[0]) : this.options.placement,
	          i = /\s?auto?\s?/i,
	          j = i.test(h);j && (h = h.replace(i, "") || "top"), f.detach().css({ top: 0, left: 0, display: "block" }).addClass(h).data("bs." + this.type, this), this.options.container ? f.appendTo(this.options.container) : f.insertAfter(this.$element), this.$element.trigger("inserted.bs." + this.type);var k = this.getPosition(),
	          l = f[0].offsetWidth,
	          m = f[0].offsetHeight;if (j) {
	        var n = h,
	            o = this.getPosition(this.$viewport);h = "bottom" == h && k.bottom + m > o.bottom ? "top" : "top" == h && k.top - m < o.top ? "bottom" : "right" == h && k.right + l > o.width ? "left" : "left" == h && k.left - l < o.left ? "right" : h, f.removeClass(n).addClass(h);
	      }var p = this.getCalculatedOffset(h, k, l, m);this.applyPlacement(p, h);var q = function q() {
	        var a = e.hoverState;e.$element.trigger("shown.bs." + e.type), e.hoverState = null, "out" == a && e.leave(e);
	      };a.support.transition && this.$tip.hasClass("fade") ? f.one("bsTransitionEnd", q).emulateTransitionEnd(c.TRANSITION_DURATION) : q();
	    }
	  }, c.prototype.applyPlacement = function (b, c) {
	    var d = this.tip(),
	        e = d[0].offsetWidth,
	        f = d[0].offsetHeight,
	        g = parseInt(d.css("margin-top"), 10),
	        h = parseInt(d.css("margin-left"), 10);isNaN(g) && (g = 0), isNaN(h) && (h = 0), b.top += g, b.left += h, a.offset.setOffset(d[0], a.extend({ using: function using(a) {
	        d.css({ top: Math.round(a.top), left: Math.round(a.left) });
	      } }, b), 0), d.addClass("in");var i = d[0].offsetWidth,
	        j = d[0].offsetHeight;"top" == c && j != f && (b.top = b.top + f - j);var k = this.getViewportAdjustedDelta(c, b, i, j);k.left ? b.left += k.left : b.top += k.top;var l = /top|bottom/.test(c),
	        m = l ? 2 * k.left - e + i : 2 * k.top - f + j,
	        n = l ? "offsetWidth" : "offsetHeight";d.offset(b), this.replaceArrow(m, d[0][n], l);
	  }, c.prototype.replaceArrow = function (a, b, c) {
	    this.arrow().css(c ? "left" : "top", 50 * (1 - a / b) + "%").css(c ? "top" : "left", "");
	  }, c.prototype.setContent = function () {
	    var a = this.tip(),
	        b = this.getTitle();a.find(".tooltip-inner")[this.options.html ? "html" : "text"](b), a.removeClass("fade in top bottom left right");
	  }, c.prototype.hide = function (b) {
	    function d() {
	      "in" != e.hoverState && f.detach(), e.$element.removeAttr("aria-describedby").trigger("hidden.bs." + e.type), b && b();
	    }var e = this,
	        f = a(this.$tip),
	        g = a.Event("hide.bs." + this.type);return this.$element.trigger(g), g.isDefaultPrevented() ? void 0 : (f.removeClass("in"), a.support.transition && f.hasClass("fade") ? f.one("bsTransitionEnd", d).emulateTransitionEnd(c.TRANSITION_DURATION) : d(), this.hoverState = null, this);
	  }, c.prototype.fixTitle = function () {
	    var a = this.$element;(a.attr("title") || "string" != typeof a.attr("data-original-title")) && a.attr("data-original-title", a.attr("title") || "").attr("title", "");
	  }, c.prototype.hasContent = function () {
	    return this.getTitle();
	  }, c.prototype.getPosition = function (b) {
	    b = b || this.$element;var c = b[0],
	        d = "BODY" == c.tagName,
	        e = c.getBoundingClientRect();null == e.width && (e = a.extend({}, e, { width: e.right - e.left, height: e.bottom - e.top }));var f = d ? { top: 0, left: 0 } : b.offset(),
	        g = { scroll: d ? document.documentElement.scrollTop || document.body.scrollTop : b.scrollTop() },
	        h = d ? { width: a(window).width(), height: a(window).height() } : null;return a.extend({}, e, g, h, f);
	  }, c.prototype.getCalculatedOffset = function (a, b, c, d) {
	    return "bottom" == a ? { top: b.top + b.height, left: b.left + b.width / 2 - c / 2 } : "top" == a ? { top: b.top - d, left: b.left + b.width / 2 - c / 2 } : "left" == a ? { top: b.top + b.height / 2 - d / 2, left: b.left - c } : { top: b.top + b.height / 2 - d / 2, left: b.left + b.width };
	  }, c.prototype.getViewportAdjustedDelta = function (a, b, c, d) {
	    var e = { top: 0, left: 0 };if (!this.$viewport) return e;var f = this.options.viewport && this.options.viewport.padding || 0,
	        g = this.getPosition(this.$viewport);if (/right|left/.test(a)) {
	      var h = b.top - f - g.scroll,
	          i = b.top + f - g.scroll + d;h < g.top ? e.top = g.top - h : i > g.top + g.height && (e.top = g.top + g.height - i);
	    } else {
	      var j = b.left - f,
	          k = b.left + f + c;j < g.left ? e.left = g.left - j : k > g.right && (e.left = g.left + g.width - k);
	    }return e;
	  }, c.prototype.getTitle = function () {
	    var a,
	        b = this.$element,
	        c = this.options;return a = b.attr("data-original-title") || ("function" == typeof c.title ? c.title.call(b[0]) : c.title);
	  }, c.prototype.getUID = function (a) {
	    do {
	      a += ~~(1e6 * Math.random());
	    } while (document.getElementById(a));return a;
	  }, c.prototype.tip = function () {
	    if (!this.$tip && (this.$tip = a(this.options.template), 1 != this.$tip.length)) throw new Error(this.type + " `template` option must consist of exactly 1 top-level element!");return this.$tip;
	  }, c.prototype.arrow = function () {
	    return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow");
	  }, c.prototype.enable = function () {
	    this.enabled = !0;
	  }, c.prototype.disable = function () {
	    this.enabled = !1;
	  }, c.prototype.toggleEnabled = function () {
	    this.enabled = !this.enabled;
	  }, c.prototype.toggle = function (b) {
	    var c = this;b && (c = a(b.currentTarget).data("bs." + this.type), c || (c = new this.constructor(b.currentTarget, this.getDelegateOptions()), a(b.currentTarget).data("bs." + this.type, c))), b ? (c.inState.click = !c.inState.click, c.isInStateTrue() ? c.enter(c) : c.leave(c)) : c.tip().hasClass("in") ? c.leave(c) : c.enter(c);
	  }, c.prototype.destroy = function () {
	    var a = this;clearTimeout(this.timeout), this.hide(function () {
	      a.$element.off("." + a.type).removeData("bs." + a.type), a.$tip && a.$tip.detach(), a.$tip = null, a.$arrow = null, a.$viewport = null;
	    });
	  };var d = a.fn.tooltip;a.fn.tooltip = b, a.fn.tooltip.Constructor = c, a.fn.tooltip.noConflict = function () {
	    return a.fn.tooltip = d, this;
	  };
	}(jQuery), +function (a) {
	  "use strict";
	  function b(b) {
	    return this.each(function () {
	      var d = a(this),
	          e = d.data("bs.popover"),
	          f = "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && b;(e || !/destroy|hide/.test(b)) && (e || d.data("bs.popover", e = new c(this, f)), "string" == typeof b && e[b]());
	    });
	  }var c = function c(a, b) {
	    this.init("popover", a, b);
	  };if (!a.fn.tooltip) throw new Error("Popover requires tooltip.js");c.VERSION = "3.3.6", c.DEFAULTS = a.extend({}, a.fn.tooltip.Constructor.DEFAULTS, { placement: "right", trigger: "click", content: "", template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>' }), c.prototype = a.extend({}, a.fn.tooltip.Constructor.prototype), c.prototype.constructor = c, c.prototype.getDefaults = function () {
	    return c.DEFAULTS;
	  }, c.prototype.setContent = function () {
	    var a = this.tip(),
	        b = this.getTitle(),
	        c = this.getContent();a.find(".popover-title")[this.options.html ? "html" : "text"](b), a.find(".popover-content").children().detach().end()[this.options.html ? "string" == typeof c ? "html" : "append" : "text"](c), a.removeClass("fade top bottom left right in"), a.find(".popover-title").html() || a.find(".popover-title").hide();
	  }, c.prototype.hasContent = function () {
	    return this.getTitle() || this.getContent();
	  }, c.prototype.getContent = function () {
	    var a = this.$element,
	        b = this.options;return a.attr("data-content") || ("function" == typeof b.content ? b.content.call(a[0]) : b.content);
	  }, c.prototype.arrow = function () {
	    return this.$arrow = this.$arrow || this.tip().find(".arrow");
	  };var d = a.fn.popover;a.fn.popover = b, a.fn.popover.Constructor = c, a.fn.popover.noConflict = function () {
	    return a.fn.popover = d, this;
	  };
	}(jQuery), +function (a) {
	  "use strict";
	  function b(c, d) {
	    this.$body = a(document.body), this.$scrollElement = a(a(c).is(document.body) ? window : c), this.options = a.extend({}, b.DEFAULTS, d), this.selector = (this.options.target || "") + " .nav li > a", this.offsets = [], this.targets = [], this.activeTarget = null, this.scrollHeight = 0, this.$scrollElement.on("scroll.bs.scrollspy", a.proxy(this.process, this)), this.refresh(), this.process();
	  }function c(c) {
	    return this.each(function () {
	      var d = a(this),
	          e = d.data("bs.scrollspy"),
	          f = "object" == (typeof c === "undefined" ? "undefined" : _typeof(c)) && c;e || d.data("bs.scrollspy", e = new b(this, f)), "string" == typeof c && e[c]();
	    });
	  }b.VERSION = "3.3.6", b.DEFAULTS = { offset: 10 }, b.prototype.getScrollHeight = function () {
	    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight);
	  }, b.prototype.refresh = function () {
	    var b = this,
	        c = "offset",
	        d = 0;this.offsets = [], this.targets = [], this.scrollHeight = this.getScrollHeight(), a.isWindow(this.$scrollElement[0]) || (c = "position", d = this.$scrollElement.scrollTop()), this.$body.find(this.selector).map(function () {
	      var b = a(this),
	          e = b.data("target") || b.attr("href"),
	          f = /^#./.test(e) && a(e);return f && f.length && f.is(":visible") && [[f[c]().top + d, e]] || null;
	    }).sort(function (a, b) {
	      return a[0] - b[0];
	    }).each(function () {
	      b.offsets.push(this[0]), b.targets.push(this[1]);
	    });
	  }, b.prototype.process = function () {
	    var a,
	        b = this.$scrollElement.scrollTop() + this.options.offset,
	        c = this.getScrollHeight(),
	        d = this.options.offset + c - this.$scrollElement.height(),
	        e = this.offsets,
	        f = this.targets,
	        g = this.activeTarget;if (this.scrollHeight != c && this.refresh(), b >= d) return g != (a = f[f.length - 1]) && this.activate(a);if (g && b < e[0]) return this.activeTarget = null, this.clear();for (a = e.length; a--;) {
	      g != f[a] && b >= e[a] && (void 0 === e[a + 1] || b < e[a + 1]) && this.activate(f[a]);
	    }
	  }, b.prototype.activate = function (b) {
	    this.activeTarget = b, this.clear();var c = this.selector + '[data-target="' + b + '"],' + this.selector + '[href="' + b + '"]',
	        d = a(c).parents("li").addClass("active");
	    d.parent(".dropdown-menu").length && (d = d.closest("li.dropdown").addClass("active")), d.trigger("activate.bs.scrollspy");
	  }, b.prototype.clear = function () {
	    a(this.selector).parentsUntil(this.options.target, ".active").removeClass("active");
	  };var d = a.fn.scrollspy;a.fn.scrollspy = c, a.fn.scrollspy.Constructor = b, a.fn.scrollspy.noConflict = function () {
	    return a.fn.scrollspy = d, this;
	  }, a(window).on("load.bs.scrollspy.data-api", function () {
	    a('[data-spy="scroll"]').each(function () {
	      var b = a(this);c.call(b, b.data());
	    });
	  });
	}(jQuery), +function (a) {
	  "use strict";
	  function b(b) {
	    return this.each(function () {
	      var d = a(this),
	          e = d.data("bs.tab");e || d.data("bs.tab", e = new c(this)), "string" == typeof b && e[b]();
	    });
	  }var c = function c(b) {
	    this.element = a(b);
	  };c.VERSION = "3.3.6", c.TRANSITION_DURATION = 150, c.prototype.show = function () {
	    var b = this.element,
	        c = b.closest("ul:not(.dropdown-menu)"),
	        d = b.data("target");if (d || (d = b.attr("href"), d = d && d.replace(/.*(?=#[^\s]*$)/, "")), !b.parent("li").hasClass("active")) {
	      var e = c.find(".active:last a"),
	          f = a.Event("hide.bs.tab", { relatedTarget: b[0] }),
	          g = a.Event("show.bs.tab", { relatedTarget: e[0] });if (e.trigger(f), b.trigger(g), !g.isDefaultPrevented() && !f.isDefaultPrevented()) {
	        var h = a(d);this.activate(b.closest("li"), c), this.activate(h, h.parent(), function () {
	          e.trigger({ type: "hidden.bs.tab", relatedTarget: b[0] }), b.trigger({ type: "shown.bs.tab", relatedTarget: e[0] });
	        });
	      }
	    }
	  }, c.prototype.activate = function (b, d, e) {
	    function f() {
	      g.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", !1), b.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded", !0), h ? (b[0].offsetWidth, b.addClass("in")) : b.removeClass("fade"), b.parent(".dropdown-menu").length && b.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", !0), e && e();
	    }var g = d.find("> .active"),
	        h = e && a.support.transition && (g.length && g.hasClass("fade") || !!d.find("> .fade").length);g.length && h ? g.one("bsTransitionEnd", f).emulateTransitionEnd(c.TRANSITION_DURATION) : f(), g.removeClass("in");
	  };var d = a.fn.tab;a.fn.tab = b, a.fn.tab.Constructor = c, a.fn.tab.noConflict = function () {
	    return a.fn.tab = d, this;
	  };var e = function e(c) {
	    c.preventDefault(), b.call(a(this), "show");
	  };a(document).on("click.bs.tab.data-api", '[data-toggle="tab"]', e).on("click.bs.tab.data-api", '[data-toggle="pill"]', e);
	}(jQuery), +function (a) {
	  "use strict";
	  function b(b) {
	    return this.each(function () {
	      var d = a(this),
	          e = d.data("bs.affix"),
	          f = "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && b;e || d.data("bs.affix", e = new c(this, f)), "string" == typeof b && e[b]();
	    });
	  }var c = function c(b, d) {
	    this.options = a.extend({}, c.DEFAULTS, d), this.$target = a(this.options.target).on("scroll.bs.affix.data-api", a.proxy(this.checkPosition, this)).on("click.bs.affix.data-api", a.proxy(this.checkPositionWithEventLoop, this)), this.$element = a(b), this.affixed = null, this.unpin = null, this.pinnedOffset = null, this.checkPosition();
	  };c.VERSION = "3.3.6", c.RESET = "affix affix-top affix-bottom", c.DEFAULTS = { offset: 0, target: window }, c.prototype.getState = function (a, b, c, d) {
	    var e = this.$target.scrollTop(),
	        f = this.$element.offset(),
	        g = this.$target.height();if (null != c && "top" == this.affixed) return c > e ? "top" : !1;if ("bottom" == this.affixed) return null != c ? e + this.unpin <= f.top ? !1 : "bottom" : a - d >= e + g ? !1 : "bottom";var h = null == this.affixed,
	        i = h ? e : f.top,
	        j = h ? g : b;return null != c && c >= e ? "top" : null != d && i + j >= a - d ? "bottom" : !1;
	  }, c.prototype.getPinnedOffset = function () {
	    if (this.pinnedOffset) return this.pinnedOffset;this.$element.removeClass(c.RESET).addClass("affix");var a = this.$target.scrollTop(),
	        b = this.$element.offset();return this.pinnedOffset = b.top - a;
	  }, c.prototype.checkPositionWithEventLoop = function () {
	    setTimeout(a.proxy(this.checkPosition, this), 1);
	  }, c.prototype.checkPosition = function () {
	    if (this.$element.is(":visible")) {
	      var b = this.$element.height(),
	          d = this.options.offset,
	          e = d.top,
	          f = d.bottom,
	          g = Math.max(a(document).height(), a(document.body).height());"object" != (typeof d === "undefined" ? "undefined" : _typeof(d)) && (f = e = d), "function" == typeof e && (e = d.top(this.$element)), "function" == typeof f && (f = d.bottom(this.$element));var h = this.getState(g, b, e, f);if (this.affixed != h) {
	        null != this.unpin && this.$element.css("top", "");var i = "affix" + (h ? "-" + h : ""),
	            j = a.Event(i + ".bs.affix");if (this.$element.trigger(j), j.isDefaultPrevented()) return;this.affixed = h, this.unpin = "bottom" == h ? this.getPinnedOffset() : null, this.$element.removeClass(c.RESET).addClass(i).trigger(i.replace("affix", "affixed") + ".bs.affix");
	      }"bottom" == h && this.$element.offset({ top: g - b - f });
	    }
	  };var d = a.fn.affix;a.fn.affix = b, a.fn.affix.Constructor = c, a.fn.affix.noConflict = function () {
	    return a.fn.affix = d, this;
	  }, a(window).on("load", function () {
	    a('[data-spy="affix"]').each(function () {
	      var c = a(this),
	          d = c.data();d.offset = d.offset || {}, null != d.offsetBottom && (d.offset.bottom = d.offsetBottom), null != d.offsetTop && (d.offset.top = d.offsetTop), b.call(c, d);
	    });
	  });
	}(jQuery);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["ko"] = __webpack_require__(9);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/*!
	 * Knockout JavaScript library v3.4.0
	 * (c) Steven Sanderson - http://knockoutjs.com/
	 * License: MIT (http://www.opensource.org/licenses/mit-license.php)
	 */(function(){var DEBUG=true;(function(undefined){// (0, eval)('this') is a robust way of getting a reference to the global object
	// For details, see http://stackoverflow.com/questions/14119988/return-this-0-evalthis/14120023#14120023
	var window=this||(0,eval)('this'),document=window['document'],navigator=window['navigator'],jQueryInstance=window["jQuery"],JSON=window["JSON"];(function(factory){// Support three module loading scenarios
	if("function"==='function'&&__webpack_require__(10)['amd']){// [1] AMD anonymous module
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports,__webpack_require__], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));}else if(( false?'undefined':_typeof(exports))==='object'&&( false?'undefined':_typeof(module))==='object'){// [2] CommonJS/Node.js
	factory(module['exports']||exports);// module.exports is for Node.js
	}else{// [3] No module loader (plain <script> tag) - put directly in global namespace
	factory(window['ko']={});}})(function(koExports,amdRequire){// Internally, all KO objects are attached to koExports (even the non-exported ones whose names will be minified by the closure compiler).
	// In the future, the following "ko" variable may be made distinct from "koExports" so that private objects are not externally reachable.
	var ko=typeof koExports!=='undefined'?koExports:{};// Google Closure Compiler helpers (used only to make the minified file smaller)
	ko.exportSymbol=function(koPath,object){var tokens=koPath.split(".");// In the future, "ko" may become distinct from "koExports" (so that non-exported objects are not reachable)
	// At that point, "target" would be set to: (typeof koExports !== "undefined" ? koExports : ko)
	var target=ko;for(var i=0;i<tokens.length-1;i++){target=target[tokens[i]];}target[tokens[tokens.length-1]]=object;};ko.exportProperty=function(owner,publicName,object){owner[publicName]=object;};ko.version="3.4.0";ko.exportSymbol('version',ko.version);// For any options that may affect various areas of Knockout and aren't directly associated with data binding.
	ko.options={'deferUpdates':false,'useOnlyNativeEvents':false};//ko.exportSymbol('options', ko.options);   // 'options' isn't minified
	ko.utils=function(){function objectForEach(obj,action){for(var prop in obj){if(obj.hasOwnProperty(prop)){action(prop,obj[prop]);}}}function extend(target,source){if(source){for(var prop in source){if(source.hasOwnProperty(prop)){target[prop]=source[prop];}}}return target;}function setPrototypeOf(obj,proto){obj.__proto__=proto;return obj;}var canSetPrototype={__proto__:[]}instanceof Array;var canUseSymbols=!DEBUG&&typeof Symbol==='function';// Represent the known event types in a compact way, then at runtime transform it into a hash with event name as key (for fast lookup)
	var knownEvents={},knownEventTypesByEventName={};var keyEventTypeName=navigator&&/Firefox\/2/i.test(navigator.userAgent)?'KeyboardEvent':'UIEvents';knownEvents[keyEventTypeName]=['keyup','keydown','keypress'];knownEvents['MouseEvents']=['click','dblclick','mousedown','mouseup','mousemove','mouseover','mouseout','mouseenter','mouseleave'];objectForEach(knownEvents,function(eventType,knownEventsForType){if(knownEventsForType.length){for(var i=0,j=knownEventsForType.length;i<j;i++){knownEventTypesByEventName[knownEventsForType[i]]=eventType;}}});var eventsThatMustBeRegisteredUsingAttachEvent={'propertychange':true};// Workaround for an IE9 issue - https://github.com/SteveSanderson/knockout/issues/406
	// Detect IE versions for bug workarounds (uses IE conditionals, not UA string, for robustness)
	// Note that, since IE 10 does not support conditional comments, the following logic only detects IE < 10.
	// Currently this is by design, since IE 10+ behaves correctly when treated as a standard browser.
	// If there is a future need to detect specific versions of IE10+, we will amend this.
	var ieVersion=document&&function(){var version=3,div=document.createElement('div'),iElems=div.getElementsByTagName('i');// Keep constructing conditional HTML blocks until we hit one that resolves to an empty fragment
	while(div.innerHTML='<!--[if gt IE '+ ++version+']><i></i><![endif]-->',iElems[0]){}return version>4?version:undefined;}();var isIe6=ieVersion===6,isIe7=ieVersion===7;function isClickOnCheckableElement(element,eventType){if(ko.utils.tagNameLower(element)!=="input"||!element.type)return false;if(eventType.toLowerCase()!="click")return false;var inputType=element.type;return inputType=="checkbox"||inputType=="radio";}// For details on the pattern for changing node classes
	// see: https://github.com/knockout/knockout/issues/1597
	var cssClassNameRegex=/\S+/g;function toggleDomNodeCssClass(node,classNames,shouldHaveClass){var addOrRemoveFn;if(classNames){if(_typeof(node.classList)==='object'){addOrRemoveFn=node.classList[shouldHaveClass?'add':'remove'];ko.utils.arrayForEach(classNames.match(cssClassNameRegex),function(className){addOrRemoveFn.call(node.classList,className);});}else if(typeof node.className['baseVal']==='string'){// SVG tag .classNames is an SVGAnimatedString instance
	toggleObjectClassPropertyString(node.className,'baseVal',classNames,shouldHaveClass);}else{// node.className ought to be a string.
	toggleObjectClassPropertyString(node,'className',classNames,shouldHaveClass);}}}function toggleObjectClassPropertyString(obj,prop,classNames,shouldHaveClass){// obj/prop is either a node/'className' or a SVGAnimatedString/'baseVal'.
	var currentClassNames=obj[prop].match(cssClassNameRegex)||[];ko.utils.arrayForEach(classNames.match(cssClassNameRegex),function(className){ko.utils.addOrRemoveItem(currentClassNames,className,shouldHaveClass);});obj[prop]=currentClassNames.join(" ");}return{fieldsIncludedWithJsonPost:['authenticity_token',/^__RequestVerificationToken(_.*)?$/],arrayForEach:function arrayForEach(array,action){for(var i=0,j=array.length;i<j;i++){action(array[i],i);}},arrayIndexOf:function arrayIndexOf(array,item){if(typeof Array.prototype.indexOf=="function")return Array.prototype.indexOf.call(array,item);for(var i=0,j=array.length;i<j;i++){if(array[i]===item)return i;}return-1;},arrayFirst:function arrayFirst(array,predicate,predicateOwner){for(var i=0,j=array.length;i<j;i++){if(predicate.call(predicateOwner,array[i],i))return array[i];}return null;},arrayRemoveItem:function arrayRemoveItem(array,itemToRemove){var index=ko.utils.arrayIndexOf(array,itemToRemove);if(index>0){array.splice(index,1);}else if(index===0){array.shift();}},arrayGetDistinctValues:function arrayGetDistinctValues(array){array=array||[];var result=[];for(var i=0,j=array.length;i<j;i++){if(ko.utils.arrayIndexOf(result,array[i])<0)result.push(array[i]);}return result;},arrayMap:function arrayMap(array,mapping){array=array||[];var result=[];for(var i=0,j=array.length;i<j;i++){result.push(mapping(array[i],i));}return result;},arrayFilter:function arrayFilter(array,predicate){array=array||[];var result=[];for(var i=0,j=array.length;i<j;i++){if(predicate(array[i],i))result.push(array[i]);}return result;},arrayPushAll:function arrayPushAll(array,valuesToPush){if(valuesToPush instanceof Array)array.push.apply(array,valuesToPush);else for(var i=0,j=valuesToPush.length;i<j;i++){array.push(valuesToPush[i]);}return array;},addOrRemoveItem:function addOrRemoveItem(array,value,included){var existingEntryIndex=ko.utils.arrayIndexOf(ko.utils.peekObservable(array),value);if(existingEntryIndex<0){if(included)array.push(value);}else{if(!included)array.splice(existingEntryIndex,1);}},canSetPrototype:canSetPrototype,extend:extend,setPrototypeOf:setPrototypeOf,setPrototypeOfOrExtend:canSetPrototype?setPrototypeOf:extend,objectForEach:objectForEach,objectMap:function objectMap(source,mapping){if(!source)return source;var target={};for(var prop in source){if(source.hasOwnProperty(prop)){target[prop]=mapping(source[prop],prop,source);}}return target;},emptyDomNode:function emptyDomNode(domNode){while(domNode.firstChild){ko.removeNode(domNode.firstChild);}},moveCleanedNodesToContainerElement:function moveCleanedNodesToContainerElement(nodes){// Ensure it's a real array, as we're about to reparent the nodes and
	// we don't want the underlying collection to change while we're doing that.
	var nodesArray=ko.utils.makeArray(nodes);var templateDocument=nodesArray[0]&&nodesArray[0].ownerDocument||document;var container=templateDocument.createElement('div');for(var i=0,j=nodesArray.length;i<j;i++){container.appendChild(ko.cleanNode(nodesArray[i]));}return container;},cloneNodes:function cloneNodes(nodesArray,shouldCleanNodes){for(var i=0,j=nodesArray.length,newNodesArray=[];i<j;i++){var clonedNode=nodesArray[i].cloneNode(true);newNodesArray.push(shouldCleanNodes?ko.cleanNode(clonedNode):clonedNode);}return newNodesArray;},setDomNodeChildren:function setDomNodeChildren(domNode,childNodes){ko.utils.emptyDomNode(domNode);if(childNodes){for(var i=0,j=childNodes.length;i<j;i++){domNode.appendChild(childNodes[i]);}}},replaceDomNodes:function replaceDomNodes(nodeToReplaceOrNodeArray,newNodesArray){var nodesToReplaceArray=nodeToReplaceOrNodeArray.nodeType?[nodeToReplaceOrNodeArray]:nodeToReplaceOrNodeArray;if(nodesToReplaceArray.length>0){var insertionPoint=nodesToReplaceArray[0];var parent=insertionPoint.parentNode;for(var i=0,j=newNodesArray.length;i<j;i++){parent.insertBefore(newNodesArray[i],insertionPoint);}for(var i=0,j=nodesToReplaceArray.length;i<j;i++){ko.removeNode(nodesToReplaceArray[i]);}}},fixUpContinuousNodeArray:function fixUpContinuousNodeArray(continuousNodeArray,parentNode){// Before acting on a set of nodes that were previously outputted by a template function, we have to reconcile
	// them against what is in the DOM right now. It may be that some of the nodes have already been removed, or that
	// new nodes might have been inserted in the middle, for example by a binding. Also, there may previously have been
	// leading comment nodes (created by rewritten string-based templates) that have since been removed during binding.
	// So, this function translates the old "map" output array into its best guess of the set of current DOM nodes.
	//
	// Rules:
	//   [A] Any leading nodes that have been removed should be ignored
	//       These most likely correspond to memoization nodes that were already removed during binding
	//       See https://github.com/knockout/knockout/pull/440
	//   [B] Any trailing nodes that have been remove should be ignored
	//       This prevents the code here from adding unrelated nodes to the array while processing rule [C]
	//       See https://github.com/knockout/knockout/pull/1903
	//   [C] We want to output a continuous series of nodes. So, ignore any nodes that have already been removed,
	//       and include any nodes that have been inserted among the previous collection
	if(continuousNodeArray.length){// The parent node can be a virtual element; so get the real parent node
	parentNode=parentNode.nodeType===8&&parentNode.parentNode||parentNode;// Rule [A]
	while(continuousNodeArray.length&&continuousNodeArray[0].parentNode!==parentNode){continuousNodeArray.splice(0,1);}// Rule [B]
	while(continuousNodeArray.length>1&&continuousNodeArray[continuousNodeArray.length-1].parentNode!==parentNode){continuousNodeArray.length--;}// Rule [C]
	if(continuousNodeArray.length>1){var current=continuousNodeArray[0],last=continuousNodeArray[continuousNodeArray.length-1];// Replace with the actual new continuous node set
	continuousNodeArray.length=0;while(current!==last){continuousNodeArray.push(current);current=current.nextSibling;}continuousNodeArray.push(last);}}return continuousNodeArray;},setOptionNodeSelectionState:function setOptionNodeSelectionState(optionNode,isSelected){// IE6 sometimes throws "unknown error" if you try to write to .selected directly, whereas Firefox struggles with setAttribute. Pick one based on browser.
	if(ieVersion<7)optionNode.setAttribute("selected",isSelected);else optionNode.selected=isSelected;},stringTrim:function stringTrim(string){return string===null||string===undefined?'':string.trim?string.trim():string.toString().replace(/^[\s\xa0]+|[\s\xa0]+$/g,'');},stringStartsWith:function stringStartsWith(string,startsWith){string=string||"";if(startsWith.length>string.length)return false;return string.substring(0,startsWith.length)===startsWith;},domNodeIsContainedBy:function domNodeIsContainedBy(node,containedByNode){if(node===containedByNode)return true;if(node.nodeType===11)return false;// Fixes issue #1162 - can't use node.contains for document fragments on IE8
	if(containedByNode.contains)return containedByNode.contains(node.nodeType===3?node.parentNode:node);if(containedByNode.compareDocumentPosition)return(containedByNode.compareDocumentPosition(node)&16)==16;while(node&&node!=containedByNode){node=node.parentNode;}return!!node;},domNodeIsAttachedToDocument:function domNodeIsAttachedToDocument(node){return ko.utils.domNodeIsContainedBy(node,node.ownerDocument.documentElement);},anyDomNodeIsAttachedToDocument:function anyDomNodeIsAttachedToDocument(nodes){return!!ko.utils.arrayFirst(nodes,ko.utils.domNodeIsAttachedToDocument);},tagNameLower:function tagNameLower(element){// For HTML elements, tagName will always be upper case; for XHTML elements, it'll be lower case.
	// Possible future optimization: If we know it's an element from an XHTML document (not HTML),
	// we don't need to do the .toLowerCase() as it will always be lower case anyway.
	return element&&element.tagName&&element.tagName.toLowerCase();},catchFunctionErrors:function catchFunctionErrors(delegate){return ko['onError']?function(){try{return delegate.apply(this,arguments);}catch(e){ko['onError']&&ko['onError'](e);throw e;}}:delegate;},setTimeout:function(_setTimeout){function setTimeout(_x,_x2){return _setTimeout.apply(this,arguments);}setTimeout.toString=function(){return _setTimeout.toString();};return setTimeout;}(function(handler,timeout){return setTimeout(ko.utils.catchFunctionErrors(handler),timeout);}),deferError:function deferError(error){setTimeout(function(){ko['onError']&&ko['onError'](error);throw error;},0);},registerEventHandler:function registerEventHandler(element,eventType,handler){var wrappedHandler=ko.utils.catchFunctionErrors(handler);var mustUseAttachEvent=ieVersion&&eventsThatMustBeRegisteredUsingAttachEvent[eventType];if(!ko.options['useOnlyNativeEvents']&&!mustUseAttachEvent&&jQueryInstance){jQueryInstance(element)['bind'](eventType,wrappedHandler);}else if(!mustUseAttachEvent&&typeof element.addEventListener=="function")element.addEventListener(eventType,wrappedHandler,false);else if(typeof element.attachEvent!="undefined"){var attachEventHandler=function attachEventHandler(event){wrappedHandler.call(element,event);},attachEventName="on"+eventType;element.attachEvent(attachEventName,attachEventHandler);// IE does not dispose attachEvent handlers automatically (unlike with addEventListener)
	// so to avoid leaks, we have to remove them manually. See bug #856
	ko.utils.domNodeDisposal.addDisposeCallback(element,function(){element.detachEvent(attachEventName,attachEventHandler);});}else throw new Error("Browser doesn't support addEventListener or attachEvent");},triggerEvent:function triggerEvent(element,eventType){if(!(element&&element.nodeType))throw new Error("element must be a DOM node when calling triggerEvent");// For click events on checkboxes and radio buttons, jQuery toggles the element checked state *after* the
	// event handler runs instead of *before*. (This was fixed in 1.9 for checkboxes but not for radio buttons.)
	// IE doesn't change the checked state when you trigger the click event using "fireEvent".
	// In both cases, we'll use the click method instead.
	var useClickWorkaround=isClickOnCheckableElement(element,eventType);if(!ko.options['useOnlyNativeEvents']&&jQueryInstance&&!useClickWorkaround){jQueryInstance(element)['trigger'](eventType);}else if(typeof document.createEvent=="function"){if(typeof element.dispatchEvent=="function"){var eventCategory=knownEventTypesByEventName[eventType]||"HTMLEvents";var event=document.createEvent(eventCategory);event.initEvent(eventType,true,true,window,0,0,0,0,0,false,false,false,false,0,element);element.dispatchEvent(event);}else throw new Error("The supplied element doesn't support dispatchEvent");}else if(useClickWorkaround&&element.click){element.click();}else if(typeof element.fireEvent!="undefined"){element.fireEvent("on"+eventType);}else{throw new Error("Browser doesn't support triggering events");}},unwrapObservable:function unwrapObservable(value){return ko.isObservable(value)?value():value;},peekObservable:function peekObservable(value){return ko.isObservable(value)?value.peek():value;},toggleDomNodeCssClass:toggleDomNodeCssClass,setTextContent:function setTextContent(element,textContent){var value=ko.utils.unwrapObservable(textContent);if(value===null||value===undefined)value="";// We need there to be exactly one child: a text node.
	// If there are no children, more than one, or if it's not a text node,
	// we'll clear everything and create a single text node.
	var innerTextNode=ko.virtualElements.firstChild(element);if(!innerTextNode||innerTextNode.nodeType!=3||ko.virtualElements.nextSibling(innerTextNode)){ko.virtualElements.setDomNodeChildren(element,[element.ownerDocument.createTextNode(value)]);}else{innerTextNode.data=value;}ko.utils.forceRefresh(element);},setElementName:function setElementName(element,name){element.name=name;// Workaround IE 6/7 issue
	// - https://github.com/SteveSanderson/knockout/issues/197
	// - http://www.matts411.com/post/setting_the_name_attribute_in_ie_dom/
	if(ieVersion<=7){try{element.mergeAttributes(document.createElement("<input name='"+element.name+"'/>"),false);}catch(e){}// For IE9 with doc mode "IE9 Standards" and browser mode "IE9 Compatibility View"
	}},forceRefresh:function forceRefresh(node){// Workaround for an IE9 rendering bug - https://github.com/SteveSanderson/knockout/issues/209
	if(ieVersion>=9){// For text nodes and comment nodes (most likely virtual elements), we will have to refresh the container
	var elem=node.nodeType==1?node:node.parentNode;if(elem.style)elem.style.zoom=elem.style.zoom;}},ensureSelectElementIsRenderedCorrectly:function ensureSelectElementIsRenderedCorrectly(selectElement){// Workaround for IE9 rendering bug - it doesn't reliably display all the text in dynamically-added select boxes unless you force it to re-render by updating the width.
	// (See https://github.com/SteveSanderson/knockout/issues/312, http://stackoverflow.com/questions/5908494/select-only-shows-first-char-of-selected-option)
	// Also fixes IE7 and IE8 bug that causes selects to be zero width if enclosed by 'if' or 'with'. (See issue #839)
	if(ieVersion){var originalWidth=selectElement.style.width;selectElement.style.width=0;selectElement.style.width=originalWidth;}},range:function range(min,max){min=ko.utils.unwrapObservable(min);max=ko.utils.unwrapObservable(max);var result=[];for(var i=min;i<=max;i++){result.push(i);}return result;},makeArray:function makeArray(arrayLikeObject){var result=[];for(var i=0,j=arrayLikeObject.length;i<j;i++){result.push(arrayLikeObject[i]);};return result;},createSymbolOrString:function createSymbolOrString(identifier){return canUseSymbols?Symbol(identifier):identifier;},isIe6:isIe6,isIe7:isIe7,ieVersion:ieVersion,getFormFields:function getFormFields(form,fieldName){var fields=ko.utils.makeArray(form.getElementsByTagName("input")).concat(ko.utils.makeArray(form.getElementsByTagName("textarea")));var isMatchingField=typeof fieldName=='string'?function(field){return field.name===fieldName;}:function(field){return fieldName.test(field.name);};// Treat fieldName as regex or object containing predicate
	var matches=[];for(var i=fields.length-1;i>=0;i--){if(isMatchingField(fields[i]))matches.push(fields[i]);};return matches;},parseJson:function parseJson(jsonString){if(typeof jsonString=="string"){jsonString=ko.utils.stringTrim(jsonString);if(jsonString){if(JSON&&JSON.parse)// Use native parsing where available
	return JSON.parse(jsonString);return new Function("return "+jsonString)();// Fallback on less safe parsing for older browsers
	}}return null;},stringifyJson:function stringifyJson(data,replacer,space){// replacer and space are optional
	if(!JSON||!JSON.stringify)throw new Error("Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js");return JSON.stringify(ko.utils.unwrapObservable(data),replacer,space);},postJson:function postJson(urlOrForm,data,options){options=options||{};var params=options['params']||{};var includeFields=options['includeFields']||this.fieldsIncludedWithJsonPost;var url=urlOrForm;// If we were given a form, use its 'action' URL and pick out any requested field values
	if((typeof urlOrForm==='undefined'?'undefined':_typeof(urlOrForm))=='object'&&ko.utils.tagNameLower(urlOrForm)==="form"){var originalForm=urlOrForm;url=originalForm.action;for(var i=includeFields.length-1;i>=0;i--){var fields=ko.utils.getFormFields(originalForm,includeFields[i]);for(var j=fields.length-1;j>=0;j--){params[fields[j].name]=fields[j].value;}}}data=ko.utils.unwrapObservable(data);var form=document.createElement("form");form.style.display="none";form.action=url;form.method="post";for(var key in data){// Since 'data' this is a model object, we include all properties including those inherited from its prototype
	var input=document.createElement("input");input.type="hidden";input.name=key;input.value=ko.utils.stringifyJson(ko.utils.unwrapObservable(data[key]));form.appendChild(input);}objectForEach(params,function(key,value){var input=document.createElement("input");input.type="hidden";input.name=key;input.value=value;form.appendChild(input);});document.body.appendChild(form);options['submitter']?options['submitter'](form):form.submit();setTimeout(function(){form.parentNode.removeChild(form);},0);}};}();ko.exportSymbol('utils',ko.utils);ko.exportSymbol('utils.arrayForEach',ko.utils.arrayForEach);ko.exportSymbol('utils.arrayFirst',ko.utils.arrayFirst);ko.exportSymbol('utils.arrayFilter',ko.utils.arrayFilter);ko.exportSymbol('utils.arrayGetDistinctValues',ko.utils.arrayGetDistinctValues);ko.exportSymbol('utils.arrayIndexOf',ko.utils.arrayIndexOf);ko.exportSymbol('utils.arrayMap',ko.utils.arrayMap);ko.exportSymbol('utils.arrayPushAll',ko.utils.arrayPushAll);ko.exportSymbol('utils.arrayRemoveItem',ko.utils.arrayRemoveItem);ko.exportSymbol('utils.extend',ko.utils.extend);ko.exportSymbol('utils.fieldsIncludedWithJsonPost',ko.utils.fieldsIncludedWithJsonPost);ko.exportSymbol('utils.getFormFields',ko.utils.getFormFields);ko.exportSymbol('utils.peekObservable',ko.utils.peekObservable);ko.exportSymbol('utils.postJson',ko.utils.postJson);ko.exportSymbol('utils.parseJson',ko.utils.parseJson);ko.exportSymbol('utils.registerEventHandler',ko.utils.registerEventHandler);ko.exportSymbol('utils.stringifyJson',ko.utils.stringifyJson);ko.exportSymbol('utils.range',ko.utils.range);ko.exportSymbol('utils.toggleDomNodeCssClass',ko.utils.toggleDomNodeCssClass);ko.exportSymbol('utils.triggerEvent',ko.utils.triggerEvent);ko.exportSymbol('utils.unwrapObservable',ko.utils.unwrapObservable);ko.exportSymbol('utils.objectForEach',ko.utils.objectForEach);ko.exportSymbol('utils.addOrRemoveItem',ko.utils.addOrRemoveItem);ko.exportSymbol('utils.setTextContent',ko.utils.setTextContent);ko.exportSymbol('unwrap',ko.utils.unwrapObservable);// Convenient shorthand, because this is used so commonly
	if(!Function.prototype['bind']){// Function.prototype.bind is a standard part of ECMAScript 5th Edition (December 2009, http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf)
	// In case the browser doesn't implement it natively, provide a JavaScript implementation. This implementation is based on the one in prototype.js
	Function.prototype['bind']=function(object){var originalFunction=this;if(arguments.length===1){return function(){return originalFunction.apply(object,arguments);};}else{var partialArgs=Array.prototype.slice.call(arguments,1);return function(){var args=partialArgs.slice(0);args.push.apply(args,arguments);return originalFunction.apply(object,args);};}};}ko.utils.domData=new function(){var uniqueId=0;var dataStoreKeyExpandoPropertyName="__ko__"+new Date().getTime();var dataStore={};function getAll(node,createIfNotFound){var dataStoreKey=node[dataStoreKeyExpandoPropertyName];var hasExistingDataStore=dataStoreKey&&dataStoreKey!=="null"&&dataStore[dataStoreKey];if(!hasExistingDataStore){if(!createIfNotFound)return undefined;dataStoreKey=node[dataStoreKeyExpandoPropertyName]="ko"+uniqueId++;dataStore[dataStoreKey]={};}return dataStore[dataStoreKey];}return{get:function get(node,key){var allDataForNode=getAll(node,false);return allDataForNode===undefined?undefined:allDataForNode[key];},set:function set(node,key,value){if(value===undefined){// Make sure we don't actually create a new domData key if we are actually deleting a value
	if(getAll(node,false)===undefined)return;}var allDataForNode=getAll(node,true);allDataForNode[key]=value;},clear:function clear(node){var dataStoreKey=node[dataStoreKeyExpandoPropertyName];if(dataStoreKey){delete dataStore[dataStoreKey];node[dataStoreKeyExpandoPropertyName]=null;return true;// Exposing "did clean" flag purely so specs can infer whether things have been cleaned up as intended
	}return false;},nextKey:function nextKey(){return uniqueId++ +dataStoreKeyExpandoPropertyName;}};}();ko.exportSymbol('utils.domData',ko.utils.domData);ko.exportSymbol('utils.domData.clear',ko.utils.domData.clear);// Exporting only so specs can clear up after themselves fully
	ko.utils.domNodeDisposal=new function(){var domDataKey=ko.utils.domData.nextKey();var cleanableNodeTypes={1:true,8:true,9:true};// Element, Comment, Document
	var cleanableNodeTypesWithDescendants={1:true,9:true};// Element, Document
	function getDisposeCallbacksCollection(node,createIfNotFound){var allDisposeCallbacks=ko.utils.domData.get(node,domDataKey);if(allDisposeCallbacks===undefined&&createIfNotFound){allDisposeCallbacks=[];ko.utils.domData.set(node,domDataKey,allDisposeCallbacks);}return allDisposeCallbacks;}function destroyCallbacksCollection(node){ko.utils.domData.set(node,domDataKey,undefined);}function cleanSingleNode(node){// Run all the dispose callbacks
	var callbacks=getDisposeCallbacksCollection(node,false);if(callbacks){callbacks=callbacks.slice(0);// Clone, as the array may be modified during iteration (typically, callbacks will remove themselves)
	for(var i=0;i<callbacks.length;i++){callbacks[i](node);}}// Erase the DOM data
	ko.utils.domData.clear(node);// Perform cleanup needed by external libraries (currently only jQuery, but can be extended)
	ko.utils.domNodeDisposal["cleanExternalData"](node);// Clear any immediate-child comment nodes, as these wouldn't have been found by
	// node.getElementsByTagName("*") in cleanNode() (comment nodes aren't elements)
	if(cleanableNodeTypesWithDescendants[node.nodeType])cleanImmediateCommentTypeChildren(node);}function cleanImmediateCommentTypeChildren(nodeWithChildren){var child,nextChild=nodeWithChildren.firstChild;while(child=nextChild){nextChild=child.nextSibling;if(child.nodeType===8)cleanSingleNode(child);}}return{addDisposeCallback:function addDisposeCallback(node,callback){if(typeof callback!="function")throw new Error("Callback must be a function");getDisposeCallbacksCollection(node,true).push(callback);},removeDisposeCallback:function removeDisposeCallback(node,callback){var callbacksCollection=getDisposeCallbacksCollection(node,false);if(callbacksCollection){ko.utils.arrayRemoveItem(callbacksCollection,callback);if(callbacksCollection.length==0)destroyCallbacksCollection(node);}},cleanNode:function cleanNode(node){// First clean this node, where applicable
	if(cleanableNodeTypes[node.nodeType]){cleanSingleNode(node);// ... then its descendants, where applicable
	if(cleanableNodeTypesWithDescendants[node.nodeType]){// Clone the descendants list in case it changes during iteration
	var descendants=[];ko.utils.arrayPushAll(descendants,node.getElementsByTagName("*"));for(var i=0,j=descendants.length;i<j;i++){cleanSingleNode(descendants[i]);}}}return node;},removeNode:function removeNode(node){ko.cleanNode(node);if(node.parentNode)node.parentNode.removeChild(node);},"cleanExternalData":function cleanExternalData(node){// Special support for jQuery here because it's so commonly used.
	// Many jQuery plugins (including jquery.tmpl) store data using jQuery's equivalent of domData
	// so notify it to tear down any resources associated with the node & descendants here.
	if(jQueryInstance&&typeof jQueryInstance['cleanData']=="function")jQueryInstance['cleanData']([node]);}};}();ko.cleanNode=ko.utils.domNodeDisposal.cleanNode;// Shorthand name for convenience
	ko.removeNode=ko.utils.domNodeDisposal.removeNode;// Shorthand name for convenience
	ko.exportSymbol('cleanNode',ko.cleanNode);ko.exportSymbol('removeNode',ko.removeNode);ko.exportSymbol('utils.domNodeDisposal',ko.utils.domNodeDisposal);ko.exportSymbol('utils.domNodeDisposal.addDisposeCallback',ko.utils.domNodeDisposal.addDisposeCallback);ko.exportSymbol('utils.domNodeDisposal.removeDisposeCallback',ko.utils.domNodeDisposal.removeDisposeCallback);(function(){var none=[0,"",""],table=[1,"<table>","</table>"],tbody=[2,"<table><tbody>","</tbody></table>"],tr=[3,"<table><tbody><tr>","</tr></tbody></table>"],select=[1,"<select multiple='multiple'>","</select>"],lookup={'thead':table,'tbody':table,'tfoot':table,'tr':tbody,'td':tr,'th':tr,'option':select,'optgroup':select},// This is needed for old IE if you're *not* using either jQuery or innerShiv. Doesn't affect other cases.
	mayRequireCreateElementHack=ko.utils.ieVersion<=8;function getWrap(tags){var m=tags.match(/^<([a-z]+)[ >]/);return m&&lookup[m[1]]||none;}function simpleHtmlParse(html,documentContext){documentContext||(documentContext=document);var windowContext=documentContext['parentWindow']||documentContext['defaultView']||window;// Based on jQuery's "clean" function, but only accounting for table-related elements.
	// If you have referenced jQuery, this won't be used anyway - KO will use jQuery's "clean" function directly
	// Note that there's still an issue in IE < 9 whereby it will discard comment nodes that are the first child of
	// a descendant node. For example: "<div><!-- mycomment -->abc</div>" will get parsed as "<div>abc</div>"
	// This won't affect anyone who has referenced jQuery, and there's always the workaround of inserting a dummy node
	// (possibly a text node) in front of the comment. So, KO does not attempt to workaround this IE issue automatically at present.
	// Trim whitespace, otherwise indexOf won't work as expected
	var tags=ko.utils.stringTrim(html).toLowerCase(),div=documentContext.createElement("div"),wrap=getWrap(tags),depth=wrap[0];// Go to html and back, then peel off extra wrappers
	// Note that we always prefix with some dummy text, because otherwise, IE<9 will strip out leading comment nodes in descendants. Total madness.
	var markup="ignored<div>"+wrap[1]+html+wrap[2]+"</div>";if(typeof windowContext['innerShiv']=="function"){// Note that innerShiv is deprecated in favour of html5shiv. We should consider adding
	// support for html5shiv (except if no explicit support is needed, e.g., if html5shiv
	// somehow shims the native APIs so it just works anyway)
	div.appendChild(windowContext['innerShiv'](markup));}else{if(mayRequireCreateElementHack){// The document.createElement('my-element') trick to enable custom elements in IE6-8
	// only works if we assign innerHTML on an element associated with that document.
	documentContext.appendChild(div);}div.innerHTML=markup;if(mayRequireCreateElementHack){div.parentNode.removeChild(div);}}// Move to the right depth
	while(depth--){div=div.lastChild;}return ko.utils.makeArray(div.lastChild.childNodes);}function jQueryHtmlParse(html,documentContext){// jQuery's "parseHTML" function was introduced in jQuery 1.8.0 and is a documented public API.
	if(jQueryInstance['parseHTML']){return jQueryInstance['parseHTML'](html,documentContext)||[];// Ensure we always return an array and never null
	}else{// For jQuery < 1.8.0, we fall back on the undocumented internal "clean" function.
	var elems=jQueryInstance['clean']([html],documentContext);// As of jQuery 1.7.1, jQuery parses the HTML by appending it to some dummy parent nodes held in an in-memory document fragment.
	// Unfortunately, it never clears the dummy parent nodes from the document fragment, so it leaks memory over time.
	// Fix this by finding the top-most dummy parent element, and detaching it from its owner fragment.
	if(elems&&elems[0]){// Find the top-most parent element that's a direct child of a document fragment
	var elem=elems[0];while(elem.parentNode&&elem.parentNode.nodeType!==11/* i.e., DocumentFragment */){elem=elem.parentNode;}// ... then detach it
	if(elem.parentNode)elem.parentNode.removeChild(elem);}return elems;}}ko.utils.parseHtmlFragment=function(html,documentContext){return jQueryInstance?jQueryHtmlParse(html,documentContext):// As below, benefit from jQuery's optimisations where possible
	simpleHtmlParse(html,documentContext);// ... otherwise, this simple logic will do in most common cases.
	};ko.utils.setHtml=function(node,html){ko.utils.emptyDomNode(node);// There's no legitimate reason to display a stringified observable without unwrapping it, so we'll unwrap it
	html=ko.utils.unwrapObservable(html);if(html!==null&&html!==undefined){if(typeof html!='string')html=html.toString();// jQuery contains a lot of sophisticated code to parse arbitrary HTML fragments,
	// for example <tr> elements which are not normally allowed to exist on their own.
	// If you've referenced jQuery we'll use that rather than duplicating its code.
	if(jQueryInstance){jQueryInstance(node)['html'](html);}else{// ... otherwise, use KO's own parsing logic.
	var parsedNodes=ko.utils.parseHtmlFragment(html,node.ownerDocument);for(var i=0;i<parsedNodes.length;i++){node.appendChild(parsedNodes[i]);}}}};})();ko.exportSymbol('utils.parseHtmlFragment',ko.utils.parseHtmlFragment);ko.exportSymbol('utils.setHtml',ko.utils.setHtml);ko.memoization=function(){var memos={};function randomMax8HexChars(){return((1+Math.random())*0x100000000|0).toString(16).substring(1);}function generateRandomId(){return randomMax8HexChars()+randomMax8HexChars();}function findMemoNodes(rootNode,appendToArray){if(!rootNode)return;if(rootNode.nodeType==8){var memoId=ko.memoization.parseMemoText(rootNode.nodeValue);if(memoId!=null)appendToArray.push({domNode:rootNode,memoId:memoId});}else if(rootNode.nodeType==1){for(var i=0,childNodes=rootNode.childNodes,j=childNodes.length;i<j;i++){findMemoNodes(childNodes[i],appendToArray);}}}return{memoize:function memoize(callback){if(typeof callback!="function")throw new Error("You can only pass a function to ko.memoization.memoize()");var memoId=generateRandomId();memos[memoId]=callback;return"<!--[ko_memo:"+memoId+"]-->";},unmemoize:function unmemoize(memoId,callbackParams){var callback=memos[memoId];if(callback===undefined)throw new Error("Couldn't find any memo with ID "+memoId+". Perhaps it's already been unmemoized.");try{callback.apply(null,callbackParams||[]);return true;}finally{delete memos[memoId];}},unmemoizeDomNodeAndDescendants:function unmemoizeDomNodeAndDescendants(domNode,extraCallbackParamsArray){var memos=[];findMemoNodes(domNode,memos);for(var i=0,j=memos.length;i<j;i++){var node=memos[i].domNode;var combinedParams=[node];if(extraCallbackParamsArray)ko.utils.arrayPushAll(combinedParams,extraCallbackParamsArray);ko.memoization.unmemoize(memos[i].memoId,combinedParams);node.nodeValue="";// Neuter this node so we don't try to unmemoize it again
	if(node.parentNode)node.parentNode.removeChild(node);// If possible, erase it totally (not always possible - someone else might just hold a reference to it then call unmemoizeDomNodeAndDescendants again)
	}},parseMemoText:function parseMemoText(memoText){var match=memoText.match(/^\[ko_memo\:(.*?)\]$/);return match?match[1]:null;}};}();ko.exportSymbol('memoization',ko.memoization);ko.exportSymbol('memoization.memoize',ko.memoization.memoize);ko.exportSymbol('memoization.unmemoize',ko.memoization.unmemoize);ko.exportSymbol('memoization.parseMemoText',ko.memoization.parseMemoText);ko.exportSymbol('memoization.unmemoizeDomNodeAndDescendants',ko.memoization.unmemoizeDomNodeAndDescendants);ko.tasks=function(){var scheduler,taskQueue=[],taskQueueLength=0,nextHandle=1,nextIndexToProcess=0;if(window['MutationObserver']){// Chrome 27+, Firefox 14+, IE 11+, Opera 15+, Safari 6.1+
	// From https://github.com/petkaantonov/bluebird * Copyright (c) 2014 Petka Antonov * License: MIT
	scheduler=function(callback){var div=document.createElement("div");new MutationObserver(callback).observe(div,{attributes:true});return function(){div.classList.toggle("foo");};}(scheduledProcess);}else if(document&&"onreadystatechange"in document.createElement("script")){// IE 6-10
	// From https://github.com/YuzuJS/setImmediate * Copyright (c) 2012 Barnesandnoble.com, llc, Donavon West, and Domenic Denicola * License: MIT
	scheduler=function scheduler(callback){var script=document.createElement("script");script.onreadystatechange=function(){script.onreadystatechange=null;document.documentElement.removeChild(script);script=null;callback();};document.documentElement.appendChild(script);};}else{scheduler=function scheduler(callback){setTimeout(callback,0);};}function processTasks(){if(taskQueueLength){// Each mark represents the end of a logical group of tasks and the number of these groups is
	// limited to prevent unchecked recursion.
	var mark=taskQueueLength,countMarks=0;// nextIndexToProcess keeps track of where we are in the queue; processTasks can be called recursively without issue
	for(var task;nextIndexToProcess<taskQueueLength;){if(task=taskQueue[nextIndexToProcess++]){if(nextIndexToProcess>mark){if(++countMarks>=5000){nextIndexToProcess=taskQueueLength;// skip all tasks remaining in the queue since any of them could be causing the recursion
	ko.utils.deferError(Error("'Too much recursion' after processing "+countMarks+" task groups."));break;}mark=taskQueueLength;}try{task();}catch(ex){ko.utils.deferError(ex);}}}}}function scheduledProcess(){processTasks();// Reset the queue
	nextIndexToProcess=taskQueueLength=taskQueue.length=0;}function scheduleTaskProcessing(){ko.tasks['scheduler'](scheduledProcess);}var tasks={'scheduler':scheduler,// Allow overriding the scheduler
	schedule:function schedule(func){if(!taskQueueLength){scheduleTaskProcessing();}taskQueue[taskQueueLength++]=func;return nextHandle++;},cancel:function cancel(handle){var index=handle-(nextHandle-taskQueueLength);if(index>=nextIndexToProcess&&index<taskQueueLength){taskQueue[index]=null;}},// For testing only: reset the queue and return the previous queue length
	'resetForTesting':function resetForTesting(){var length=taskQueueLength-nextIndexToProcess;nextIndexToProcess=taskQueueLength=taskQueue.length=0;return length;},runEarly:processTasks};return tasks;}();ko.exportSymbol('tasks',ko.tasks);ko.exportSymbol('tasks.schedule',ko.tasks.schedule);//ko.exportSymbol('tasks.cancel', ko.tasks.cancel);  "cancel" isn't minified
	ko.exportSymbol('tasks.runEarly',ko.tasks.runEarly);ko.extenders={'throttle':function throttle(target,timeout){// Throttling means two things:
	// (1) For dependent observables, we throttle *evaluations* so that, no matter how fast its dependencies
	//     notify updates, the target doesn't re-evaluate (and hence doesn't notify) faster than a certain rate
	target['throttleEvaluation']=timeout;// (2) For writable targets (observables, or writable dependent observables), we throttle *writes*
	//     so the target cannot change value synchronously or faster than a certain rate
	var writeTimeoutInstance=null;return ko.dependentObservable({'read':target,'write':function write(value){clearTimeout(writeTimeoutInstance);writeTimeoutInstance=ko.utils.setTimeout(function(){target(value);},timeout);}});},'rateLimit':function rateLimit(target,options){var timeout,method,limitFunction;if(typeof options=='number'){timeout=options;}else{timeout=options['timeout'];method=options['method'];}// rateLimit supersedes deferred updates
	target._deferUpdates=false;limitFunction=method=='notifyWhenChangesStop'?debounce:throttle;target.limit(function(callback){return limitFunction(callback,timeout);});},'deferred':function deferred(target,options){if(options!==true){throw new Error('The \'deferred\' extender only accepts the value \'true\', because it is not supported to turn deferral off once enabled.');}if(!target._deferUpdates){target._deferUpdates=true;target.limit(function(callback){var handle;return function(){ko.tasks.cancel(handle);handle=ko.tasks.schedule(callback);target['notifySubscribers'](undefined,'dirty');};});}},'notify':function notify(target,notifyWhen){target["equalityComparer"]=notifyWhen=="always"?null:// null equalityComparer means to always notify
	valuesArePrimitiveAndEqual;}};var primitiveTypes={'undefined':1,'boolean':1,'number':1,'string':1};function valuesArePrimitiveAndEqual(a,b){var oldValueIsPrimitive=a===null||(typeof a==='undefined'?'undefined':_typeof(a))in primitiveTypes;return oldValueIsPrimitive?a===b:false;}function throttle(callback,timeout){var timeoutInstance;return function(){if(!timeoutInstance){timeoutInstance=ko.utils.setTimeout(function(){timeoutInstance=undefined;callback();},timeout);}};}function debounce(callback,timeout){var timeoutInstance;return function(){clearTimeout(timeoutInstance);timeoutInstance=ko.utils.setTimeout(callback,timeout);};}function applyExtenders(requestedExtenders){var target=this;if(requestedExtenders){ko.utils.objectForEach(requestedExtenders,function(key,value){var extenderHandler=ko.extenders[key];if(typeof extenderHandler=='function'){target=extenderHandler(target,value)||target;}});}return target;}ko.exportSymbol('extenders',ko.extenders);ko.subscription=function(target,callback,disposeCallback){this._target=target;this.callback=callback;this.disposeCallback=disposeCallback;this.isDisposed=false;ko.exportProperty(this,'dispose',this.dispose);};ko.subscription.prototype.dispose=function(){this.isDisposed=true;this.disposeCallback();};ko.subscribable=function(){ko.utils.setPrototypeOfOrExtend(this,ko_subscribable_fn);ko_subscribable_fn.init(this);};var defaultEvent="change";// Moved out of "limit" to avoid the extra closure
	function limitNotifySubscribers(value,event){if(!event||event===defaultEvent){this._limitChange(value);}else if(event==='beforeChange'){this._limitBeforeChange(value);}else{this._origNotifySubscribers(value,event);}}var ko_subscribable_fn={init:function init(instance){instance._subscriptions={};instance._versionNumber=1;},subscribe:function subscribe(callback,callbackTarget,event){var self=this;event=event||defaultEvent;var boundCallback=callbackTarget?callback.bind(callbackTarget):callback;var subscription=new ko.subscription(self,boundCallback,function(){ko.utils.arrayRemoveItem(self._subscriptions[event],subscription);if(self.afterSubscriptionRemove)self.afterSubscriptionRemove(event);});if(self.beforeSubscriptionAdd)self.beforeSubscriptionAdd(event);if(!self._subscriptions[event])self._subscriptions[event]=[];self._subscriptions[event].push(subscription);return subscription;},"notifySubscribers":function notifySubscribers(valueToNotify,event){event=event||defaultEvent;if(event===defaultEvent){this.updateVersion();}if(this.hasSubscriptionsForEvent(event)){try{ko.dependencyDetection.begin();// Begin suppressing dependency detection (by setting the top frame to undefined)
	for(var a=this._subscriptions[event].slice(0),i=0,subscription;subscription=a[i];++i){// In case a subscription was disposed during the arrayForEach cycle, check
	// for isDisposed on each subscription before invoking its callback
	if(!subscription.isDisposed)subscription.callback(valueToNotify);}}finally{ko.dependencyDetection.end();// End suppressing dependency detection
	}}},getVersion:function getVersion(){return this._versionNumber;},hasChanged:function hasChanged(versionToCheck){return this.getVersion()!==versionToCheck;},updateVersion:function updateVersion(){++this._versionNumber;},limit:function limit(limitFunction){var self=this,selfIsObservable=ko.isObservable(self),ignoreBeforeChange,previousValue,pendingValue,beforeChange='beforeChange';if(!self._origNotifySubscribers){self._origNotifySubscribers=self["notifySubscribers"];self["notifySubscribers"]=limitNotifySubscribers;}var finish=limitFunction(function(){self._notificationIsPending=false;// If an observable provided a reference to itself, access it to get the latest value.
	// This allows computed observables to delay calculating their value until needed.
	if(selfIsObservable&&pendingValue===self){pendingValue=self();}ignoreBeforeChange=false;if(self.isDifferent(previousValue,pendingValue)){self._origNotifySubscribers(previousValue=pendingValue);}});self._limitChange=function(value){self._notificationIsPending=ignoreBeforeChange=true;pendingValue=value;finish();};self._limitBeforeChange=function(value){if(!ignoreBeforeChange){previousValue=value;self._origNotifySubscribers(value,beforeChange);}};},hasSubscriptionsForEvent:function hasSubscriptionsForEvent(event){return this._subscriptions[event]&&this._subscriptions[event].length;},getSubscriptionsCount:function getSubscriptionsCount(event){if(event){return this._subscriptions[event]&&this._subscriptions[event].length||0;}else{var total=0;ko.utils.objectForEach(this._subscriptions,function(eventName,subscriptions){if(eventName!=='dirty')total+=subscriptions.length;});return total;}},isDifferent:function isDifferent(oldValue,newValue){return!this['equalityComparer']||!this['equalityComparer'](oldValue,newValue);},extend:applyExtenders};ko.exportProperty(ko_subscribable_fn,'subscribe',ko_subscribable_fn.subscribe);ko.exportProperty(ko_subscribable_fn,'extend',ko_subscribable_fn.extend);ko.exportProperty(ko_subscribable_fn,'getSubscriptionsCount',ko_subscribable_fn.getSubscriptionsCount);// For browsers that support proto assignment, we overwrite the prototype of each
	// observable instance. Since observables are functions, we need Function.prototype
	// to still be in the prototype chain.
	if(ko.utils.canSetPrototype){ko.utils.setPrototypeOf(ko_subscribable_fn,Function.prototype);}ko.subscribable['fn']=ko_subscribable_fn;ko.isSubscribable=function(instance){return instance!=null&&typeof instance.subscribe=="function"&&typeof instance["notifySubscribers"]=="function";};ko.exportSymbol('subscribable',ko.subscribable);ko.exportSymbol('isSubscribable',ko.isSubscribable);ko.computedContext=ko.dependencyDetection=function(){var outerFrames=[],currentFrame,lastId=0;// Return a unique ID that can be assigned to an observable for dependency tracking.
	// Theoretically, you could eventually overflow the number storage size, resulting
	// in duplicate IDs. But in JavaScript, the largest exact integral value is 2^53
	// or 9,007,199,254,740,992. If you created 1,000,000 IDs per second, it would
	// take over 285 years to reach that number.
	// Reference http://blog.vjeux.com/2010/javascript/javascript-max_int-number-limits.html
	function getId(){return++lastId;}function begin(options){outerFrames.push(currentFrame);currentFrame=options;}function end(){currentFrame=outerFrames.pop();}return{begin:begin,end:end,registerDependency:function registerDependency(subscribable){if(currentFrame){if(!ko.isSubscribable(subscribable))throw new Error("Only subscribable things can act as dependencies");currentFrame.callback.call(currentFrame.callbackTarget,subscribable,subscribable._id||(subscribable._id=getId()));}},ignore:function ignore(callback,callbackTarget,callbackArgs){try{begin();return callback.apply(callbackTarget,callbackArgs||[]);}finally{end();}},getDependenciesCount:function getDependenciesCount(){if(currentFrame)return currentFrame.computed.getDependenciesCount();},isInitial:function isInitial(){if(currentFrame)return currentFrame.isInitial;}};}();ko.exportSymbol('computedContext',ko.computedContext);ko.exportSymbol('computedContext.getDependenciesCount',ko.computedContext.getDependenciesCount);ko.exportSymbol('computedContext.isInitial',ko.computedContext.isInitial);ko.exportSymbol('ignoreDependencies',ko.ignoreDependencies=ko.dependencyDetection.ignore);var observableLatestValue=ko.utils.createSymbolOrString('_latestValue');ko.observable=function(initialValue){function observable(){if(arguments.length>0){// Write
	// Ignore writes if the value hasn't changed
	if(observable.isDifferent(observable[observableLatestValue],arguments[0])){observable.valueWillMutate();observable[observableLatestValue]=arguments[0];observable.valueHasMutated();}return this;// Permits chained assignments
	}else{// Read
	ko.dependencyDetection.registerDependency(observable);// The caller only needs to be notified of changes if they did a "read" operation
	return observable[observableLatestValue];}}observable[observableLatestValue]=initialValue;// Inherit from 'subscribable'
	if(!ko.utils.canSetPrototype){// 'subscribable' won't be on the prototype chain unless we put it there directly
	ko.utils.extend(observable,ko.subscribable['fn']);}ko.subscribable['fn'].init(observable);// Inherit from 'observable'
	ko.utils.setPrototypeOfOrExtend(observable,observableFn);if(ko.options['deferUpdates']){ko.extenders['deferred'](observable,true);}return observable;};// Define prototype for observables
	var observableFn={'equalityComparer':valuesArePrimitiveAndEqual,peek:function peek(){return this[observableLatestValue];},valueHasMutated:function valueHasMutated(){this['notifySubscribers'](this[observableLatestValue]);},valueWillMutate:function valueWillMutate(){this['notifySubscribers'](this[observableLatestValue],'beforeChange');}};// Note that for browsers that don't support proto assignment, the
	// inheritance chain is created manually in the ko.observable constructor
	if(ko.utils.canSetPrototype){ko.utils.setPrototypeOf(observableFn,ko.subscribable['fn']);}var protoProperty=ko.observable.protoProperty='__ko_proto__';observableFn[protoProperty]=ko.observable;ko.hasPrototype=function(instance,prototype){if(instance===null||instance===undefined||instance[protoProperty]===undefined)return false;if(instance[protoProperty]===prototype)return true;return ko.hasPrototype(instance[protoProperty],prototype);// Walk the prototype chain
	};ko.isObservable=function(instance){return ko.hasPrototype(instance,ko.observable);};ko.isWriteableObservable=function(instance){// Observable
	if(typeof instance=='function'&&instance[protoProperty]===ko.observable)return true;// Writeable dependent observable
	if(typeof instance=='function'&&instance[protoProperty]===ko.dependentObservable&&instance.hasWriteFunction)return true;// Anything else
	return false;};ko.exportSymbol('observable',ko.observable);ko.exportSymbol('isObservable',ko.isObservable);ko.exportSymbol('isWriteableObservable',ko.isWriteableObservable);ko.exportSymbol('isWritableObservable',ko.isWriteableObservable);ko.exportSymbol('observable.fn',observableFn);ko.exportProperty(observableFn,'peek',observableFn.peek);ko.exportProperty(observableFn,'valueHasMutated',observableFn.valueHasMutated);ko.exportProperty(observableFn,'valueWillMutate',observableFn.valueWillMutate);ko.observableArray=function(initialValues){initialValues=initialValues||[];if((typeof initialValues==='undefined'?'undefined':_typeof(initialValues))!='object'||!('length'in initialValues))throw new Error("The argument passed when initializing an observable array must be an array, or null, or undefined.");var result=ko.observable(initialValues);ko.utils.setPrototypeOfOrExtend(result,ko.observableArray['fn']);return result.extend({'trackArrayChanges':true});};ko.observableArray['fn']={'remove':function remove(valueOrPredicate){var underlyingArray=this.peek();var removedValues=[];var predicate=typeof valueOrPredicate=="function"&&!ko.isObservable(valueOrPredicate)?valueOrPredicate:function(value){return value===valueOrPredicate;};for(var i=0;i<underlyingArray.length;i++){var value=underlyingArray[i];if(predicate(value)){if(removedValues.length===0){this.valueWillMutate();}removedValues.push(value);underlyingArray.splice(i,1);i--;}}if(removedValues.length){this.valueHasMutated();}return removedValues;},'removeAll':function removeAll(arrayOfValues){// If you passed zero args, we remove everything
	if(arrayOfValues===undefined){var underlyingArray=this.peek();var allValues=underlyingArray.slice(0);this.valueWillMutate();underlyingArray.splice(0,underlyingArray.length);this.valueHasMutated();return allValues;}// If you passed an arg, we interpret it as an array of entries to remove
	if(!arrayOfValues)return[];return this['remove'](function(value){return ko.utils.arrayIndexOf(arrayOfValues,value)>=0;});},'destroy':function destroy(valueOrPredicate){var underlyingArray=this.peek();var predicate=typeof valueOrPredicate=="function"&&!ko.isObservable(valueOrPredicate)?valueOrPredicate:function(value){return value===valueOrPredicate;};this.valueWillMutate();for(var i=underlyingArray.length-1;i>=0;i--){var value=underlyingArray[i];if(predicate(value))underlyingArray[i]["_destroy"]=true;}this.valueHasMutated();},'destroyAll':function destroyAll(arrayOfValues){// If you passed zero args, we destroy everything
	if(arrayOfValues===undefined)return this['destroy'](function(){return true;});// If you passed an arg, we interpret it as an array of entries to destroy
	if(!arrayOfValues)return[];return this['destroy'](function(value){return ko.utils.arrayIndexOf(arrayOfValues,value)>=0;});},'indexOf':function indexOf(item){var underlyingArray=this();return ko.utils.arrayIndexOf(underlyingArray,item);},'replace':function replace(oldItem,newItem){var index=this['indexOf'](oldItem);if(index>=0){this.valueWillMutate();this.peek()[index]=newItem;this.valueHasMutated();}}};// Note that for browsers that don't support proto assignment, the
	// inheritance chain is created manually in the ko.observableArray constructor
	if(ko.utils.canSetPrototype){ko.utils.setPrototypeOf(ko.observableArray['fn'],ko.observable['fn']);}// Populate ko.observableArray.fn with read/write functions from native arrays
	// Important: Do not add any additional functions here that may reasonably be used to *read* data from the array
	// because we'll eval them without causing subscriptions, so ko.computed output could end up getting stale
	ko.utils.arrayForEach(["pop","push","reverse","shift","sort","splice","unshift"],function(methodName){ko.observableArray['fn'][methodName]=function(){// Use "peek" to avoid creating a subscription in any computed that we're executing in the context of
	// (for consistency with mutating regular observables)
	var underlyingArray=this.peek();this.valueWillMutate();this.cacheDiffForKnownOperation(underlyingArray,methodName,arguments);var methodCallResult=underlyingArray[methodName].apply(underlyingArray,arguments);this.valueHasMutated();// The native sort and reverse methods return a reference to the array, but it makes more sense to return the observable array instead.
	return methodCallResult===underlyingArray?this:methodCallResult;};});// Populate ko.observableArray.fn with read-only functions from native arrays
	ko.utils.arrayForEach(["slice"],function(methodName){ko.observableArray['fn'][methodName]=function(){var underlyingArray=this();return underlyingArray[methodName].apply(underlyingArray,arguments);};});ko.exportSymbol('observableArray',ko.observableArray);var arrayChangeEventName='arrayChange';ko.extenders['trackArrayChanges']=function(target,options){// Use the provided options--each call to trackArrayChanges overwrites the previously set options
	target.compareArrayOptions={};if(options&&(typeof options==='undefined'?'undefined':_typeof(options))=="object"){ko.utils.extend(target.compareArrayOptions,options);}target.compareArrayOptions['sparse']=true;// Only modify the target observable once
	if(target.cacheDiffForKnownOperation){return;}var trackingChanges=false,cachedDiff=null,arrayChangeSubscription,pendingNotifications=0,underlyingBeforeSubscriptionAddFunction=target.beforeSubscriptionAdd,underlyingAfterSubscriptionRemoveFunction=target.afterSubscriptionRemove;// Watch "subscribe" calls, and for array change events, ensure change tracking is enabled
	target.beforeSubscriptionAdd=function(event){if(underlyingBeforeSubscriptionAddFunction)underlyingBeforeSubscriptionAddFunction.call(target,event);if(event===arrayChangeEventName){trackChanges();}};// Watch "dispose" calls, and for array change events, ensure change tracking is disabled when all are disposed
	target.afterSubscriptionRemove=function(event){if(underlyingAfterSubscriptionRemoveFunction)underlyingAfterSubscriptionRemoveFunction.call(target,event);if(event===arrayChangeEventName&&!target.hasSubscriptionsForEvent(arrayChangeEventName)){arrayChangeSubscription.dispose();trackingChanges=false;}};function trackChanges(){// Calling 'trackChanges' multiple times is the same as calling it once
	if(trackingChanges){return;}trackingChanges=true;// Intercept "notifySubscribers" to track how many times it was called.
	var underlyingNotifySubscribersFunction=target['notifySubscribers'];target['notifySubscribers']=function(valueToNotify,event){if(!event||event===defaultEvent){++pendingNotifications;}return underlyingNotifySubscribersFunction.apply(this,arguments);};// Each time the array changes value, capture a clone so that on the next
	// change it's possible to produce a diff
	var previousContents=[].concat(target.peek()||[]);cachedDiff=null;arrayChangeSubscription=target.subscribe(function(currentContents){// Make a copy of the current contents and ensure it's an array
	currentContents=[].concat(currentContents||[]);// Compute the diff and issue notifications, but only if someone is listening
	if(target.hasSubscriptionsForEvent(arrayChangeEventName)){var changes=getChanges(previousContents,currentContents);}// Eliminate references to the old, removed items, so they can be GCed
	previousContents=currentContents;cachedDiff=null;pendingNotifications=0;if(changes&&changes.length){target['notifySubscribers'](changes,arrayChangeEventName);}});}function getChanges(previousContents,currentContents){// We try to re-use cached diffs.
	// The scenarios where pendingNotifications > 1 are when using rate-limiting or the Deferred Updates
	// plugin, which without this check would not be compatible with arrayChange notifications. Normally,
	// notifications are issued immediately so we wouldn't be queueing up more than one.
	if(!cachedDiff||pendingNotifications>1){cachedDiff=ko.utils.compareArrays(previousContents,currentContents,target.compareArrayOptions);}return cachedDiff;}target.cacheDiffForKnownOperation=function(rawArray,operationName,args){// Only run if we're currently tracking changes for this observable array
	// and there aren't any pending deferred notifications.
	if(!trackingChanges||pendingNotifications){return;}var diff=[],arrayLength=rawArray.length,argsLength=args.length,offset=0;function pushDiff(status,value,index){return diff[diff.length]={'status':status,'value':value,'index':index};}switch(operationName){case'push':offset=arrayLength;case'unshift':for(var index=0;index<argsLength;index++){pushDiff('added',args[index],offset+index);}break;case'pop':offset=arrayLength-1;case'shift':if(arrayLength){pushDiff('deleted',rawArray[offset],offset);}break;case'splice':// Negative start index means 'from end of array'. After that we clamp to [0...arrayLength].
	// See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice
	var startIndex=Math.min(Math.max(0,args[0]<0?arrayLength+args[0]:args[0]),arrayLength),endDeleteIndex=argsLength===1?arrayLength:Math.min(startIndex+(args[1]||0),arrayLength),endAddIndex=startIndex+argsLength-2,endIndex=Math.max(endDeleteIndex,endAddIndex),additions=[],deletions=[];for(var index=startIndex,argsIndex=2;index<endIndex;++index,++argsIndex){if(index<endDeleteIndex)deletions.push(pushDiff('deleted',rawArray[index],index));if(index<endAddIndex)additions.push(pushDiff('added',args[argsIndex],index));}ko.utils.findMovesInArrayComparison(deletions,additions);break;default:return;}cachedDiff=diff;};};var computedState=ko.utils.createSymbolOrString('_state');ko.computed=ko.dependentObservable=function(evaluatorFunctionOrOptions,evaluatorFunctionTarget,options){if((typeof evaluatorFunctionOrOptions==='undefined'?'undefined':_typeof(evaluatorFunctionOrOptions))==="object"){// Single-parameter syntax - everything is on this "options" param
	options=evaluatorFunctionOrOptions;}else{// Multi-parameter syntax - construct the options according to the params passed
	options=options||{};if(evaluatorFunctionOrOptions){options["read"]=evaluatorFunctionOrOptions;}}if(typeof options["read"]!="function")throw Error("Pass a function that returns the value of the ko.computed");var writeFunction=options["write"];var state={latestValue:undefined,isStale:true,isBeingEvaluated:false,suppressDisposalUntilDisposeWhenReturnsFalse:false,isDisposed:false,pure:false,isSleeping:false,readFunction:options["read"],evaluatorFunctionTarget:evaluatorFunctionTarget||options["owner"],disposeWhenNodeIsRemoved:options["disposeWhenNodeIsRemoved"]||options.disposeWhenNodeIsRemoved||null,disposeWhen:options["disposeWhen"]||options.disposeWhen,domNodeDisposalCallback:null,dependencyTracking:{},dependenciesCount:0,evaluationTimeoutInstance:null};function computedObservable(){if(arguments.length>0){if(typeof writeFunction==="function"){// Writing a value
	writeFunction.apply(state.evaluatorFunctionTarget,arguments);}else{throw new Error("Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.");}return this;// Permits chained assignments
	}else{// Reading the value
	ko.dependencyDetection.registerDependency(computedObservable);if(state.isStale||state.isSleeping&&computedObservable.haveDependenciesChanged()){computedObservable.evaluateImmediate();}return state.latestValue;}}computedObservable[computedState]=state;computedObservable.hasWriteFunction=typeof writeFunction==="function";// Inherit from 'subscribable'
	if(!ko.utils.canSetPrototype){// 'subscribable' won't be on the prototype chain unless we put it there directly
	ko.utils.extend(computedObservable,ko.subscribable['fn']);}ko.subscribable['fn'].init(computedObservable);// Inherit from 'computed'
	ko.utils.setPrototypeOfOrExtend(computedObservable,computedFn);if(options['pure']){state.pure=true;state.isSleeping=true;// Starts off sleeping; will awake on the first subscription
	ko.utils.extend(computedObservable,pureComputedOverrides);}else if(options['deferEvaluation']){ko.utils.extend(computedObservable,deferEvaluationOverrides);}if(ko.options['deferUpdates']){ko.extenders['deferred'](computedObservable,true);}if(DEBUG){// #1731 - Aid debugging by exposing the computed's options
	computedObservable["_options"]=options;}if(state.disposeWhenNodeIsRemoved){// Since this computed is associated with a DOM node, and we don't want to dispose the computed
	// until the DOM node is *removed* from the document (as opposed to never having been in the document),
	// we'll prevent disposal until "disposeWhen" first returns false.
	state.suppressDisposalUntilDisposeWhenReturnsFalse=true;// disposeWhenNodeIsRemoved: true can be used to opt into the "only dispose after first false result"
	// behaviour even if there's no specific node to watch. In that case, clear the option so we don't try
	// to watch for a non-node's disposal. This technique is intended for KO's internal use only and shouldn't
	// be documented or used by application code, as it's likely to change in a future version of KO.
	if(!state.disposeWhenNodeIsRemoved.nodeType){state.disposeWhenNodeIsRemoved=null;}}// Evaluate, unless sleeping or deferEvaluation is true
	if(!state.isSleeping&&!options['deferEvaluation']){computedObservable.evaluateImmediate();}// Attach a DOM node disposal callback so that the computed will be proactively disposed as soon as the node is
	// removed using ko.removeNode. But skip if isActive is false (there will never be any dependencies to dispose).
	if(state.disposeWhenNodeIsRemoved&&computedObservable.isActive()){ko.utils.domNodeDisposal.addDisposeCallback(state.disposeWhenNodeIsRemoved,state.domNodeDisposalCallback=function(){computedObservable.dispose();});}return computedObservable;};// Utility function that disposes a given dependencyTracking entry
	function computedDisposeDependencyCallback(id,entryToDispose){if(entryToDispose!==null&&entryToDispose.dispose){entryToDispose.dispose();}}// This function gets called each time a dependency is detected while evaluating a computed.
	// It's factored out as a shared function to avoid creating unnecessary function instances during evaluation.
	function computedBeginDependencyDetectionCallback(subscribable,id){var computedObservable=this.computedObservable,state=computedObservable[computedState];if(!state.isDisposed){if(this.disposalCount&&this.disposalCandidates[id]){// Don't want to dispose this subscription, as it's still being used
	computedObservable.addDependencyTracking(id,subscribable,this.disposalCandidates[id]);this.disposalCandidates[id]=null;// No need to actually delete the property - disposalCandidates is a transient object anyway
	--this.disposalCount;}else if(!state.dependencyTracking[id]){// Brand new subscription - add it
	computedObservable.addDependencyTracking(id,subscribable,state.isSleeping?{_target:subscribable}:computedObservable.subscribeToDependency(subscribable));}}}var computedFn={"equalityComparer":valuesArePrimitiveAndEqual,getDependenciesCount:function getDependenciesCount(){return this[computedState].dependenciesCount;},addDependencyTracking:function addDependencyTracking(id,target,trackingObj){if(this[computedState].pure&&target===this){throw Error("A 'pure' computed must not be called recursively");}this[computedState].dependencyTracking[id]=trackingObj;trackingObj._order=this[computedState].dependenciesCount++;trackingObj._version=target.getVersion();},haveDependenciesChanged:function haveDependenciesChanged(){var id,dependency,dependencyTracking=this[computedState].dependencyTracking;for(id in dependencyTracking){if(dependencyTracking.hasOwnProperty(id)){dependency=dependencyTracking[id];if(dependency._target.hasChanged(dependency._version)){return true;}}}},markDirty:function markDirty(){// Process "dirty" events if we can handle delayed notifications
	if(this._evalDelayed&&!this[computedState].isBeingEvaluated){this._evalDelayed();}},isActive:function isActive(){return this[computedState].isStale||this[computedState].dependenciesCount>0;},respondToChange:function respondToChange(){// Ignore "change" events if we've already scheduled a delayed notification
	if(!this._notificationIsPending){this.evaluatePossiblyAsync();}},subscribeToDependency:function subscribeToDependency(target){if(target._deferUpdates&&!this[computedState].disposeWhenNodeIsRemoved){var dirtySub=target.subscribe(this.markDirty,this,'dirty'),changeSub=target.subscribe(this.respondToChange,this);return{_target:target,dispose:function dispose(){dirtySub.dispose();changeSub.dispose();}};}else{return target.subscribe(this.evaluatePossiblyAsync,this);}},evaluatePossiblyAsync:function evaluatePossiblyAsync(){var computedObservable=this,throttleEvaluationTimeout=computedObservable['throttleEvaluation'];if(throttleEvaluationTimeout&&throttleEvaluationTimeout>=0){clearTimeout(this[computedState].evaluationTimeoutInstance);this[computedState].evaluationTimeoutInstance=ko.utils.setTimeout(function(){computedObservable.evaluateImmediate(true/*notifyChange*/);},throttleEvaluationTimeout);}else if(computedObservable._evalDelayed){computedObservable._evalDelayed();}else{computedObservable.evaluateImmediate(true/*notifyChange*/);}},evaluateImmediate:function evaluateImmediate(notifyChange){var computedObservable=this,state=computedObservable[computedState],disposeWhen=state.disposeWhen;if(state.isBeingEvaluated){// If the evaluation of a ko.computed causes side effects, it's possible that it will trigger its own re-evaluation.
	// This is not desirable (it's hard for a developer to realise a chain of dependencies might cause this, and they almost
	// certainly didn't intend infinite re-evaluations). So, for predictability, we simply prevent ko.computeds from causing
	// their own re-evaluation. Further discussion at https://github.com/SteveSanderson/knockout/pull/387
	return;}// Do not evaluate (and possibly capture new dependencies) if disposed
	if(state.isDisposed){return;}if(state.disposeWhenNodeIsRemoved&&!ko.utils.domNodeIsAttachedToDocument(state.disposeWhenNodeIsRemoved)||disposeWhen&&disposeWhen()){// See comment above about suppressDisposalUntilDisposeWhenReturnsFalse
	if(!state.suppressDisposalUntilDisposeWhenReturnsFalse){computedObservable.dispose();return;}}else{// It just did return false, so we can stop suppressing now
	state.suppressDisposalUntilDisposeWhenReturnsFalse=false;}state.isBeingEvaluated=true;try{this.evaluateImmediate_CallReadWithDependencyDetection(notifyChange);}finally{state.isBeingEvaluated=false;}if(!state.dependenciesCount){computedObservable.dispose();}},evaluateImmediate_CallReadWithDependencyDetection:function evaluateImmediate_CallReadWithDependencyDetection(notifyChange){// This function is really just part of the evaluateImmediate logic. You would never call it from anywhere else.
	// Factoring it out into a separate function means it can be independent of the try/catch block in evaluateImmediate,
	// which contributes to saving about 40% off the CPU overhead of computed evaluation (on V8 at least).
	var computedObservable=this,state=computedObservable[computedState];// Initially, we assume that none of the subscriptions are still being used (i.e., all are candidates for disposal).
	// Then, during evaluation, we cross off any that are in fact still being used.
	var isInitial=state.pure?undefined:!state.dependenciesCount,// If we're evaluating when there are no previous dependencies, it must be the first time
	dependencyDetectionContext={computedObservable:computedObservable,disposalCandidates:state.dependencyTracking,disposalCount:state.dependenciesCount};ko.dependencyDetection.begin({callbackTarget:dependencyDetectionContext,callback:computedBeginDependencyDetectionCallback,computed:computedObservable,isInitial:isInitial});state.dependencyTracking={};state.dependenciesCount=0;var newValue=this.evaluateImmediate_CallReadThenEndDependencyDetection(state,dependencyDetectionContext);if(computedObservable.isDifferent(state.latestValue,newValue)){if(!state.isSleeping){computedObservable["notifySubscribers"](state.latestValue,"beforeChange");}state.latestValue=newValue;if(state.isSleeping){computedObservable.updateVersion();}else if(notifyChange){computedObservable["notifySubscribers"](state.latestValue);}}if(isInitial){computedObservable["notifySubscribers"](state.latestValue,"awake");}},evaluateImmediate_CallReadThenEndDependencyDetection:function evaluateImmediate_CallReadThenEndDependencyDetection(state,dependencyDetectionContext){// This function is really part of the evaluateImmediate_CallReadWithDependencyDetection logic.
	// You'd never call it from anywhere else. Factoring it out means that evaluateImmediate_CallReadWithDependencyDetection
	// can be independent of try/finally blocks, which contributes to saving about 40% off the CPU
	// overhead of computed evaluation (on V8 at least).
	try{var readFunction=state.readFunction;return state.evaluatorFunctionTarget?readFunction.call(state.evaluatorFunctionTarget):readFunction();}finally{ko.dependencyDetection.end();// For each subscription no longer being used, remove it from the active subscriptions list and dispose it
	if(dependencyDetectionContext.disposalCount&&!state.isSleeping){ko.utils.objectForEach(dependencyDetectionContext.disposalCandidates,computedDisposeDependencyCallback);}state.isStale=false;}},peek:function peek(){// Peek won't re-evaluate, except while the computed is sleeping or to get the initial value when "deferEvaluation" is set.
	var state=this[computedState];if(state.isStale&&!state.dependenciesCount||state.isSleeping&&this.haveDependenciesChanged()){this.evaluateImmediate();}return state.latestValue;},limit:function limit(limitFunction){// Override the limit function with one that delays evaluation as well
	ko.subscribable['fn'].limit.call(this,limitFunction);this._evalDelayed=function(){this._limitBeforeChange(this[computedState].latestValue);this[computedState].isStale=true;// Mark as dirty
	// Pass the observable to the "limit" code, which will access it when
	// it's time to do the notification.
	this._limitChange(this);};},dispose:function dispose(){var state=this[computedState];if(!state.isSleeping&&state.dependencyTracking){ko.utils.objectForEach(state.dependencyTracking,function(id,dependency){if(dependency.dispose)dependency.dispose();});}if(state.disposeWhenNodeIsRemoved&&state.domNodeDisposalCallback){ko.utils.domNodeDisposal.removeDisposeCallback(state.disposeWhenNodeIsRemoved,state.domNodeDisposalCallback);}state.dependencyTracking=null;state.dependenciesCount=0;state.isDisposed=true;state.isStale=false;state.isSleeping=false;state.disposeWhenNodeIsRemoved=null;}};var pureComputedOverrides={beforeSubscriptionAdd:function beforeSubscriptionAdd(event){// If asleep, wake up the computed by subscribing to any dependencies.
	var computedObservable=this,state=computedObservable[computedState];if(!state.isDisposed&&state.isSleeping&&event=='change'){state.isSleeping=false;if(state.isStale||computedObservable.haveDependenciesChanged()){state.dependencyTracking=null;state.dependenciesCount=0;state.isStale=true;computedObservable.evaluateImmediate();}else{// First put the dependencies in order
	var dependeciesOrder=[];ko.utils.objectForEach(state.dependencyTracking,function(id,dependency){dependeciesOrder[dependency._order]=id;});// Next, subscribe to each one
	ko.utils.arrayForEach(dependeciesOrder,function(id,order){var dependency=state.dependencyTracking[id],subscription=computedObservable.subscribeToDependency(dependency._target);subscription._order=order;subscription._version=dependency._version;state.dependencyTracking[id]=subscription;});}if(!state.isDisposed){// test since evaluating could trigger disposal
	computedObservable["notifySubscribers"](state.latestValue,"awake");}}},afterSubscriptionRemove:function afterSubscriptionRemove(event){var state=this[computedState];if(!state.isDisposed&&event=='change'&&!this.hasSubscriptionsForEvent('change')){ko.utils.objectForEach(state.dependencyTracking,function(id,dependency){if(dependency.dispose){state.dependencyTracking[id]={_target:dependency._target,_order:dependency._order,_version:dependency._version};dependency.dispose();}});state.isSleeping=true;this["notifySubscribers"](undefined,"asleep");}},getVersion:function getVersion(){// Because a pure computed is not automatically updated while it is sleeping, we can't
	// simply return the version number. Instead, we check if any of the dependencies have
	// changed and conditionally re-evaluate the computed observable.
	var state=this[computedState];if(state.isSleeping&&(state.isStale||this.haveDependenciesChanged())){this.evaluateImmediate();}return ko.subscribable['fn'].getVersion.call(this);}};var deferEvaluationOverrides={beforeSubscriptionAdd:function beforeSubscriptionAdd(event){// This will force a computed with deferEvaluation to evaluate when the first subscription is registered.
	if(event=='change'||event=='beforeChange'){this.peek();}}};// Note that for browsers that don't support proto assignment, the
	// inheritance chain is created manually in the ko.computed constructor
	if(ko.utils.canSetPrototype){ko.utils.setPrototypeOf(computedFn,ko.subscribable['fn']);}// Set the proto chain values for ko.hasPrototype
	var protoProp=ko.observable.protoProperty;// == "__ko_proto__"
	ko.computed[protoProp]=ko.observable;computedFn[protoProp]=ko.computed;ko.isComputed=function(instance){return ko.hasPrototype(instance,ko.computed);};ko.isPureComputed=function(instance){return ko.hasPrototype(instance,ko.computed)&&instance[computedState]&&instance[computedState].pure;};ko.exportSymbol('computed',ko.computed);ko.exportSymbol('dependentObservable',ko.computed);// export ko.dependentObservable for backwards compatibility (1.x)
	ko.exportSymbol('isComputed',ko.isComputed);ko.exportSymbol('isPureComputed',ko.isPureComputed);ko.exportSymbol('computed.fn',computedFn);ko.exportProperty(computedFn,'peek',computedFn.peek);ko.exportProperty(computedFn,'dispose',computedFn.dispose);ko.exportProperty(computedFn,'isActive',computedFn.isActive);ko.exportProperty(computedFn,'getDependenciesCount',computedFn.getDependenciesCount);ko.pureComputed=function(evaluatorFunctionOrOptions,evaluatorFunctionTarget){if(typeof evaluatorFunctionOrOptions==='function'){return ko.computed(evaluatorFunctionOrOptions,evaluatorFunctionTarget,{'pure':true});}else{evaluatorFunctionOrOptions=ko.utils.extend({},evaluatorFunctionOrOptions);// make a copy of the parameter object
	evaluatorFunctionOrOptions['pure']=true;return ko.computed(evaluatorFunctionOrOptions,evaluatorFunctionTarget);}};ko.exportSymbol('pureComputed',ko.pureComputed);(function(){var maxNestedObservableDepth=10;// Escape the (unlikely) pathalogical case where an observable's current value is itself (or similar reference cycle)
	ko.toJS=function(rootObject){if(arguments.length==0)throw new Error("When calling ko.toJS, pass the object you want to convert.");// We just unwrap everything at every level in the object graph
	return mapJsObjectGraph(rootObject,function(valueToMap){// Loop because an observable's value might in turn be another observable wrapper
	for(var i=0;ko.isObservable(valueToMap)&&i<maxNestedObservableDepth;i++){valueToMap=valueToMap();}return valueToMap;});};ko.toJSON=function(rootObject,replacer,space){// replacer and space are optional
	var plainJavaScriptObject=ko.toJS(rootObject);return ko.utils.stringifyJson(plainJavaScriptObject,replacer,space);};function mapJsObjectGraph(rootObject,mapInputCallback,visitedObjects){visitedObjects=visitedObjects||new objectLookup();rootObject=mapInputCallback(rootObject);var canHaveProperties=(typeof rootObject==='undefined'?'undefined':_typeof(rootObject))=="object"&&rootObject!==null&&rootObject!==undefined&&!(rootObject instanceof RegExp)&&!(rootObject instanceof Date)&&!(rootObject instanceof String)&&!(rootObject instanceof Number)&&!(rootObject instanceof Boolean);if(!canHaveProperties)return rootObject;var outputProperties=rootObject instanceof Array?[]:{};visitedObjects.save(rootObject,outputProperties);visitPropertiesOrArrayEntries(rootObject,function(indexer){var propertyValue=mapInputCallback(rootObject[indexer]);switch(typeof propertyValue==='undefined'?'undefined':_typeof(propertyValue)){case"boolean":case"number":case"string":case"function":outputProperties[indexer]=propertyValue;break;case"object":case"undefined":var previouslyMappedValue=visitedObjects.get(propertyValue);outputProperties[indexer]=previouslyMappedValue!==undefined?previouslyMappedValue:mapJsObjectGraph(propertyValue,mapInputCallback,visitedObjects);break;}});return outputProperties;}function visitPropertiesOrArrayEntries(rootObject,visitorCallback){if(rootObject instanceof Array){for(var i=0;i<rootObject.length;i++){visitorCallback(i);}// For arrays, also respect toJSON property for custom mappings (fixes #278)
	if(typeof rootObject['toJSON']=='function')visitorCallback('toJSON');}else{for(var propertyName in rootObject){visitorCallback(propertyName);}}};function objectLookup(){this.keys=[];this.values=[];};objectLookup.prototype={constructor:objectLookup,save:function save(key,value){var existingIndex=ko.utils.arrayIndexOf(this.keys,key);if(existingIndex>=0)this.values[existingIndex]=value;else{this.keys.push(key);this.values.push(value);}},get:function get(key){var existingIndex=ko.utils.arrayIndexOf(this.keys,key);return existingIndex>=0?this.values[existingIndex]:undefined;}};})();ko.exportSymbol('toJS',ko.toJS);ko.exportSymbol('toJSON',ko.toJSON);(function(){var hasDomDataExpandoProperty='__ko__hasDomDataOptionValue__';// Normally, SELECT elements and their OPTIONs can only take value of type 'string' (because the values
	// are stored on DOM attributes). ko.selectExtensions provides a way for SELECTs/OPTIONs to have values
	// that are arbitrary objects. This is very convenient when implementing things like cascading dropdowns.
	ko.selectExtensions={readValue:function readValue(element){switch(ko.utils.tagNameLower(element)){case'option':if(element[hasDomDataExpandoProperty]===true)return ko.utils.domData.get(element,ko.bindingHandlers.options.optionValueDomDataKey);return ko.utils.ieVersion<=7?element.getAttributeNode('value')&&element.getAttributeNode('value').specified?element.value:element.text:element.value;case'select':return element.selectedIndex>=0?ko.selectExtensions.readValue(element.options[element.selectedIndex]):undefined;default:return element.value;}},writeValue:function writeValue(element,value,allowUnset){switch(ko.utils.tagNameLower(element)){case'option':switch(typeof value==='undefined'?'undefined':_typeof(value)){case"string":ko.utils.domData.set(element,ko.bindingHandlers.options.optionValueDomDataKey,undefined);if(hasDomDataExpandoProperty in element){// IE <= 8 throws errors if you delete non-existent properties from a DOM node
	delete element[hasDomDataExpandoProperty];}element.value=value;break;default:// Store arbitrary object using DomData
	ko.utils.domData.set(element,ko.bindingHandlers.options.optionValueDomDataKey,value);element[hasDomDataExpandoProperty]=true;// Special treatment of numbers is just for backward compatibility. KO 1.2.1 wrote numerical values to element.value.
	element.value=typeof value==="number"?value:"";break;}break;case'select':if(value===""||value===null)// A blank string or null value will select the caption
	value=undefined;var selection=-1;for(var i=0,n=element.options.length,optionValue;i<n;++i){optionValue=ko.selectExtensions.readValue(element.options[i]);// Include special check to handle selecting a caption with a blank string value
	if(optionValue==value||optionValue==""&&value===undefined){selection=i;break;}}if(allowUnset||selection>=0||value===undefined&&element.size>1){element.selectedIndex=selection;}break;default:if(value===null||value===undefined)value="";element.value=value;break;}}};})();ko.exportSymbol('selectExtensions',ko.selectExtensions);ko.exportSymbol('selectExtensions.readValue',ko.selectExtensions.readValue);ko.exportSymbol('selectExtensions.writeValue',ko.selectExtensions.writeValue);ko.expressionRewriting=function(){var javaScriptReservedWords=["true","false","null","undefined"];// Matches something that can be assigned to--either an isolated identifier or something ending with a property accessor
	// This is designed to be simple and avoid false negatives, but could produce false positives (e.g., a+b.c).
	// This also will not properly handle nested brackets (e.g., obj1[obj2['prop']]; see #911).
	var javaScriptAssignmentTarget=/^(?:[$_a-z][$\w]*|(.+)(\.\s*[$_a-z][$\w]*|\[.+\]))$/i;function getWriteableValue(expression){if(ko.utils.arrayIndexOf(javaScriptReservedWords,expression)>=0)return false;var match=expression.match(javaScriptAssignmentTarget);return match===null?false:match[1]?'Object('+match[1]+')'+match[2]:expression;}// The following regular expressions will be used to split an object-literal string into tokens
	// These two match strings, either with double quotes or single quotes
	var stringDouble='"(?:[^"\\\\]|\\\\.)*"',stringSingle="'(?:[^'\\\\]|\\\\.)*'",// Matches a regular expression (text enclosed by slashes), but will also match sets of divisions
	// as a regular expression (this is handled by the parsing loop below).
	stringRegexp='/(?:[^/\\\\]|\\\\.)*/\w*',// These characters have special meaning to the parser and must not appear in the middle of a
	// token, except as part of a string.
	specials=',"\'{}()/:[\\]',// Match text (at least two characters) that does not contain any of the above special characters,
	// although some of the special characters are allowed to start it (all but the colon and comma).
	// The text can contain spaces, but leading or trailing spaces are skipped.
	everyThingElse='[^\\s:,/][^'+specials+']*[^\\s'+specials+']',// Match any non-space character not matched already. This will match colons and commas, since they're
	// not matched by "everyThingElse", but will also match any other single character that wasn't already
	// matched (for example: in "a: 1, b: 2", each of the non-space characters will be matched by oneNotSpace).
	oneNotSpace='[^\\s]',// Create the actual regular expression by or-ing the above strings. The order is important.
	bindingToken=RegExp(stringDouble+'|'+stringSingle+'|'+stringRegexp+'|'+everyThingElse+'|'+oneNotSpace,'g'),// Match end of previous token to determine whether a slash is a division or regex.
	divisionLookBehind=/[\])"'A-Za-z0-9_$]+$/,keywordRegexLookBehind={'in':1,'return':1,'typeof':1};function parseObjectLiteral(objectLiteralString){// Trim leading and trailing spaces from the string
	var str=ko.utils.stringTrim(objectLiteralString);// Trim braces '{' surrounding the whole object literal
	if(str.charCodeAt(0)===123)str=str.slice(1,-1);// Split into tokens
	var result=[],toks=str.match(bindingToken),key,values=[],depth=0;if(toks){// Append a comma so that we don't need a separate code block to deal with the last item
	toks.push(',');for(var i=0,tok;tok=toks[i];++i){var c=tok.charCodeAt(0);// A comma signals the end of a key/value pair if depth is zero
	if(c===44){// ","
	if(depth<=0){result.push(key&&values.length?{key:key,value:values.join('')}:{'unknown':key||values.join('')});key=depth=0;values=[];continue;}// Simply skip the colon that separates the name and value
	}else if(c===58){// ":"
	if(!depth&&!key&&values.length===1){key=values.pop();continue;}// A set of slashes is initially matched as a regular expression, but could be division
	}else if(c===47&&i&&tok.length>1){// "/"
	// Look at the end of the previous token to determine if the slash is actually division
	var match=toks[i-1].match(divisionLookBehind);if(match&&!keywordRegexLookBehind[match[0]]){// The slash is actually a division punctuator; re-parse the remainder of the string (not including the slash)
	str=str.substr(str.indexOf(tok)+1);toks=str.match(bindingToken);toks.push(',');i=-1;// Continue with just the slash
	tok='/';}// Increment depth for parentheses, braces, and brackets so that interior commas are ignored
	}else if(c===40||c===123||c===91){// '(', '{', '['
	++depth;}else if(c===41||c===125||c===93){// ')', '}', ']'
	--depth;// The key will be the first token; if it's a string, trim the quotes
	}else if(!key&&!values.length&&(c===34||c===39)){// '"', "'"
	tok=tok.slice(1,-1);}values.push(tok);}}return result;}// Two-way bindings include a write function that allow the handler to update the value even if it's not an observable.
	var twoWayBindings={};function preProcessBindings(bindingsStringOrKeyValueArray,bindingOptions){bindingOptions=bindingOptions||{};function processKeyValue(key,val){var writableVal;function callPreprocessHook(obj){return obj&&obj['preprocess']?val=obj['preprocess'](val,key,processKeyValue):true;}if(!bindingParams){if(!callPreprocessHook(ko['getBindingHandler'](key)))return;if(twoWayBindings[key]&&(writableVal=getWriteableValue(val))){// For two-way bindings, provide a write method in case the value
	// isn't a writable observable.
	propertyAccessorResultStrings.push("'"+key+"':function(_z){"+writableVal+"=_z}");}}// Values are wrapped in a function so that each value can be accessed independently
	if(makeValueAccessors){val='function(){return '+val+' }';}resultStrings.push("'"+key+"':"+val);}var resultStrings=[],propertyAccessorResultStrings=[],makeValueAccessors=bindingOptions['valueAccessors'],bindingParams=bindingOptions['bindingParams'],keyValueArray=typeof bindingsStringOrKeyValueArray==="string"?parseObjectLiteral(bindingsStringOrKeyValueArray):bindingsStringOrKeyValueArray;ko.utils.arrayForEach(keyValueArray,function(keyValue){processKeyValue(keyValue.key||keyValue['unknown'],keyValue.value);});if(propertyAccessorResultStrings.length)processKeyValue('_ko_property_writers',"{"+propertyAccessorResultStrings.join(",")+" }");return resultStrings.join(",");}return{bindingRewriteValidators:[],twoWayBindings:twoWayBindings,parseObjectLiteral:parseObjectLiteral,preProcessBindings:preProcessBindings,keyValueArrayContainsKey:function keyValueArrayContainsKey(keyValueArray,key){for(var i=0;i<keyValueArray.length;i++){if(keyValueArray[i]['key']==key)return true;}return false;},// Internal, private KO utility for updating model properties from within bindings
	// property:            If the property being updated is (or might be) an observable, pass it here
	//                      If it turns out to be a writable observable, it will be written to directly
	// allBindings:         An object with a get method to retrieve bindings in the current execution context.
	//                      This will be searched for a '_ko_property_writers' property in case you're writing to a non-observable
	// key:                 The key identifying the property to be written. Example: for { hasFocus: myValue }, write to 'myValue' by specifying the key 'hasFocus'
	// value:               The value to be written
	// checkIfDifferent:    If true, and if the property being written is a writable observable, the value will only be written if
	//                      it is !== existing value on that writable observable
	writeValueToProperty:function writeValueToProperty(property,allBindings,key,value,checkIfDifferent){if(!property||!ko.isObservable(property)){var propWriters=allBindings.get('_ko_property_writers');if(propWriters&&propWriters[key])propWriters[key](value);}else if(ko.isWriteableObservable(property)&&(!checkIfDifferent||property.peek()!==value)){property(value);}}};}();ko.exportSymbol('expressionRewriting',ko.expressionRewriting);ko.exportSymbol('expressionRewriting.bindingRewriteValidators',ko.expressionRewriting.bindingRewriteValidators);ko.exportSymbol('expressionRewriting.parseObjectLiteral',ko.expressionRewriting.parseObjectLiteral);ko.exportSymbol('expressionRewriting.preProcessBindings',ko.expressionRewriting.preProcessBindings);// Making bindings explicitly declare themselves as "two way" isn't ideal in the long term (it would be better if
	// all bindings could use an official 'property writer' API without needing to declare that they might). However,
	// since this is not, and has never been, a public API (_ko_property_writers was never documented), it's acceptable
	// as an internal implementation detail in the short term.
	// For those developers who rely on _ko_property_writers in their custom bindings, we expose _twoWayBindings as an
	// undocumented feature that makes it relatively easy to upgrade to KO 3.0. However, this is still not an official
	// public API, and we reserve the right to remove it at any time if we create a real public property writers API.
	ko.exportSymbol('expressionRewriting._twoWayBindings',ko.expressionRewriting.twoWayBindings);// For backward compatibility, define the following aliases. (Previously, these function names were misleading because
	// they referred to JSON specifically, even though they actually work with arbitrary JavaScript object literal expressions.)
	ko.exportSymbol('jsonExpressionRewriting',ko.expressionRewriting);ko.exportSymbol('jsonExpressionRewriting.insertPropertyAccessorsIntoJson',ko.expressionRewriting.preProcessBindings);(function(){// "Virtual elements" is an abstraction on top of the usual DOM API which understands the notion that comment nodes
	// may be used to represent hierarchy (in addition to the DOM's natural hierarchy).
	// If you call the DOM-manipulating functions on ko.virtualElements, you will be able to read and write the state
	// of that virtual hierarchy
	//
	// The point of all this is to support containerless templates (e.g., <!-- ko foreach:someCollection -->blah<!-- /ko -->)
	// without having to scatter special cases all over the binding and templating code.
	// IE 9 cannot reliably read the "nodeValue" property of a comment node (see https://github.com/SteveSanderson/knockout/issues/186)
	// but it does give them a nonstandard alternative property called "text" that it can read reliably. Other browsers don't have that property.
	// So, use node.text where available, and node.nodeValue elsewhere
	var commentNodesHaveTextProperty=document&&document.createComment("test").text==="<!--test-->";var startCommentRegex=commentNodesHaveTextProperty?/^<!--\s*ko(?:\s+([\s\S]+))?\s*-->$/:/^\s*ko(?:\s+([\s\S]+))?\s*$/;var endCommentRegex=commentNodesHaveTextProperty?/^<!--\s*\/ko\s*-->$/:/^\s*\/ko\s*$/;var htmlTagsWithOptionallyClosingChildren={'ul':true,'ol':true};function isStartComment(node){return node.nodeType==8&&startCommentRegex.test(commentNodesHaveTextProperty?node.text:node.nodeValue);}function isEndComment(node){return node.nodeType==8&&endCommentRegex.test(commentNodesHaveTextProperty?node.text:node.nodeValue);}function getVirtualChildren(startComment,allowUnbalanced){var currentNode=startComment;var depth=1;var children=[];while(currentNode=currentNode.nextSibling){if(isEndComment(currentNode)){depth--;if(depth===0)return children;}children.push(currentNode);if(isStartComment(currentNode))depth++;}if(!allowUnbalanced)throw new Error("Cannot find closing comment tag to match: "+startComment.nodeValue);return null;}function getMatchingEndComment(startComment,allowUnbalanced){var allVirtualChildren=getVirtualChildren(startComment,allowUnbalanced);if(allVirtualChildren){if(allVirtualChildren.length>0)return allVirtualChildren[allVirtualChildren.length-1].nextSibling;return startComment.nextSibling;}else return null;// Must have no matching end comment, and allowUnbalanced is true
	}function getUnbalancedChildTags(node){// e.g., from <div>OK</div><!-- ko blah --><span>Another</span>, returns: <!-- ko blah --><span>Another</span>
	//       from <div>OK</div><!-- /ko --><!-- /ko -->,             returns: <!-- /ko --><!-- /ko -->
	var childNode=node.firstChild,captureRemaining=null;if(childNode){do{if(captureRemaining)// We already hit an unbalanced node and are now just scooping up all subsequent nodes
	captureRemaining.push(childNode);else if(isStartComment(childNode)){var matchingEndComment=getMatchingEndComment(childNode,/* allowUnbalanced: */true);if(matchingEndComment)// It's a balanced tag, so skip immediately to the end of this virtual set
	childNode=matchingEndComment;else captureRemaining=[childNode];// It's unbalanced, so start capturing from this point
	}else if(isEndComment(childNode)){captureRemaining=[childNode];// It's unbalanced (if it wasn't, we'd have skipped over it already), so start capturing
	}}while(childNode=childNode.nextSibling);}return captureRemaining;}ko.virtualElements={allowedBindings:{},childNodes:function childNodes(node){return isStartComment(node)?getVirtualChildren(node):node.childNodes;},emptyNode:function emptyNode(node){if(!isStartComment(node))ko.utils.emptyDomNode(node);else{var virtualChildren=ko.virtualElements.childNodes(node);for(var i=0,j=virtualChildren.length;i<j;i++){ko.removeNode(virtualChildren[i]);}}},setDomNodeChildren:function setDomNodeChildren(node,childNodes){if(!isStartComment(node))ko.utils.setDomNodeChildren(node,childNodes);else{ko.virtualElements.emptyNode(node);var endCommentNode=node.nextSibling;// Must be the next sibling, as we just emptied the children
	for(var i=0,j=childNodes.length;i<j;i++){endCommentNode.parentNode.insertBefore(childNodes[i],endCommentNode);}}},prepend:function prepend(containerNode,nodeToPrepend){if(!isStartComment(containerNode)){if(containerNode.firstChild)containerNode.insertBefore(nodeToPrepend,containerNode.firstChild);else containerNode.appendChild(nodeToPrepend);}else{// Start comments must always have a parent and at least one following sibling (the end comment)
	containerNode.parentNode.insertBefore(nodeToPrepend,containerNode.nextSibling);}},insertAfter:function insertAfter(containerNode,nodeToInsert,insertAfterNode){if(!insertAfterNode){ko.virtualElements.prepend(containerNode,nodeToInsert);}else if(!isStartComment(containerNode)){// Insert after insertion point
	if(insertAfterNode.nextSibling)containerNode.insertBefore(nodeToInsert,insertAfterNode.nextSibling);else containerNode.appendChild(nodeToInsert);}else{// Children of start comments must always have a parent and at least one following sibling (the end comment)
	containerNode.parentNode.insertBefore(nodeToInsert,insertAfterNode.nextSibling);}},firstChild:function firstChild(node){if(!isStartComment(node))return node.firstChild;if(!node.nextSibling||isEndComment(node.nextSibling))return null;return node.nextSibling;},nextSibling:function nextSibling(node){if(isStartComment(node))node=getMatchingEndComment(node);if(node.nextSibling&&isEndComment(node.nextSibling))return null;return node.nextSibling;},hasBindingValue:isStartComment,virtualNodeBindingValue:function virtualNodeBindingValue(node){var regexMatch=(commentNodesHaveTextProperty?node.text:node.nodeValue).match(startCommentRegex);return regexMatch?regexMatch[1]:null;},normaliseVirtualElementDomStructure:function normaliseVirtualElementDomStructure(elementVerified){// Workaround for https://github.com/SteveSanderson/knockout/issues/155
	// (IE <= 8 or IE 9 quirks mode parses your HTML weirdly, treating closing </li> tags as if they don't exist, thereby moving comment nodes
	// that are direct descendants of <ul> into the preceding <li>)
	if(!htmlTagsWithOptionallyClosingChildren[ko.utils.tagNameLower(elementVerified)])return;// Scan immediate children to see if they contain unbalanced comment tags. If they do, those comment tags
	// must be intended to appear *after* that child, so move them there.
	var childNode=elementVerified.firstChild;if(childNode){do{if(childNode.nodeType===1){var unbalancedTags=getUnbalancedChildTags(childNode);if(unbalancedTags){// Fix up the DOM by moving the unbalanced tags to where they most likely were intended to be placed - *after* the child
	var nodeToInsertBefore=childNode.nextSibling;for(var i=0;i<unbalancedTags.length;i++){if(nodeToInsertBefore)elementVerified.insertBefore(unbalancedTags[i],nodeToInsertBefore);else elementVerified.appendChild(unbalancedTags[i]);}}}}while(childNode=childNode.nextSibling);}}};})();ko.exportSymbol('virtualElements',ko.virtualElements);ko.exportSymbol('virtualElements.allowedBindings',ko.virtualElements.allowedBindings);ko.exportSymbol('virtualElements.emptyNode',ko.virtualElements.emptyNode);//ko.exportSymbol('virtualElements.firstChild', ko.virtualElements.firstChild);     // firstChild is not minified
	ko.exportSymbol('virtualElements.insertAfter',ko.virtualElements.insertAfter);//ko.exportSymbol('virtualElements.nextSibling', ko.virtualElements.nextSibling);   // nextSibling is not minified
	ko.exportSymbol('virtualElements.prepend',ko.virtualElements.prepend);ko.exportSymbol('virtualElements.setDomNodeChildren',ko.virtualElements.setDomNodeChildren);(function(){var defaultBindingAttributeName="data-bind";ko.bindingProvider=function(){this.bindingCache={};};ko.utils.extend(ko.bindingProvider.prototype,{'nodeHasBindings':function nodeHasBindings(node){switch(node.nodeType){case 1:// Element
	return node.getAttribute(defaultBindingAttributeName)!=null||ko.components['getComponentNameForNode'](node);case 8:// Comment node
	return ko.virtualElements.hasBindingValue(node);default:return false;}},'getBindings':function getBindings(node,bindingContext){var bindingsString=this['getBindingsString'](node,bindingContext),parsedBindings=bindingsString?this['parseBindingsString'](bindingsString,bindingContext,node):null;return ko.components.addBindingsForCustomElement(parsedBindings,node,bindingContext,/* valueAccessors */false);},'getBindingAccessors':function getBindingAccessors(node,bindingContext){var bindingsString=this['getBindingsString'](node,bindingContext),parsedBindings=bindingsString?this['parseBindingsString'](bindingsString,bindingContext,node,{'valueAccessors':true}):null;return ko.components.addBindingsForCustomElement(parsedBindings,node,bindingContext,/* valueAccessors */true);},// The following function is only used internally by this default provider.
	// It's not part of the interface definition for a general binding provider.
	'getBindingsString':function getBindingsString(node,bindingContext){switch(node.nodeType){case 1:return node.getAttribute(defaultBindingAttributeName);// Element
	case 8:return ko.virtualElements.virtualNodeBindingValue(node);// Comment node
	default:return null;}},// The following function is only used internally by this default provider.
	// It's not part of the interface definition for a general binding provider.
	'parseBindingsString':function parseBindingsString(bindingsString,bindingContext,node,options){try{var bindingFunction=createBindingsStringEvaluatorViaCache(bindingsString,this.bindingCache,options);return bindingFunction(bindingContext,node);}catch(ex){ex.message="Unable to parse bindings.\nBindings value: "+bindingsString+"\nMessage: "+ex.message;throw ex;}}});ko.bindingProvider['instance']=new ko.bindingProvider();function createBindingsStringEvaluatorViaCache(bindingsString,cache,options){var cacheKey=bindingsString+(options&&options['valueAccessors']||'');return cache[cacheKey]||(cache[cacheKey]=createBindingsStringEvaluator(bindingsString,options));}function createBindingsStringEvaluator(bindingsString,options){// Build the source for a function that evaluates "expression"
	// For each scope variable, add an extra level of "with" nesting
	// Example result: with(sc1) { with(sc0) { return (expression) } }
	var rewrittenBindings=ko.expressionRewriting.preProcessBindings(bindingsString,options),functionBody="with($context){with($data||{}){return{"+rewrittenBindings+"}}}";return new Function("$context","$element",functionBody);}})();ko.exportSymbol('bindingProvider',ko.bindingProvider);(function(){ko.bindingHandlers={};// The following element types will not be recursed into during binding.
	var bindingDoesNotRecurseIntoElementTypes={// Don't want bindings that operate on text nodes to mutate <script> and <textarea> contents,
	// because it's unexpected and a potential XSS issue.
	// Also bindings should not operate on <template> elements since this breaks in Internet Explorer
	// and because such elements' contents are always intended to be bound in a different context
	// from where they appear in the document.
	'script':true,'textarea':true,'template':true};// Use an overridable method for retrieving binding handlers so that a plugins may support dynamically created handlers
	ko['getBindingHandler']=function(bindingKey){return ko.bindingHandlers[bindingKey];};// The ko.bindingContext constructor is only called directly to create the root context. For child
	// contexts, use bindingContext.createChildContext or bindingContext.extend.
	ko.bindingContext=function(dataItemOrAccessor,parentContext,dataItemAlias,extendCallback){// The binding context object includes static properties for the current, parent, and root view models.
	// If a view model is actually stored in an observable, the corresponding binding context object, and
	// any child contexts, must be updated when the view model is changed.
	function updateContext(){// Most of the time, the context will directly get a view model object, but if a function is given,
	// we call the function to retrieve the view model. If the function accesses any observables or returns
	// an observable, the dependency is tracked, and those observables can later cause the binding
	// context to be updated.
	var dataItemOrObservable=isFunc?dataItemOrAccessor():dataItemOrAccessor,dataItem=ko.utils.unwrapObservable(dataItemOrObservable);if(parentContext){// When a "parent" context is given, register a dependency on the parent context. Thus whenever the
	// parent context is updated, this context will also be updated.
	if(parentContext._subscribable)parentContext._subscribable();// Copy $root and any custom properties from the parent context
	ko.utils.extend(self,parentContext);// Because the above copy overwrites our own properties, we need to reset them.
	// During the first execution, "subscribable" isn't set, so don't bother doing the update then.
	if(subscribable){self._subscribable=subscribable;}}else{self['$parents']=[];self['$root']=dataItem;// Export 'ko' in the binding context so it will be available in bindings and templates
	// even if 'ko' isn't exported as a global, such as when using an AMD loader.
	// See https://github.com/SteveSanderson/knockout/issues/490
	self['ko']=ko;}self['$rawData']=dataItemOrObservable;self['$data']=dataItem;if(dataItemAlias)self[dataItemAlias]=dataItem;// The extendCallback function is provided when creating a child context or extending a context.
	// It handles the specific actions needed to finish setting up the binding context. Actions in this
	// function could also add dependencies to this binding context.
	if(extendCallback)extendCallback(self,parentContext,dataItem);return self['$data'];}function disposeWhen(){return nodes&&!ko.utils.anyDomNodeIsAttachedToDocument(nodes);}var self=this,isFunc=typeof dataItemOrAccessor=="function"&&!ko.isObservable(dataItemOrAccessor),nodes,subscribable=ko.dependentObservable(updateContext,null,{disposeWhen:disposeWhen,disposeWhenNodeIsRemoved:true});// At this point, the binding context has been initialized, and the "subscribable" computed observable is
	// subscribed to any observables that were accessed in the process. If there is nothing to track, the
	// computed will be inactive, and we can safely throw it away. If it's active, the computed is stored in
	// the context object.
	if(subscribable.isActive()){self._subscribable=subscribable;// Always notify because even if the model ($data) hasn't changed, other context properties might have changed
	subscribable['equalityComparer']=null;// We need to be able to dispose of this computed observable when it's no longer needed. This would be
	// easy if we had a single node to watch, but binding contexts can be used by many different nodes, and
	// we cannot assume that those nodes have any relation to each other. So instead we track any node that
	// the context is attached to, and dispose the computed when all of those nodes have been cleaned.
	// Add properties to *subscribable* instead of *self* because any properties added to *self* may be overwritten on updates
	nodes=[];subscribable._addNode=function(node){nodes.push(node);ko.utils.domNodeDisposal.addDisposeCallback(node,function(node){ko.utils.arrayRemoveItem(nodes,node);if(!nodes.length){subscribable.dispose();self._subscribable=subscribable=undefined;}});};}};// Extend the binding context hierarchy with a new view model object. If the parent context is watching
	// any observables, the new child context will automatically get a dependency on the parent context.
	// But this does not mean that the $data value of the child context will also get updated. If the child
	// view model also depends on the parent view model, you must provide a function that returns the correct
	// view model on each update.
	ko.bindingContext.prototype['createChildContext']=function(dataItemOrAccessor,dataItemAlias,extendCallback){return new ko.bindingContext(dataItemOrAccessor,this,dataItemAlias,function(self,parentContext){// Extend the context hierarchy by setting the appropriate pointers
	self['$parentContext']=parentContext;self['$parent']=parentContext['$data'];self['$parents']=(parentContext['$parents']||[]).slice(0);self['$parents'].unshift(self['$parent']);if(extendCallback)extendCallback(self);});};// Extend the binding context with new custom properties. This doesn't change the context hierarchy.
	// Similarly to "child" contexts, provide a function here to make sure that the correct values are set
	// when an observable view model is updated.
	ko.bindingContext.prototype['extend']=function(properties){// If the parent context references an observable view model, "_subscribable" will always be the
	// latest view model object. If not, "_subscribable" isn't set, and we can use the static "$data" value.
	return new ko.bindingContext(this._subscribable||this['$data'],this,null,function(self,parentContext){// This "child" context doesn't directly track a parent observable view model,
	// so we need to manually set the $rawData value to match the parent.
	self['$rawData']=parentContext['$rawData'];ko.utils.extend(self,typeof properties=="function"?properties():properties);});};// Returns the valueAccesor function for a binding value
	function makeValueAccessor(value){return function(){return value;};}// Returns the value of a valueAccessor function
	function evaluateValueAccessor(valueAccessor){return valueAccessor();}// Given a function that returns bindings, create and return a new object that contains
	// binding value-accessors functions. Each accessor function calls the original function
	// so that it always gets the latest value and all dependencies are captured. This is used
	// by ko.applyBindingsToNode and getBindingsAndMakeAccessors.
	function makeAccessorsFromFunction(callback){return ko.utils.objectMap(ko.dependencyDetection.ignore(callback),function(value,key){return function(){return callback()[key];};});}// Given a bindings function or object, create and return a new object that contains
	// binding value-accessors functions. This is used by ko.applyBindingsToNode.
	function makeBindingAccessors(bindings,context,node){if(typeof bindings==='function'){return makeAccessorsFromFunction(bindings.bind(null,context,node));}else{return ko.utils.objectMap(bindings,makeValueAccessor);}}// This function is used if the binding provider doesn't include a getBindingAccessors function.
	// It must be called with 'this' set to the provider instance.
	function getBindingsAndMakeAccessors(node,context){return makeAccessorsFromFunction(this['getBindings'].bind(this,node,context));}function validateThatBindingIsAllowedForVirtualElements(bindingName){var validator=ko.virtualElements.allowedBindings[bindingName];if(!validator)throw new Error("The binding '"+bindingName+"' cannot be used with virtual elements");}function applyBindingsToDescendantsInternal(bindingContext,elementOrVirtualElement,bindingContextsMayDifferFromDomParentElement){var currentChild,nextInQueue=ko.virtualElements.firstChild(elementOrVirtualElement),provider=ko.bindingProvider['instance'],preprocessNode=provider['preprocessNode'];// Preprocessing allows a binding provider to mutate a node before bindings are applied to it. For example it's
	// possible to insert new siblings after it, and/or replace the node with a different one. This can be used to
	// implement custom binding syntaxes, such as {{ value }} for string interpolation, or custom element types that
	// trigger insertion of <template> contents at that point in the document.
	if(preprocessNode){while(currentChild=nextInQueue){nextInQueue=ko.virtualElements.nextSibling(currentChild);preprocessNode.call(provider,currentChild);}// Reset nextInQueue for the next loop
	nextInQueue=ko.virtualElements.firstChild(elementOrVirtualElement);}while(currentChild=nextInQueue){// Keep a record of the next child *before* applying bindings, in case the binding removes the current child from its position
	nextInQueue=ko.virtualElements.nextSibling(currentChild);applyBindingsToNodeAndDescendantsInternal(bindingContext,currentChild,bindingContextsMayDifferFromDomParentElement);}}function applyBindingsToNodeAndDescendantsInternal(bindingContext,nodeVerified,bindingContextMayDifferFromDomParentElement){var shouldBindDescendants=true;// Perf optimisation: Apply bindings only if...
	// (1) We need to store the binding context on this node (because it may differ from the DOM parent node's binding context)
	//     Note that we can't store binding contexts on non-elements (e.g., text nodes), as IE doesn't allow expando properties for those
	// (2) It might have bindings (e.g., it has a data-bind attribute, or it's a marker for a containerless template)
	var isElement=nodeVerified.nodeType===1;if(isElement)// Workaround IE <= 8 HTML parsing weirdness
	ko.virtualElements.normaliseVirtualElementDomStructure(nodeVerified);var shouldApplyBindings=isElement&&bindingContextMayDifferFromDomParentElement||// Case (1)
	ko.bindingProvider['instance']['nodeHasBindings'](nodeVerified);// Case (2)
	if(shouldApplyBindings)shouldBindDescendants=applyBindingsToNodeInternal(nodeVerified,null,bindingContext,bindingContextMayDifferFromDomParentElement)['shouldBindDescendants'];if(shouldBindDescendants&&!bindingDoesNotRecurseIntoElementTypes[ko.utils.tagNameLower(nodeVerified)]){// We're recursing automatically into (real or virtual) child nodes without changing binding contexts. So,
	//  * For children of a *real* element, the binding context is certainly the same as on their DOM .parentNode,
	//    hence bindingContextsMayDifferFromDomParentElement is false
	//  * For children of a *virtual* element, we can't be sure. Evaluating .parentNode on those children may
	//    skip over any number of intermediate virtual elements, any of which might define a custom binding context,
	//    hence bindingContextsMayDifferFromDomParentElement is true
	applyBindingsToDescendantsInternal(bindingContext,nodeVerified,/* bindingContextsMayDifferFromDomParentElement: */!isElement);}}var boundElementDomDataKey=ko.utils.domData.nextKey();function topologicalSortBindings(bindings){// Depth-first sort
	var result=[],// The list of key/handler pairs that we will return
	bindingsConsidered={},// A temporary record of which bindings are already in 'result'
	cyclicDependencyStack=[];// Keeps track of a depth-search so that, if there's a cycle, we know which bindings caused it
	ko.utils.objectForEach(bindings,function pushBinding(bindingKey){if(!bindingsConsidered[bindingKey]){var binding=ko['getBindingHandler'](bindingKey);if(binding){// First add dependencies (if any) of the current binding
	if(binding['after']){cyclicDependencyStack.push(bindingKey);ko.utils.arrayForEach(binding['after'],function(bindingDependencyKey){if(bindings[bindingDependencyKey]){if(ko.utils.arrayIndexOf(cyclicDependencyStack,bindingDependencyKey)!==-1){throw Error("Cannot combine the following bindings, because they have a cyclic dependency: "+cyclicDependencyStack.join(", "));}else{pushBinding(bindingDependencyKey);}}});cyclicDependencyStack.length--;}// Next add the current binding
	result.push({key:bindingKey,handler:binding});}bindingsConsidered[bindingKey]=true;}});return result;}function applyBindingsToNodeInternal(node,sourceBindings,bindingContext,bindingContextMayDifferFromDomParentElement){// Prevent multiple applyBindings calls for the same node, except when a binding value is specified
	var alreadyBound=ko.utils.domData.get(node,boundElementDomDataKey);if(!sourceBindings){if(alreadyBound){throw Error("You cannot apply bindings multiple times to the same element.");}ko.utils.domData.set(node,boundElementDomDataKey,true);}// Optimization: Don't store the binding context on this node if it's definitely the same as on node.parentNode, because
	// we can easily recover it just by scanning up the node's ancestors in the DOM
	// (note: here, parent node means "real DOM parent" not "virtual parent", as there's no O(1) way to find the virtual parent)
	if(!alreadyBound&&bindingContextMayDifferFromDomParentElement)ko.storedBindingContextForNode(node,bindingContext);// Use bindings if given, otherwise fall back on asking the bindings provider to give us some bindings
	var bindings;if(sourceBindings&&typeof sourceBindings!=='function'){bindings=sourceBindings;}else{var provider=ko.bindingProvider['instance'],getBindings=provider['getBindingAccessors']||getBindingsAndMakeAccessors;// Get the binding from the provider within a computed observable so that we can update the bindings whenever
	// the binding context is updated or if the binding provider accesses observables.
	var bindingsUpdater=ko.dependentObservable(function(){bindings=sourceBindings?sourceBindings(bindingContext,node):getBindings.call(provider,node,bindingContext);// Register a dependency on the binding context to support observable view models.
	if(bindings&&bindingContext._subscribable)bindingContext._subscribable();return bindings;},null,{disposeWhenNodeIsRemoved:node});if(!bindings||!bindingsUpdater.isActive())bindingsUpdater=null;}var bindingHandlerThatControlsDescendantBindings;if(bindings){var getValueAccessor;var orderedBindings;(function(){// Use of allBindings as a function is maintained for backwards compatibility, but its use is deprecated
	var allBindings=function allBindings(){return ko.utils.objectMap(bindingsUpdater?bindingsUpdater():bindings,evaluateValueAccessor);};// The following is the 3.x allBindings API
	// Return the value accessor for a given binding. When bindings are static (won't be updated because of a binding
	// context update), just return the value accessor from the binding. Otherwise, return a function that always gets
	// the latest binding value and registers a dependency on the binding updater.
	getValueAccessor=bindingsUpdater?function(bindingKey){return function(){return evaluateValueAccessor(bindingsUpdater()[bindingKey]);};}:function(bindingKey){return bindings[bindingKey];};allBindings['get']=function(key){return bindings[key]&&evaluateValueAccessor(getValueAccessor(key));};allBindings['has']=function(key){return key in bindings;};// First put the bindings into the right order
	orderedBindings=topologicalSortBindings(bindings);// Go through the sorted bindings, calling init and update for each
	ko.utils.arrayForEach(orderedBindings,function(bindingKeyAndHandler){// Note that topologicalSortBindings has already filtered out any nonexistent binding handlers,
	// so bindingKeyAndHandler.handler will always be nonnull.
	var handlerInitFn=bindingKeyAndHandler.handler["init"],handlerUpdateFn=bindingKeyAndHandler.handler["update"],bindingKey=bindingKeyAndHandler.key;if(node.nodeType===8){validateThatBindingIsAllowedForVirtualElements(bindingKey);}try{// Run init, ignoring any dependencies
	if(typeof handlerInitFn=="function"){ko.dependencyDetection.ignore(function(){var initResult=handlerInitFn(node,getValueAccessor(bindingKey),allBindings,bindingContext['$data'],bindingContext);// If this binding handler claims to control descendant bindings, make a note of this
	if(initResult&&initResult['controlsDescendantBindings']){if(bindingHandlerThatControlsDescendantBindings!==undefined)throw new Error("Multiple bindings ("+bindingHandlerThatControlsDescendantBindings+" and "+bindingKey+") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.");bindingHandlerThatControlsDescendantBindings=bindingKey;}});}// Run update in its own computed wrapper
	if(typeof handlerUpdateFn=="function"){ko.dependentObservable(function(){handlerUpdateFn(node,getValueAccessor(bindingKey),allBindings,bindingContext['$data'],bindingContext);},null,{disposeWhenNodeIsRemoved:node});}}catch(ex){ex.message="Unable to process binding \""+bindingKey+": "+bindings[bindingKey]+"\"\nMessage: "+ex.message;throw ex;}});})();}return{'shouldBindDescendants':bindingHandlerThatControlsDescendantBindings===undefined};};var storedBindingContextDomDataKey=ko.utils.domData.nextKey();ko.storedBindingContextForNode=function(node,bindingContext){if(arguments.length==2){ko.utils.domData.set(node,storedBindingContextDomDataKey,bindingContext);if(bindingContext._subscribable)bindingContext._subscribable._addNode(node);}else{return ko.utils.domData.get(node,storedBindingContextDomDataKey);}};function getBindingContext(viewModelOrBindingContext){return viewModelOrBindingContext&&viewModelOrBindingContext instanceof ko.bindingContext?viewModelOrBindingContext:new ko.bindingContext(viewModelOrBindingContext);}ko.applyBindingAccessorsToNode=function(node,bindings,viewModelOrBindingContext){if(node.nodeType===1)// If it's an element, workaround IE <= 8 HTML parsing weirdness
	ko.virtualElements.normaliseVirtualElementDomStructure(node);return applyBindingsToNodeInternal(node,bindings,getBindingContext(viewModelOrBindingContext),true);};ko.applyBindingsToNode=function(node,bindings,viewModelOrBindingContext){var context=getBindingContext(viewModelOrBindingContext);return ko.applyBindingAccessorsToNode(node,makeBindingAccessors(bindings,context,node),context);};ko.applyBindingsToDescendants=function(viewModelOrBindingContext,rootNode){if(rootNode.nodeType===1||rootNode.nodeType===8)applyBindingsToDescendantsInternal(getBindingContext(viewModelOrBindingContext),rootNode,true);};ko.applyBindings=function(viewModelOrBindingContext,rootNode){// If jQuery is loaded after Knockout, we won't initially have access to it. So save it here.
	if(!jQueryInstance&&window['jQuery']){jQueryInstance=window['jQuery'];}if(rootNode&&rootNode.nodeType!==1&&rootNode.nodeType!==8)throw new Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node");rootNode=rootNode||window.document.body;// Make "rootNode" parameter optional
	applyBindingsToNodeAndDescendantsInternal(getBindingContext(viewModelOrBindingContext),rootNode,true);};// Retrieving binding context from arbitrary nodes
	ko.contextFor=function(node){// We can only do something meaningful for elements and comment nodes (in particular, not text nodes, as IE can't store domdata for them)
	switch(node.nodeType){case 1:case 8:var context=ko.storedBindingContextForNode(node);if(context)return context;if(node.parentNode)return ko.contextFor(node.parentNode);break;}return undefined;};ko.dataFor=function(node){var context=ko.contextFor(node);return context?context['$data']:undefined;};ko.exportSymbol('bindingHandlers',ko.bindingHandlers);ko.exportSymbol('applyBindings',ko.applyBindings);ko.exportSymbol('applyBindingsToDescendants',ko.applyBindingsToDescendants);ko.exportSymbol('applyBindingAccessorsToNode',ko.applyBindingAccessorsToNode);ko.exportSymbol('applyBindingsToNode',ko.applyBindingsToNode);ko.exportSymbol('contextFor',ko.contextFor);ko.exportSymbol('dataFor',ko.dataFor);})();(function(undefined){var loadingSubscribablesCache={},// Tracks component loads that are currently in flight
	loadedDefinitionsCache={};// Tracks component loads that have already completed
	ko.components={get:function get(componentName,callback){var cachedDefinition=getObjectOwnProperty(loadedDefinitionsCache,componentName);if(cachedDefinition){// It's already loaded and cached. Reuse the same definition object.
	// Note that for API consistency, even cache hits complete asynchronously by default.
	// You can bypass this by putting synchronous:true on your component config.
	if(cachedDefinition.isSynchronousComponent){ko.dependencyDetection.ignore(function(){// See comment in loaderRegistryBehaviors.js for reasoning
	callback(cachedDefinition.definition);});}else{ko.tasks.schedule(function(){callback(cachedDefinition.definition);});}}else{// Join the loading process that is already underway, or start a new one.
	loadComponentAndNotify(componentName,callback);}},clearCachedDefinition:function clearCachedDefinition(componentName){delete loadedDefinitionsCache[componentName];},_getFirstResultFromLoaders:getFirstResultFromLoaders};function getObjectOwnProperty(obj,propName){return obj.hasOwnProperty(propName)?obj[propName]:undefined;}function loadComponentAndNotify(componentName,callback){var subscribable=getObjectOwnProperty(loadingSubscribablesCache,componentName),completedAsync;if(!subscribable){// It's not started loading yet. Start loading, and when it's done, move it to loadedDefinitionsCache.
	subscribable=loadingSubscribablesCache[componentName]=new ko.subscribable();subscribable.subscribe(callback);beginLoadingComponent(componentName,function(definition,config){var isSynchronousComponent=!!(config&&config['synchronous']);loadedDefinitionsCache[componentName]={definition:definition,isSynchronousComponent:isSynchronousComponent};delete loadingSubscribablesCache[componentName];// For API consistency, all loads complete asynchronously. However we want to avoid
	// adding an extra task schedule if it's unnecessary (i.e., the completion is already
	// async).
	//
	// You can bypass the 'always asynchronous' feature by putting the synchronous:true
	// flag on your component configuration when you register it.
	if(completedAsync||isSynchronousComponent){// Note that notifySubscribers ignores any dependencies read within the callback.
	// See comment in loaderRegistryBehaviors.js for reasoning
	subscribable['notifySubscribers'](definition);}else{ko.tasks.schedule(function(){subscribable['notifySubscribers'](definition);});}});completedAsync=true;}else{subscribable.subscribe(callback);}}function beginLoadingComponent(componentName,callback){getFirstResultFromLoaders('getConfig',[componentName],function(config){if(config){// We have a config, so now load its definition
	getFirstResultFromLoaders('loadComponent',[componentName,config],function(definition){callback(definition,config);});}else{// The component has no config - it's unknown to all the loaders.
	// Note that this is not an error (e.g., a module loading error) - that would abort the
	// process and this callback would not run. For this callback to run, all loaders must
	// have confirmed they don't know about this component.
	callback(null,null);}});}function getFirstResultFromLoaders(methodName,argsExceptCallback,callback,candidateLoaders){// On the first call in the stack, start with the full set of loaders
	if(!candidateLoaders){candidateLoaders=ko.components['loaders'].slice(0);// Use a copy, because we'll be mutating this array
	}// Try the next candidate
	var currentCandidateLoader=candidateLoaders.shift();if(currentCandidateLoader){var methodInstance=currentCandidateLoader[methodName];if(methodInstance){var wasAborted=false,synchronousReturnValue=methodInstance.apply(currentCandidateLoader,argsExceptCallback.concat(function(result){if(wasAborted){callback(null);}else if(result!==null){// This candidate returned a value. Use it.
	callback(result);}else{// Try the next candidate
	getFirstResultFromLoaders(methodName,argsExceptCallback,callback,candidateLoaders);}}));// Currently, loaders may not return anything synchronously. This leaves open the possibility
	// that we'll extend the API to support synchronous return values in the future. It won't be
	// a breaking change, because currently no loader is allowed to return anything except undefined.
	if(synchronousReturnValue!==undefined){wasAborted=true;// Method to suppress exceptions will remain undocumented. This is only to keep
	// KO's specs running tidily, since we can observe the loading got aborted without
	// having exceptions cluttering up the console too.
	if(!currentCandidateLoader['suppressLoaderExceptions']){throw new Error('Component loaders must supply values by invoking the callback, not by returning values synchronously.');}}}else{// This candidate doesn't have the relevant handler. Synchronously move on to the next one.
	getFirstResultFromLoaders(methodName,argsExceptCallback,callback,candidateLoaders);}}else{// No candidates returned a value
	callback(null);}}// Reference the loaders via string name so it's possible for developers
	// to replace the whole array by assigning to ko.components.loaders
	ko.components['loaders']=[];ko.exportSymbol('components',ko.components);ko.exportSymbol('components.get',ko.components.get);ko.exportSymbol('components.clearCachedDefinition',ko.components.clearCachedDefinition);})();(function(undefined){// The default loader is responsible for two things:
	// 1. Maintaining the default in-memory registry of component configuration objects
	//    (i.e., the thing you're writing to when you call ko.components.register(someName, ...))
	// 2. Answering requests for components by fetching configuration objects
	//    from that default in-memory registry and resolving them into standard
	//    component definition objects (of the form { createViewModel: ..., template: ... })
	// Custom loaders may override either of these facilities, i.e.,
	// 1. To supply configuration objects from some other source (e.g., conventions)
	// 2. Or, to resolve configuration objects by loading viewmodels/templates via arbitrary logic.
	var defaultConfigRegistry={};ko.components.register=function(componentName,config){if(!config){throw new Error('Invalid configuration for '+componentName);}if(ko.components.isRegistered(componentName)){throw new Error('Component '+componentName+' is already registered');}defaultConfigRegistry[componentName]=config;};ko.components.isRegistered=function(componentName){return defaultConfigRegistry.hasOwnProperty(componentName);};ko.components.unregister=function(componentName){delete defaultConfigRegistry[componentName];ko.components.clearCachedDefinition(componentName);};ko.components.defaultLoader={'getConfig':function getConfig(componentName,callback){var result=defaultConfigRegistry.hasOwnProperty(componentName)?defaultConfigRegistry[componentName]:null;callback(result);},'loadComponent':function loadComponent(componentName,config,callback){var errorCallback=makeErrorCallback(componentName);possiblyGetConfigFromAmd(errorCallback,config,function(loadedConfig){resolveConfig(componentName,errorCallback,loadedConfig,callback);});},'loadTemplate':function loadTemplate(componentName,templateConfig,callback){resolveTemplate(makeErrorCallback(componentName),templateConfig,callback);},'loadViewModel':function loadViewModel(componentName,viewModelConfig,callback){resolveViewModel(makeErrorCallback(componentName),viewModelConfig,callback);}};var createViewModelKey='createViewModel';// Takes a config object of the form { template: ..., viewModel: ... }, and asynchronously convert it
	// into the standard component definition format:
	//    { template: <ArrayOfDomNodes>, createViewModel: function(params, componentInfo) { ... } }.
	// Since both template and viewModel may need to be resolved asynchronously, both tasks are performed
	// in parallel, and the results joined when both are ready. We don't depend on any promises infrastructure,
	// so this is implemented manually below.
	function resolveConfig(componentName,errorCallback,config,callback){var result={},makeCallBackWhenZero=2,tryIssueCallback=function tryIssueCallback(){if(--makeCallBackWhenZero===0){callback(result);}},templateConfig=config['template'],viewModelConfig=config['viewModel'];if(templateConfig){possiblyGetConfigFromAmd(errorCallback,templateConfig,function(loadedConfig){ko.components._getFirstResultFromLoaders('loadTemplate',[componentName,loadedConfig],function(resolvedTemplate){result['template']=resolvedTemplate;tryIssueCallback();});});}else{tryIssueCallback();}if(viewModelConfig){possiblyGetConfigFromAmd(errorCallback,viewModelConfig,function(loadedConfig){ko.components._getFirstResultFromLoaders('loadViewModel',[componentName,loadedConfig],function(resolvedViewModel){result[createViewModelKey]=resolvedViewModel;tryIssueCallback();});});}else{tryIssueCallback();}}function resolveTemplate(errorCallback,templateConfig,callback){if(typeof templateConfig==='string'){// Markup - parse it
	callback(ko.utils.parseHtmlFragment(templateConfig));}else if(templateConfig instanceof Array){// Assume already an array of DOM nodes - pass through unchanged
	callback(templateConfig);}else if(isDocumentFragment(templateConfig)){// Document fragment - use its child nodes
	callback(ko.utils.makeArray(templateConfig.childNodes));}else if(templateConfig['element']){var element=templateConfig['element'];if(isDomElement(element)){// Element instance - copy its child nodes
	callback(cloneNodesFromTemplateSourceElement(element));}else if(typeof element==='string'){// Element ID - find it, then copy its child nodes
	var elemInstance=document.getElementById(element);if(elemInstance){callback(cloneNodesFromTemplateSourceElement(elemInstance));}else{errorCallback('Cannot find element with ID '+element);}}else{errorCallback('Unknown element type: '+element);}}else{errorCallback('Unknown template value: '+templateConfig);}}function resolveViewModel(errorCallback,viewModelConfig,callback){if(typeof viewModelConfig==='function'){// Constructor - convert to standard factory function format
	// By design, this does *not* supply componentInfo to the constructor, as the intent is that
	// componentInfo contains non-viewmodel data (e.g., the component's element) that should only
	// be used in factory functions, not viewmodel constructors.
	callback(function(params/*, componentInfo */){return new viewModelConfig(params);});}else if(typeof viewModelConfig[createViewModelKey]==='function'){// Already a factory function - use it as-is
	callback(viewModelConfig[createViewModelKey]);}else if('instance'in viewModelConfig){// Fixed object instance - promote to createViewModel format for API consistency
	var fixedInstance=viewModelConfig['instance'];callback(function(params,componentInfo){return fixedInstance;});}else if('viewModel'in viewModelConfig){// Resolved AMD module whose value is of the form { viewModel: ... }
	resolveViewModel(errorCallback,viewModelConfig['viewModel'],callback);}else{errorCallback('Unknown viewModel value: '+viewModelConfig);}}function cloneNodesFromTemplateSourceElement(elemInstance){switch(ko.utils.tagNameLower(elemInstance)){case'script':return ko.utils.parseHtmlFragment(elemInstance.text);case'textarea':return ko.utils.parseHtmlFragment(elemInstance.value);case'template':// For browsers with proper <template> element support (i.e., where the .content property
	// gives a document fragment), use that document fragment.
	if(isDocumentFragment(elemInstance.content)){return ko.utils.cloneNodes(elemInstance.content.childNodes);}}// Regular elements such as <div>, and <template> elements on old browsers that don't really
	// understand <template> and just treat it as a regular container
	return ko.utils.cloneNodes(elemInstance.childNodes);}function isDomElement(obj){if(window['HTMLElement']){return obj instanceof HTMLElement;}else{return obj&&obj.tagName&&obj.nodeType===1;}}function isDocumentFragment(obj){if(window['DocumentFragment']){return obj instanceof DocumentFragment;}else{return obj&&obj.nodeType===11;}}function possiblyGetConfigFromAmd(errorCallback,config,callback){if(typeof config['require']==='string'){// The config is the value of an AMD module
	if(amdRequire||window['require']){(amdRequire||window['require'])([config['require']],callback);}else{errorCallback('Uses require, but no AMD loader is present');}}else{callback(config);}}function makeErrorCallback(componentName){return function(message){throw new Error('Component \''+componentName+'\': '+message);};}ko.exportSymbol('components.register',ko.components.register);ko.exportSymbol('components.isRegistered',ko.components.isRegistered);ko.exportSymbol('components.unregister',ko.components.unregister);// Expose the default loader so that developers can directly ask it for configuration
	// or to resolve configuration
	ko.exportSymbol('components.defaultLoader',ko.components.defaultLoader);// By default, the default loader is the only registered component loader
	ko.components['loaders'].push(ko.components.defaultLoader);// Privately expose the underlying config registry for use in old-IE shim
	ko.components._allRegisteredComponents=defaultConfigRegistry;})();(function(undefined){// Overridable API for determining which component name applies to a given node. By overriding this,
	// you can for example map specific tagNames to components that are not preregistered.
	ko.components['getComponentNameForNode']=function(node){var tagNameLower=ko.utils.tagNameLower(node);if(ko.components.isRegistered(tagNameLower)){// Try to determine that this node can be considered a *custom* element; see https://github.com/knockout/knockout/issues/1603
	if(tagNameLower.indexOf('-')!=-1||''+node=="[object HTMLUnknownElement]"||ko.utils.ieVersion<=8&&node.tagName===tagNameLower){return tagNameLower;}}};ko.components.addBindingsForCustomElement=function(allBindings,node,bindingContext,valueAccessors){// Determine if it's really a custom element matching a component
	if(node.nodeType===1){var componentName=ko.components['getComponentNameForNode'](node);if(componentName){// It does represent a component, so add a component binding for it
	allBindings=allBindings||{};if(allBindings['component']){// Avoid silently overwriting some other 'component' binding that may already be on the element
	throw new Error('Cannot use the "component" binding on a custom element matching a component');}var componentBindingValue={'name':componentName,'params':getComponentParamsFromCustomElement(node,bindingContext)};allBindings['component']=valueAccessors?function(){return componentBindingValue;}:componentBindingValue;}}return allBindings;};var nativeBindingProviderInstance=new ko.bindingProvider();function getComponentParamsFromCustomElement(elem,bindingContext){var paramsAttribute=elem.getAttribute('params');if(paramsAttribute){var params=nativeBindingProviderInstance['parseBindingsString'](paramsAttribute,bindingContext,elem,{'valueAccessors':true,'bindingParams':true}),rawParamComputedValues=ko.utils.objectMap(params,function(paramValue,paramName){return ko.computed(paramValue,null,{disposeWhenNodeIsRemoved:elem});}),result=ko.utils.objectMap(rawParamComputedValues,function(paramValueComputed,paramName){var paramValue=paramValueComputed.peek();// Does the evaluation of the parameter value unwrap any observables?
	if(!paramValueComputed.isActive()){// No it doesn't, so there's no need for any computed wrapper. Just pass through the supplied value directly.
	// Example: "someVal: firstName, age: 123" (whether or not firstName is an observable/computed)
	return paramValue;}else{// Yes it does. Supply a computed property that unwraps both the outer (binding expression)
	// level of observability, and any inner (resulting model value) level of observability.
	// This means the component doesn't have to worry about multiple unwrapping. If the value is a
	// writable observable, the computed will also be writable and pass the value on to the observable.
	return ko.computed({'read':function read(){return ko.utils.unwrapObservable(paramValueComputed());},'write':ko.isWriteableObservable(paramValue)&&function(value){paramValueComputed()(value);},disposeWhenNodeIsRemoved:elem});}});// Give access to the raw computeds, as long as that wouldn't overwrite any custom param also called '$raw'
	// This is in case the developer wants to react to outer (binding) observability separately from inner
	// (model value) observability, or in case the model value observable has subobservables.
	if(!result.hasOwnProperty('$raw')){result['$raw']=rawParamComputedValues;}return result;}else{// For consistency, absence of a "params" attribute is treated the same as the presence of
	// any empty one. Otherwise component viewmodels need special code to check whether or not
	// 'params' or 'params.$raw' is null/undefined before reading subproperties, which is annoying.
	return{'$raw':{}};}}// --------------------------------------------------------------------------------
	// Compatibility code for older (pre-HTML5) IE browsers
	if(ko.utils.ieVersion<9){// Whenever you preregister a component, enable it as a custom element in the current document
	ko.components['register']=function(originalFunction){return function(componentName){document.createElement(componentName);// Allows IE<9 to parse markup containing the custom element
	return originalFunction.apply(this,arguments);};}(ko.components['register']);// Whenever you create a document fragment, enable all preregistered component names as custom elements
	// This is needed to make innerShiv/jQuery HTML parsing correctly handle the custom elements
	document.createDocumentFragment=function(originalFunction){return function(){var newDocFrag=originalFunction(),allComponents=ko.components._allRegisteredComponents;for(var componentName in allComponents){if(allComponents.hasOwnProperty(componentName)){newDocFrag.createElement(componentName);}}return newDocFrag;};}(document.createDocumentFragment);}})();(function(undefined){var componentLoadingOperationUniqueId=0;ko.bindingHandlers['component']={'init':function init(element,valueAccessor,ignored1,ignored2,bindingContext){var currentViewModel,currentLoadingOperationId,disposeAssociatedComponentViewModel=function disposeAssociatedComponentViewModel(){var currentViewModelDispose=currentViewModel&&currentViewModel['dispose'];if(typeof currentViewModelDispose==='function'){currentViewModelDispose.call(currentViewModel);}currentViewModel=null;// Any in-flight loading operation is no longer relevant, so make sure we ignore its completion
	currentLoadingOperationId=null;},originalChildNodes=ko.utils.makeArray(ko.virtualElements.childNodes(element));ko.utils.domNodeDisposal.addDisposeCallback(element,disposeAssociatedComponentViewModel);ko.computed(function(){var value=ko.utils.unwrapObservable(valueAccessor()),componentName,componentParams;if(typeof value==='string'){componentName=value;}else{componentName=ko.utils.unwrapObservable(value['name']);componentParams=ko.utils.unwrapObservable(value['params']);}if(!componentName){throw new Error('No component name specified');}var loadingOperationId=currentLoadingOperationId=++componentLoadingOperationUniqueId;ko.components.get(componentName,function(componentDefinition){// If this is not the current load operation for this element, ignore it.
	if(currentLoadingOperationId!==loadingOperationId){return;}// Clean up previous state
	disposeAssociatedComponentViewModel();// Instantiate and bind new component. Implicitly this cleans any old DOM nodes.
	if(!componentDefinition){throw new Error('Unknown component \''+componentName+'\'');}cloneTemplateIntoElement(componentName,componentDefinition,element);var componentViewModel=createViewModel(componentDefinition,element,originalChildNodes,componentParams),childBindingContext=bindingContext['createChildContext'](componentViewModel,/* dataItemAlias */undefined,function(ctx){ctx['$component']=componentViewModel;ctx['$componentTemplateNodes']=originalChildNodes;});currentViewModel=componentViewModel;ko.applyBindingsToDescendants(childBindingContext,element);});},null,{disposeWhenNodeIsRemoved:element});return{'controlsDescendantBindings':true};}};ko.virtualElements.allowedBindings['component']=true;function cloneTemplateIntoElement(componentName,componentDefinition,element){var template=componentDefinition['template'];if(!template){throw new Error('Component \''+componentName+'\' has no template');}var clonedNodesArray=ko.utils.cloneNodes(template);ko.virtualElements.setDomNodeChildren(element,clonedNodesArray);}function createViewModel(componentDefinition,element,originalChildNodes,componentParams){var componentViewModelFactory=componentDefinition['createViewModel'];return componentViewModelFactory?componentViewModelFactory.call(componentDefinition,componentParams,{'element':element,'templateNodes':originalChildNodes}):componentParams;// Template-only component
	}})();var attrHtmlToJavascriptMap={'class':'className','for':'htmlFor'};ko.bindingHandlers['attr']={'update':function update(element,valueAccessor,allBindings){var value=ko.utils.unwrapObservable(valueAccessor())||{};ko.utils.objectForEach(value,function(attrName,attrValue){attrValue=ko.utils.unwrapObservable(attrValue);// To cover cases like "attr: { checked:someProp }", we want to remove the attribute entirely
	// when someProp is a "no value"-like value (strictly null, false, or undefined)
	// (because the absence of the "checked" attr is how to mark an element as not checked, etc.)
	var toRemove=attrValue===false||attrValue===null||attrValue===undefined;if(toRemove)element.removeAttribute(attrName);// In IE <= 7 and IE8 Quirks Mode, you have to use the Javascript property name instead of the
	// HTML attribute name for certain attributes. IE8 Standards Mode supports the correct behavior,
	// but instead of figuring out the mode, we'll just set the attribute through the Javascript
	// property for IE <= 8.
	if(ko.utils.ieVersion<=8&&attrName in attrHtmlToJavascriptMap){attrName=attrHtmlToJavascriptMap[attrName];if(toRemove)element.removeAttribute(attrName);else element[attrName]=attrValue;}else if(!toRemove){element.setAttribute(attrName,attrValue.toString());}// Treat "name" specially - although you can think of it as an attribute, it also needs
	// special handling on older versions of IE (https://github.com/SteveSanderson/knockout/pull/333)
	// Deliberately being case-sensitive here because XHTML would regard "Name" as a different thing
	// entirely, and there's no strong reason to allow for such casing in HTML.
	if(attrName==="name"){ko.utils.setElementName(element,toRemove?"":attrValue.toString());}});}};(function(){ko.bindingHandlers['checked']={'after':['value','attr'],'init':function init(element,valueAccessor,allBindings){var checkedValue=ko.pureComputed(function(){// Treat "value" like "checkedValue" when it is included with "checked" binding
	if(allBindings['has']('checkedValue')){return ko.utils.unwrapObservable(allBindings.get('checkedValue'));}else if(allBindings['has']('value')){return ko.utils.unwrapObservable(allBindings.get('value'));}return element.value;});function updateModel(){// This updates the model value from the view value.
	// It runs in response to DOM events (click) and changes in checkedValue.
	var isChecked=element.checked,elemValue=useCheckedValue?checkedValue():isChecked;// When we're first setting up this computed, don't change any model state.
	if(ko.computedContext.isInitial()){return;}// We can ignore unchecked radio buttons, because some other radio
	// button will be getting checked, and that one can take care of updating state.
	if(isRadio&&!isChecked){return;}var modelValue=ko.dependencyDetection.ignore(valueAccessor);if(valueIsArray){var writableValue=rawValueIsNonArrayObservable?modelValue.peek():modelValue;if(oldElemValue!==elemValue){// When we're responding to the checkedValue changing, and the element is
	// currently checked, replace the old elem value with the new elem value
	// in the model array.
	if(isChecked){ko.utils.addOrRemoveItem(writableValue,elemValue,true);ko.utils.addOrRemoveItem(writableValue,oldElemValue,false);}oldElemValue=elemValue;}else{// When we're responding to the user having checked/unchecked a checkbox,
	// add/remove the element value to the model array.
	ko.utils.addOrRemoveItem(writableValue,elemValue,isChecked);}if(rawValueIsNonArrayObservable&&ko.isWriteableObservable(modelValue)){modelValue(writableValue);}}else{ko.expressionRewriting.writeValueToProperty(modelValue,allBindings,'checked',elemValue,true);}};function updateView(){// This updates the view value from the model value.
	// It runs in response to changes in the bound (checked) value.
	var modelValue=ko.utils.unwrapObservable(valueAccessor());if(valueIsArray){// When a checkbox is bound to an array, being checked represents its value being present in that array
	element.checked=ko.utils.arrayIndexOf(modelValue,checkedValue())>=0;}else if(isCheckbox){// When a checkbox is bound to any other value (not an array), being checked represents the value being trueish
	element.checked=modelValue;}else{// For radio buttons, being checked means that the radio button's value corresponds to the model value
	element.checked=checkedValue()===modelValue;}};var isCheckbox=element.type=="checkbox",isRadio=element.type=="radio";// Only bind to check boxes and radio buttons
	if(!isCheckbox&&!isRadio){return;}var rawValue=valueAccessor(),valueIsArray=isCheckbox&&ko.utils.unwrapObservable(rawValue)instanceof Array,rawValueIsNonArrayObservable=!(valueIsArray&&rawValue.push&&rawValue.splice),oldElemValue=valueIsArray?checkedValue():undefined,useCheckedValue=isRadio||valueIsArray;// IE 6 won't allow radio buttons to be selected unless they have a name
	if(isRadio&&!element.name)ko.bindingHandlers['uniqueName']['init'](element,function(){return true;});// Set up two computeds to update the binding:
	// The first responds to changes in the checkedValue value and to element clicks
	ko.computed(updateModel,null,{disposeWhenNodeIsRemoved:element});ko.utils.registerEventHandler(element,"click",updateModel);// The second responds to changes in the model value (the one associated with the checked binding)
	ko.computed(updateView,null,{disposeWhenNodeIsRemoved:element});rawValue=undefined;}};ko.expressionRewriting.twoWayBindings['checked']=true;ko.bindingHandlers['checkedValue']={'update':function update(element,valueAccessor){element.value=ko.utils.unwrapObservable(valueAccessor());}};})();var classesWrittenByBindingKey='__ko__cssValue';ko.bindingHandlers['css']={'update':function update(element,valueAccessor){var value=ko.utils.unwrapObservable(valueAccessor());if(value!==null&&(typeof value==='undefined'?'undefined':_typeof(value))=="object"){ko.utils.objectForEach(value,function(className,shouldHaveClass){shouldHaveClass=ko.utils.unwrapObservable(shouldHaveClass);ko.utils.toggleDomNodeCssClass(element,className,shouldHaveClass);});}else{value=ko.utils.stringTrim(String(value||''));// Make sure we don't try to store or set a non-string value
	ko.utils.toggleDomNodeCssClass(element,element[classesWrittenByBindingKey],false);element[classesWrittenByBindingKey]=value;ko.utils.toggleDomNodeCssClass(element,value,true);}}};ko.bindingHandlers['enable']={'update':function update(element,valueAccessor){var value=ko.utils.unwrapObservable(valueAccessor());if(value&&element.disabled)element.removeAttribute("disabled");else if(!value&&!element.disabled)element.disabled=true;}};ko.bindingHandlers['disable']={'update':function update(element,valueAccessor){ko.bindingHandlers['enable']['update'](element,function(){return!ko.utils.unwrapObservable(valueAccessor());});}};// For certain common events (currently just 'click'), allow a simplified data-binding syntax
	// e.g. click:handler instead of the usual full-length event:{click:handler}
	function makeEventHandlerShortcut(eventName){ko.bindingHandlers[eventName]={'init':function init(element,valueAccessor,allBindings,viewModel,bindingContext){var newValueAccessor=function newValueAccessor(){var result={};result[eventName]=valueAccessor();return result;};return ko.bindingHandlers['event']['init'].call(this,element,newValueAccessor,allBindings,viewModel,bindingContext);}};}ko.bindingHandlers['event']={'init':function init(element,valueAccessor,allBindings,viewModel,bindingContext){var eventsToHandle=valueAccessor()||{};ko.utils.objectForEach(eventsToHandle,function(eventName){if(typeof eventName=="string"){ko.utils.registerEventHandler(element,eventName,function(event){var handlerReturnValue;var handlerFunction=valueAccessor()[eventName];if(!handlerFunction)return;try{// Take all the event args, and prefix with the viewmodel
	var argsForHandler=ko.utils.makeArray(arguments);viewModel=bindingContext['$data'];argsForHandler.unshift(viewModel);handlerReturnValue=handlerFunction.apply(viewModel,argsForHandler);}finally{if(handlerReturnValue!==true){// Normally we want to prevent default action. Developer can override this be explicitly returning true.
	if(event.preventDefault)event.preventDefault();else event.returnValue=false;}}var bubble=allBindings.get(eventName+'Bubble')!==false;if(!bubble){event.cancelBubble=true;if(event.stopPropagation)event.stopPropagation();}});}});}};// "foreach: someExpression" is equivalent to "template: { foreach: someExpression }"
	// "foreach: { data: someExpression, afterAdd: myfn }" is equivalent to "template: { foreach: someExpression, afterAdd: myfn }"
	ko.bindingHandlers['foreach']={makeTemplateValueAccessor:function makeTemplateValueAccessor(valueAccessor){return function(){var modelValue=valueAccessor(),unwrappedValue=ko.utils.peekObservable(modelValue);// Unwrap without setting a dependency here
	// If unwrappedValue is the array, pass in the wrapped value on its own
	// The value will be unwrapped and tracked within the template binding
	// (See https://github.com/SteveSanderson/knockout/issues/523)
	if(!unwrappedValue||typeof unwrappedValue.length=="number")return{'foreach':modelValue,'templateEngine':ko.nativeTemplateEngine.instance};// If unwrappedValue.data is the array, preserve all relevant options and unwrap again value so we get updates
	ko.utils.unwrapObservable(modelValue);return{'foreach':unwrappedValue['data'],'as':unwrappedValue['as'],'includeDestroyed':unwrappedValue['includeDestroyed'],'afterAdd':unwrappedValue['afterAdd'],'beforeRemove':unwrappedValue['beforeRemove'],'afterRender':unwrappedValue['afterRender'],'beforeMove':unwrappedValue['beforeMove'],'afterMove':unwrappedValue['afterMove'],'templateEngine':ko.nativeTemplateEngine.instance};};},'init':function init(element,valueAccessor,allBindings,viewModel,bindingContext){return ko.bindingHandlers['template']['init'](element,ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor));},'update':function update(element,valueAccessor,allBindings,viewModel,bindingContext){return ko.bindingHandlers['template']['update'](element,ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor),allBindings,viewModel,bindingContext);}};ko.expressionRewriting.bindingRewriteValidators['foreach']=false;// Can't rewrite control flow bindings
	ko.virtualElements.allowedBindings['foreach']=true;var hasfocusUpdatingProperty='__ko_hasfocusUpdating';var hasfocusLastValue='__ko_hasfocusLastValue';ko.bindingHandlers['hasfocus']={'init':function init(element,valueAccessor,allBindings){var handleElementFocusChange=function handleElementFocusChange(isFocused){// Where possible, ignore which event was raised and determine focus state using activeElement,
	// as this avoids phantom focus/blur events raised when changing tabs in modern browsers.
	// However, not all KO-targeted browsers (Firefox 2) support activeElement. For those browsers,
	// prevent a loss of focus when changing tabs/windows by setting a flag that prevents hasfocus
	// from calling 'blur()' on the element when it loses focus.
	// Discussion at https://github.com/SteveSanderson/knockout/pull/352
	element[hasfocusUpdatingProperty]=true;var ownerDoc=element.ownerDocument;if("activeElement"in ownerDoc){var active;try{active=ownerDoc.activeElement;}catch(e){// IE9 throws if you access activeElement during page load (see issue #703)
	active=ownerDoc.body;}isFocused=active===element;}var modelValue=valueAccessor();ko.expressionRewriting.writeValueToProperty(modelValue,allBindings,'hasfocus',isFocused,true);//cache the latest value, so we can avoid unnecessarily calling focus/blur in the update function
	element[hasfocusLastValue]=isFocused;element[hasfocusUpdatingProperty]=false;};var handleElementFocusIn=handleElementFocusChange.bind(null,true);var handleElementFocusOut=handleElementFocusChange.bind(null,false);ko.utils.registerEventHandler(element,"focus",handleElementFocusIn);ko.utils.registerEventHandler(element,"focusin",handleElementFocusIn);// For IE
	ko.utils.registerEventHandler(element,"blur",handleElementFocusOut);ko.utils.registerEventHandler(element,"focusout",handleElementFocusOut);// For IE
	},'update':function update(element,valueAccessor){var value=!!ko.utils.unwrapObservable(valueAccessor());if(!element[hasfocusUpdatingProperty]&&element[hasfocusLastValue]!==value){value?element.focus():element.blur();// In IE, the blur method doesn't always cause the element to lose focus (for example, if the window is not in focus).
	// Setting focus to the body element does seem to be reliable in IE, but should only be used if we know that the current
	// element was focused already.
	if(!value&&element[hasfocusLastValue]){element.ownerDocument.body.focus();}// For IE, which doesn't reliably fire "focus" or "blur" events synchronously
	ko.dependencyDetection.ignore(ko.utils.triggerEvent,null,[element,value?"focusin":"focusout"]);}}};ko.expressionRewriting.twoWayBindings['hasfocus']=true;ko.bindingHandlers['hasFocus']=ko.bindingHandlers['hasfocus'];// Make "hasFocus" an alias
	ko.expressionRewriting.twoWayBindings['hasFocus']=true;ko.bindingHandlers['html']={'init':function init(){// Prevent binding on the dynamically-injected HTML (as developers are unlikely to expect that, and it has security implications)
	return{'controlsDescendantBindings':true};},'update':function update(element,valueAccessor){// setHtml will unwrap the value if needed
	ko.utils.setHtml(element,valueAccessor());}};// Makes a binding like with or if
	function makeWithIfBinding(bindingKey,isWith,isNot,makeContextCallback){ko.bindingHandlers[bindingKey]={'init':function init(element,valueAccessor,allBindings,viewModel,bindingContext){var didDisplayOnLastUpdate,savedNodes;ko.computed(function(){var dataValue=ko.utils.unwrapObservable(valueAccessor()),shouldDisplay=!isNot!==!dataValue,// equivalent to isNot ? !dataValue : !!dataValue
	isFirstRender=!savedNodes,needsRefresh=isFirstRender||isWith||shouldDisplay!==didDisplayOnLastUpdate;if(needsRefresh){// Save a copy of the inner nodes on the initial update, but only if we have dependencies.
	if(isFirstRender&&ko.computedContext.getDependenciesCount()){savedNodes=ko.utils.cloneNodes(ko.virtualElements.childNodes(element),true/* shouldCleanNodes */);}if(shouldDisplay){if(!isFirstRender){ko.virtualElements.setDomNodeChildren(element,ko.utils.cloneNodes(savedNodes));}ko.applyBindingsToDescendants(makeContextCallback?makeContextCallback(bindingContext,dataValue):bindingContext,element);}else{ko.virtualElements.emptyNode(element);}didDisplayOnLastUpdate=shouldDisplay;}},null,{disposeWhenNodeIsRemoved:element});return{'controlsDescendantBindings':true};}};ko.expressionRewriting.bindingRewriteValidators[bindingKey]=false;// Can't rewrite control flow bindings
	ko.virtualElements.allowedBindings[bindingKey]=true;}// Construct the actual binding handlers
	makeWithIfBinding('if');makeWithIfBinding('ifnot',false/* isWith */,true/* isNot */);makeWithIfBinding('with',true/* isWith */,false/* isNot */,function(bindingContext,dataValue){return bindingContext['createChildContext'](dataValue);});var captionPlaceholder={};ko.bindingHandlers['options']={'init':function init(element){if(ko.utils.tagNameLower(element)!=="select")throw new Error("options binding applies only to SELECT elements");// Remove all existing <option>s.
	while(element.length>0){element.remove(0);}// Ensures that the binding processor doesn't try to bind the options
	return{'controlsDescendantBindings':true};},'update':function update(element,valueAccessor,allBindings){function selectedOptions(){return ko.utils.arrayFilter(element.options,function(node){return node.selected;});}var selectWasPreviouslyEmpty=element.length==0,multiple=element.multiple,previousScrollTop=!selectWasPreviouslyEmpty&&multiple?element.scrollTop:null,unwrappedArray=ko.utils.unwrapObservable(valueAccessor()),valueAllowUnset=allBindings.get('valueAllowUnset')&&allBindings['has']('value'),includeDestroyed=allBindings.get('optionsIncludeDestroyed'),arrayToDomNodeChildrenOptions={},captionValue,filteredArray,previousSelectedValues=[];if(!valueAllowUnset){if(multiple){previousSelectedValues=ko.utils.arrayMap(selectedOptions(),ko.selectExtensions.readValue);}else if(element.selectedIndex>=0){previousSelectedValues.push(ko.selectExtensions.readValue(element.options[element.selectedIndex]));}}if(unwrappedArray){if(typeof unwrappedArray.length=="undefined")// Coerce single value into array
	unwrappedArray=[unwrappedArray];// Filter out any entries marked as destroyed
	filteredArray=ko.utils.arrayFilter(unwrappedArray,function(item){return includeDestroyed||item===undefined||item===null||!ko.utils.unwrapObservable(item['_destroy']);});// If caption is included, add it to the array
	if(allBindings['has']('optionsCaption')){captionValue=ko.utils.unwrapObservable(allBindings.get('optionsCaption'));// If caption value is null or undefined, don't show a caption
	if(captionValue!==null&&captionValue!==undefined){filteredArray.unshift(captionPlaceholder);}}}else{// If a falsy value is provided (e.g. null), we'll simply empty the select element
	}function applyToObject(object,predicate,defaultValue){var predicateType=typeof predicate==='undefined'?'undefined':_typeof(predicate);if(predicateType=="function")// Given a function; run it against the data value
	return predicate(object);else if(predicateType=="string")// Given a string; treat it as a property name on the data value
	return object[predicate];else// Given no optionsText arg; use the data value itself
	return defaultValue;}// The following functions can run at two different times:
	// The first is when the whole array is being updated directly from this binding handler.
	// The second is when an observable value for a specific array entry is updated.
	// oldOptions will be empty in the first case, but will be filled with the previously generated option in the second.
	var itemUpdate=false;function optionForArrayItem(arrayEntry,index,oldOptions){if(oldOptions.length){previousSelectedValues=!valueAllowUnset&&oldOptions[0].selected?[ko.selectExtensions.readValue(oldOptions[0])]:[];itemUpdate=true;}var option=element.ownerDocument.createElement("option");if(arrayEntry===captionPlaceholder){ko.utils.setTextContent(option,allBindings.get('optionsCaption'));ko.selectExtensions.writeValue(option,undefined);}else{// Apply a value to the option element
	var optionValue=applyToObject(arrayEntry,allBindings.get('optionsValue'),arrayEntry);ko.selectExtensions.writeValue(option,ko.utils.unwrapObservable(optionValue));// Apply some text to the option element
	var optionText=applyToObject(arrayEntry,allBindings.get('optionsText'),optionValue);ko.utils.setTextContent(option,optionText);}return[option];}// By using a beforeRemove callback, we delay the removal until after new items are added. This fixes a selection
	// problem in IE<=8 and Firefox. See https://github.com/knockout/knockout/issues/1208
	arrayToDomNodeChildrenOptions['beforeRemove']=function(option){element.removeChild(option);};function setSelectionCallback(arrayEntry,newOptions){if(itemUpdate&&valueAllowUnset){// The model value is authoritative, so make sure its value is the one selected
	// There is no need to use dependencyDetection.ignore since setDomNodeChildrenFromArrayMapping does so already.
	ko.selectExtensions.writeValue(element,ko.utils.unwrapObservable(allBindings.get('value')),true/* allowUnset */);}else if(previousSelectedValues.length){// IE6 doesn't like us to assign selection to OPTION nodes before they're added to the document.
	// That's why we first added them without selection. Now it's time to set the selection.
	var isSelected=ko.utils.arrayIndexOf(previousSelectedValues,ko.selectExtensions.readValue(newOptions[0]))>=0;ko.utils.setOptionNodeSelectionState(newOptions[0],isSelected);// If this option was changed from being selected during a single-item update, notify the change
	if(itemUpdate&&!isSelected){ko.dependencyDetection.ignore(ko.utils.triggerEvent,null,[element,"change"]);}}}var callback=setSelectionCallback;if(allBindings['has']('optionsAfterRender')&&typeof allBindings.get('optionsAfterRender')=="function"){callback=function callback(arrayEntry,newOptions){setSelectionCallback(arrayEntry,newOptions);ko.dependencyDetection.ignore(allBindings.get('optionsAfterRender'),null,[newOptions[0],arrayEntry!==captionPlaceholder?arrayEntry:undefined]);};}ko.utils.setDomNodeChildrenFromArrayMapping(element,filteredArray,optionForArrayItem,arrayToDomNodeChildrenOptions,callback);ko.dependencyDetection.ignore(function(){if(valueAllowUnset){// The model value is authoritative, so make sure its value is the one selected
	ko.selectExtensions.writeValue(element,ko.utils.unwrapObservable(allBindings.get('value')),true/* allowUnset */);}else{// Determine if the selection has changed as a result of updating the options list
	var selectionChanged;if(multiple){// For a multiple-select box, compare the new selection count to the previous one
	// But if nothing was selected before, the selection can't have changed
	selectionChanged=previousSelectedValues.length&&selectedOptions().length<previousSelectedValues.length;}else{// For a single-select box, compare the current value to the previous value
	// But if nothing was selected before or nothing is selected now, just look for a change in selection
	selectionChanged=previousSelectedValues.length&&element.selectedIndex>=0?ko.selectExtensions.readValue(element.options[element.selectedIndex])!==previousSelectedValues[0]:previousSelectedValues.length||element.selectedIndex>=0;}// Ensure consistency between model value and selected option.
	// If the dropdown was changed so that selection is no longer the same,
	// notify the value or selectedOptions binding.
	if(selectionChanged){ko.utils.triggerEvent(element,"change");}}});// Workaround for IE bug
	ko.utils.ensureSelectElementIsRenderedCorrectly(element);if(previousScrollTop&&Math.abs(previousScrollTop-element.scrollTop)>20)element.scrollTop=previousScrollTop;}};ko.bindingHandlers['options'].optionValueDomDataKey=ko.utils.domData.nextKey();ko.bindingHandlers['selectedOptions']={'after':['options','foreach'],'init':function init(element,valueAccessor,allBindings){ko.utils.registerEventHandler(element,"change",function(){var value=valueAccessor(),valueToWrite=[];ko.utils.arrayForEach(element.getElementsByTagName("option"),function(node){if(node.selected)valueToWrite.push(ko.selectExtensions.readValue(node));});ko.expressionRewriting.writeValueToProperty(value,allBindings,'selectedOptions',valueToWrite);});},'update':function update(element,valueAccessor){if(ko.utils.tagNameLower(element)!="select")throw new Error("values binding applies only to SELECT elements");var newValue=ko.utils.unwrapObservable(valueAccessor()),previousScrollTop=element.scrollTop;if(newValue&&typeof newValue.length=="number"){ko.utils.arrayForEach(element.getElementsByTagName("option"),function(node){var isSelected=ko.utils.arrayIndexOf(newValue,ko.selectExtensions.readValue(node))>=0;if(node.selected!=isSelected){// This check prevents flashing of the select element in IE
	ko.utils.setOptionNodeSelectionState(node,isSelected);}});}element.scrollTop=previousScrollTop;}};ko.expressionRewriting.twoWayBindings['selectedOptions']=true;ko.bindingHandlers['style']={'update':function update(element,valueAccessor){var value=ko.utils.unwrapObservable(valueAccessor()||{});ko.utils.objectForEach(value,function(styleName,styleValue){styleValue=ko.utils.unwrapObservable(styleValue);if(styleValue===null||styleValue===undefined||styleValue===false){// Empty string removes the value, whereas null/undefined have no effect
	styleValue="";}element.style[styleName]=styleValue;});}};ko.bindingHandlers['submit']={'init':function init(element,valueAccessor,allBindings,viewModel,bindingContext){if(typeof valueAccessor()!="function")throw new Error("The value for a submit binding must be a function");ko.utils.registerEventHandler(element,"submit",function(event){var handlerReturnValue;var value=valueAccessor();try{handlerReturnValue=value.call(bindingContext['$data'],element);}finally{if(handlerReturnValue!==true){// Normally we want to prevent default action. Developer can override this be explicitly returning true.
	if(event.preventDefault)event.preventDefault();else event.returnValue=false;}}});}};ko.bindingHandlers['text']={'init':function init(){// Prevent binding on the dynamically-injected text node (as developers are unlikely to expect that, and it has security implications).
	// It should also make things faster, as we no longer have to consider whether the text node might be bindable.
	return{'controlsDescendantBindings':true};},'update':function update(element,valueAccessor){ko.utils.setTextContent(element,valueAccessor());}};ko.virtualElements.allowedBindings['text']=true;(function(){if(window&&window.navigator){var parseVersion=function parseVersion(matches){if(matches){return parseFloat(matches[1]);}};// Detect various browser versions because some old versions don't fully support the 'input' event
	var operaVersion=window.opera&&window.opera.version&&parseInt(window.opera.version()),userAgent=window.navigator.userAgent,safariVersion=parseVersion(userAgent.match(/^(?:(?!chrome).)*version\/([^ ]*) safari/i)),firefoxVersion=parseVersion(userAgent.match(/Firefox\/([^ ]*)/));}// IE 8 and 9 have bugs that prevent the normal events from firing when the value changes.
	// But it does fire the 'selectionchange' event on many of those, presumably because the
	// cursor is moving and that counts as the selection changing. The 'selectionchange' event is
	// fired at the document level only and doesn't directly indicate which element changed. We
	// set up just one event handler for the document and use 'activeElement' to determine which
	// element was changed.
	if(ko.utils.ieVersion<10){var selectionChangeRegisteredName=ko.utils.domData.nextKey(),selectionChangeHandlerName=ko.utils.domData.nextKey();var selectionChangeHandler=function selectionChangeHandler(event){var target=this.activeElement,handler=target&&ko.utils.domData.get(target,selectionChangeHandlerName);if(handler){handler(event);}};var registerForSelectionChangeEvent=function registerForSelectionChangeEvent(element,handler){var ownerDoc=element.ownerDocument;if(!ko.utils.domData.get(ownerDoc,selectionChangeRegisteredName)){ko.utils.domData.set(ownerDoc,selectionChangeRegisteredName,true);ko.utils.registerEventHandler(ownerDoc,'selectionchange',selectionChangeHandler);}ko.utils.domData.set(element,selectionChangeHandlerName,handler);};}ko.bindingHandlers['textInput']={'init':function init(element,valueAccessor,allBindings){var previousElementValue=element.value,timeoutHandle,elementValueBeforeEvent;var updateModel=function updateModel(event){clearTimeout(timeoutHandle);elementValueBeforeEvent=timeoutHandle=undefined;var elementValue=element.value;if(previousElementValue!==elementValue){// Provide a way for tests to know exactly which event was processed
	if(DEBUG&&event)element['_ko_textInputProcessedEvent']=event.type;previousElementValue=elementValue;ko.expressionRewriting.writeValueToProperty(valueAccessor(),allBindings,'textInput',elementValue);}};var deferUpdateModel=function deferUpdateModel(event){if(!timeoutHandle){// The elementValueBeforeEvent variable is set *only* during the brief gap between an
	// event firing and the updateModel function running. This allows us to ignore model
	// updates that are from the previous state of the element, usually due to techniques
	// such as rateLimit. Such updates, if not ignored, can cause keystrokes to be lost.
	elementValueBeforeEvent=element.value;var handler=DEBUG?updateModel.bind(element,{type:event.type}):updateModel;timeoutHandle=ko.utils.setTimeout(handler,4);}};// IE9 will mess up the DOM if you handle events synchronously which results in DOM changes (such as other bindings);
	// so we'll make sure all updates are asynchronous
	var ieUpdateModel=ko.utils.ieVersion==9?deferUpdateModel:updateModel;var updateView=function updateView(){var modelValue=ko.utils.unwrapObservable(valueAccessor());if(modelValue===null||modelValue===undefined){modelValue='';}if(elementValueBeforeEvent!==undefined&&modelValue===elementValueBeforeEvent){ko.utils.setTimeout(updateView,4);return;}// Update the element only if the element and model are different. On some browsers, updating the value
	// will move the cursor to the end of the input, which would be bad while the user is typing.
	if(element.value!==modelValue){previousElementValue=modelValue;// Make sure we ignore events (propertychange) that result from updating the value
	element.value=modelValue;}};var onEvent=function onEvent(event,handler){ko.utils.registerEventHandler(element,event,handler);};if(DEBUG&&ko.bindingHandlers['textInput']['_forceUpdateOn']){// Provide a way for tests to specify exactly which events are bound
	ko.utils.arrayForEach(ko.bindingHandlers['textInput']['_forceUpdateOn'],function(eventName){if(eventName.slice(0,5)=='after'){onEvent(eventName.slice(5),deferUpdateModel);}else{onEvent(eventName,updateModel);}});}else{if(ko.utils.ieVersion<10){// Internet Explorer <= 8 doesn't support the 'input' event, but does include 'propertychange' that fires whenever
	// any property of an element changes. Unlike 'input', it also fires if a property is changed from JavaScript code,
	// but that's an acceptable compromise for this binding. IE 9 does support 'input', but since it doesn't fire it
	// when using autocomplete, we'll use 'propertychange' for it also.
	onEvent('propertychange',function(event){if(event.propertyName==='value'){ieUpdateModel(event);}});if(ko.utils.ieVersion==8){// IE 8 has a bug where it fails to fire 'propertychange' on the first update following a value change from
	// JavaScript code. It also doesn't fire if you clear the entire value. To fix this, we bind to the following
	// events too.
	onEvent('keyup',updateModel);// A single keystoke
	onEvent('keydown',updateModel);// The first character when a key is held down
	}if(ko.utils.ieVersion>=8){// Internet Explorer 9 doesn't fire the 'input' event when deleting text, including using
	// the backspace, delete, or ctrl-x keys, clicking the 'x' to clear the input, dragging text
	// out of the field, and cutting or deleting text using the context menu. 'selectionchange'
	// can detect all of those except dragging text out of the field, for which we use 'dragend'.
	// These are also needed in IE8 because of the bug described above.
	registerForSelectionChangeEvent(element,ieUpdateModel);// 'selectionchange' covers cut, paste, drop, delete, etc.
	onEvent('dragend',deferUpdateModel);}}else{// All other supported browsers support the 'input' event, which fires whenever the content of the element is changed
	// through the user interface.
	onEvent('input',updateModel);if(safariVersion<5&&ko.utils.tagNameLower(element)==="textarea"){// Safari <5 doesn't fire the 'input' event for <textarea> elements (it does fire 'textInput'
	// but only when typing). So we'll just catch as much as we can with keydown, cut, and paste.
	onEvent('keydown',deferUpdateModel);onEvent('paste',deferUpdateModel);onEvent('cut',deferUpdateModel);}else if(operaVersion<11){// Opera 10 doesn't always fire the 'input' event for cut, paste, undo & drop operations.
	// We can try to catch some of those using 'keydown'.
	onEvent('keydown',deferUpdateModel);}else if(firefoxVersion<4.0){// Firefox <= 3.6 doesn't fire the 'input' event when text is filled in through autocomplete
	onEvent('DOMAutoComplete',updateModel);// Firefox <=3.5 doesn't fire the 'input' event when text is dropped into the input.
	onEvent('dragdrop',updateModel);// <3.5
	onEvent('drop',updateModel);// 3.5
	}}}// Bind to the change event so that we can catch programmatic updates of the value that fire this event.
	onEvent('change',updateModel);ko.computed(updateView,null,{disposeWhenNodeIsRemoved:element});}};ko.expressionRewriting.twoWayBindings['textInput']=true;// textinput is an alias for textInput
	ko.bindingHandlers['textinput']={// preprocess is the only way to set up a full alias
	'preprocess':function preprocess(value,name,addBinding){addBinding('textInput',value);}};})();ko.bindingHandlers['uniqueName']={'init':function init(element,valueAccessor){if(valueAccessor()){var name="ko_unique_"+ ++ko.bindingHandlers['uniqueName'].currentIndex;ko.utils.setElementName(element,name);}}};ko.bindingHandlers['uniqueName'].currentIndex=0;ko.bindingHandlers['value']={'after':['options','foreach'],'init':function init(element,valueAccessor,allBindings){// If the value binding is placed on a radio/checkbox, then just pass through to checkedValue and quit
	if(element.tagName.toLowerCase()=="input"&&(element.type=="checkbox"||element.type=="radio")){ko.applyBindingAccessorsToNode(element,{'checkedValue':valueAccessor});return;}// Always catch "change" event; possibly other events too if asked
	var eventsToCatch=["change"];var requestedEventsToCatch=allBindings.get("valueUpdate");var propertyChangedFired=false;var elementValueBeforeEvent=null;if(requestedEventsToCatch){if(typeof requestedEventsToCatch=="string")// Allow both individual event names, and arrays of event names
	requestedEventsToCatch=[requestedEventsToCatch];ko.utils.arrayPushAll(eventsToCatch,requestedEventsToCatch);eventsToCatch=ko.utils.arrayGetDistinctValues(eventsToCatch);}var valueUpdateHandler=function valueUpdateHandler(){elementValueBeforeEvent=null;propertyChangedFired=false;var modelValue=valueAccessor();var elementValue=ko.selectExtensions.readValue(element);ko.expressionRewriting.writeValueToProperty(modelValue,allBindings,'value',elementValue);};// Workaround for https://github.com/SteveSanderson/knockout/issues/122
	// IE doesn't fire "change" events on textboxes if the user selects a value from its autocomplete list
	var ieAutoCompleteHackNeeded=ko.utils.ieVersion&&element.tagName.toLowerCase()=="input"&&element.type=="text"&&element.autocomplete!="off"&&(!element.form||element.form.autocomplete!="off");if(ieAutoCompleteHackNeeded&&ko.utils.arrayIndexOf(eventsToCatch,"propertychange")==-1){ko.utils.registerEventHandler(element,"propertychange",function(){propertyChangedFired=true;});ko.utils.registerEventHandler(element,"focus",function(){propertyChangedFired=false;});ko.utils.registerEventHandler(element,"blur",function(){if(propertyChangedFired){valueUpdateHandler();}});}ko.utils.arrayForEach(eventsToCatch,function(eventName){// The syntax "after<eventname>" means "run the handler asynchronously after the event"
	// This is useful, for example, to catch "keydown" events after the browser has updated the control
	// (otherwise, ko.selectExtensions.readValue(this) will receive the control's value *before* the key event)
	var handler=valueUpdateHandler;if(ko.utils.stringStartsWith(eventName,"after")){handler=function handler(){// The elementValueBeforeEvent variable is non-null *only* during the brief gap between
	// a keyX event firing and the valueUpdateHandler running, which is scheduled to happen
	// at the earliest asynchronous opportunity. We store this temporary information so that
	// if, between keyX and valueUpdateHandler, the underlying model value changes separately,
	// we can overwrite that model value change with the value the user just typed. Otherwise,
	// techniques like rateLimit can trigger model changes at critical moments that will
	// override the user's inputs, causing keystrokes to be lost.
	elementValueBeforeEvent=ko.selectExtensions.readValue(element);ko.utils.setTimeout(valueUpdateHandler,0);};eventName=eventName.substring("after".length);}ko.utils.registerEventHandler(element,eventName,handler);});var updateFromModel=function updateFromModel(){var newValue=ko.utils.unwrapObservable(valueAccessor());var elementValue=ko.selectExtensions.readValue(element);if(elementValueBeforeEvent!==null&&newValue===elementValueBeforeEvent){ko.utils.setTimeout(updateFromModel,0);return;}var valueHasChanged=newValue!==elementValue;if(valueHasChanged){if(ko.utils.tagNameLower(element)==="select"){var allowUnset=allBindings.get('valueAllowUnset');var applyValueAction=function applyValueAction(){ko.selectExtensions.writeValue(element,newValue,allowUnset);};applyValueAction();if(!allowUnset&&newValue!==ko.selectExtensions.readValue(element)){// If you try to set a model value that can't be represented in an already-populated dropdown, reject that change,
	// because you're not allowed to have a model value that disagrees with a visible UI selection.
	ko.dependencyDetection.ignore(ko.utils.triggerEvent,null,[element,"change"]);}else{// Workaround for IE6 bug: It won't reliably apply values to SELECT nodes during the same execution thread
	// right after you've changed the set of OPTION nodes on it. So for that node type, we'll schedule a second thread
	// to apply the value as well.
	ko.utils.setTimeout(applyValueAction,0);}}else{ko.selectExtensions.writeValue(element,newValue);}}};ko.computed(updateFromModel,null,{disposeWhenNodeIsRemoved:element});},'update':function update(){}// Keep for backwards compatibility with code that may have wrapped value binding
	};ko.expressionRewriting.twoWayBindings['value']=true;ko.bindingHandlers['visible']={'update':function update(element,valueAccessor){var value=ko.utils.unwrapObservable(valueAccessor());var isCurrentlyVisible=!(element.style.display=="none");if(value&&!isCurrentlyVisible)element.style.display="";else if(!value&&isCurrentlyVisible)element.style.display="none";}};// 'click' is just a shorthand for the usual full-length event:{click:handler}
	makeEventHandlerShortcut('click');// If you want to make a custom template engine,
	//
	// [1] Inherit from this class (like ko.nativeTemplateEngine does)
	// [2] Override 'renderTemplateSource', supplying a function with this signature:
	//
	//        function (templateSource, bindingContext, options) {
	//            // - templateSource.text() is the text of the template you should render
	//            // - bindingContext.$data is the data you should pass into the template
	//            //   - you might also want to make bindingContext.$parent, bindingContext.$parents,
	//            //     and bindingContext.$root available in the template too
	//            // - options gives you access to any other properties set on "data-bind: { template: options }"
	//            // - templateDocument is the document object of the template
	//            //
	//            // Return value: an array of DOM nodes
	//        }
	//
	// [3] Override 'createJavaScriptEvaluatorBlock', supplying a function with this signature:
	//
	//        function (script) {
	//            // Return value: Whatever syntax means "Evaluate the JavaScript statement 'script' and output the result"
	//            //               For example, the jquery.tmpl template engine converts 'someScript' to '${ someScript }'
	//        }
	//
	//     This is only necessary if you want to allow data-bind attributes to reference arbitrary template variables.
	//     If you don't want to allow that, you can set the property 'allowTemplateRewriting' to false (like ko.nativeTemplateEngine does)
	//     and then you don't need to override 'createJavaScriptEvaluatorBlock'.
	ko.templateEngine=function(){};ko.templateEngine.prototype['renderTemplateSource']=function(templateSource,bindingContext,options,templateDocument){throw new Error("Override renderTemplateSource");};ko.templateEngine.prototype['createJavaScriptEvaluatorBlock']=function(script){throw new Error("Override createJavaScriptEvaluatorBlock");};ko.templateEngine.prototype['makeTemplateSource']=function(template,templateDocument){// Named template
	if(typeof template=="string"){templateDocument=templateDocument||document;var elem=templateDocument.getElementById(template);if(!elem)throw new Error("Cannot find template with ID "+template);return new ko.templateSources.domElement(elem);}else if(template.nodeType==1||template.nodeType==8){// Anonymous template
	return new ko.templateSources.anonymousTemplate(template);}else throw new Error("Unknown template type: "+template);};ko.templateEngine.prototype['renderTemplate']=function(template,bindingContext,options,templateDocument){var templateSource=this['makeTemplateSource'](template,templateDocument);return this['renderTemplateSource'](templateSource,bindingContext,options,templateDocument);};ko.templateEngine.prototype['isTemplateRewritten']=function(template,templateDocument){// Skip rewriting if requested
	if(this['allowTemplateRewriting']===false)return true;return this['makeTemplateSource'](template,templateDocument)['data']("isRewritten");};ko.templateEngine.prototype['rewriteTemplate']=function(template,rewriterCallback,templateDocument){var templateSource=this['makeTemplateSource'](template,templateDocument);var rewritten=rewriterCallback(templateSource['text']());templateSource['text'](rewritten);templateSource['data']("isRewritten",true);};ko.exportSymbol('templateEngine',ko.templateEngine);ko.templateRewriting=function(){var memoizeDataBindingAttributeSyntaxRegex=/(<([a-z]+\d*)(?:\s+(?!data-bind\s*=\s*)[a-z0-9\-]+(?:=(?:\"[^\"]*\"|\'[^\']*\'|[^>]*))?)*\s+)data-bind\s*=\s*(["'])([\s\S]*?)\3/gi;var memoizeVirtualContainerBindingSyntaxRegex=/<!--\s*ko\b\s*([\s\S]*?)\s*-->/g;function validateDataBindValuesForRewriting(keyValueArray){var allValidators=ko.expressionRewriting.bindingRewriteValidators;for(var i=0;i<keyValueArray.length;i++){var key=keyValueArray[i]['key'];if(allValidators.hasOwnProperty(key)){var validator=allValidators[key];if(typeof validator==="function"){var possibleErrorMessage=validator(keyValueArray[i]['value']);if(possibleErrorMessage)throw new Error(possibleErrorMessage);}else if(!validator){throw new Error("This template engine does not support the '"+key+"' binding within its templates");}}}}function constructMemoizedTagReplacement(dataBindAttributeValue,tagToRetain,nodeName,templateEngine){var dataBindKeyValueArray=ko.expressionRewriting.parseObjectLiteral(dataBindAttributeValue);validateDataBindValuesForRewriting(dataBindKeyValueArray);var rewrittenDataBindAttributeValue=ko.expressionRewriting.preProcessBindings(dataBindKeyValueArray,{'valueAccessors':true});// For no obvious reason, Opera fails to evaluate rewrittenDataBindAttributeValue unless it's wrapped in an additional
	// anonymous function, even though Opera's built-in debugger can evaluate it anyway. No other browser requires this
	// extra indirection.
	var applyBindingsToNextSiblingScript="ko.__tr_ambtns(function($context,$element){return(function(){return{ "+rewrittenDataBindAttributeValue+" } })()},'"+nodeName.toLowerCase()+"')";return templateEngine['createJavaScriptEvaluatorBlock'](applyBindingsToNextSiblingScript)+tagToRetain;}return{ensureTemplateIsRewritten:function ensureTemplateIsRewritten(template,templateEngine,templateDocument){if(!templateEngine['isTemplateRewritten'](template,templateDocument))templateEngine['rewriteTemplate'](template,function(htmlString){return ko.templateRewriting.memoizeBindingAttributeSyntax(htmlString,templateEngine);},templateDocument);},memoizeBindingAttributeSyntax:function memoizeBindingAttributeSyntax(htmlString,templateEngine){return htmlString.replace(memoizeDataBindingAttributeSyntaxRegex,function(){return constructMemoizedTagReplacement(/* dataBindAttributeValue: */arguments[4],/* tagToRetain: */arguments[1],/* nodeName: */arguments[2],templateEngine);}).replace(memoizeVirtualContainerBindingSyntaxRegex,function(){return constructMemoizedTagReplacement(/* dataBindAttributeValue: */arguments[1],/* tagToRetain: */"<!-- ko -->",/* nodeName: */"#comment",templateEngine);});},applyMemoizedBindingsToNextSibling:function applyMemoizedBindingsToNextSibling(bindings,nodeName){return ko.memoization.memoize(function(domNode,bindingContext){var nodeToBind=domNode.nextSibling;if(nodeToBind&&nodeToBind.nodeName.toLowerCase()===nodeName){ko.applyBindingAccessorsToNode(nodeToBind,bindings,bindingContext);}});}};}();// Exported only because it has to be referenced by string lookup from within rewritten template
	ko.exportSymbol('__tr_ambtns',ko.templateRewriting.applyMemoizedBindingsToNextSibling);(function(){// A template source represents a read/write way of accessing a template. This is to eliminate the need for template loading/saving
	// logic to be duplicated in every template engine (and means they can all work with anonymous templates, etc.)
	//
	// Two are provided by default:
	//  1. ko.templateSources.domElement       - reads/writes the text content of an arbitrary DOM element
	//  2. ko.templateSources.anonymousElement - uses ko.utils.domData to read/write text *associated* with the DOM element, but
	//                                           without reading/writing the actual element text content, since it will be overwritten
	//                                           with the rendered template output.
	// You can implement your own template source if you want to fetch/store templates somewhere other than in DOM elements.
	// Template sources need to have the following functions:
	//   text() 			- returns the template text from your storage location
	//   text(value)		- writes the supplied template text to your storage location
	//   data(key)			- reads values stored using data(key, value) - see below
	//   data(key, value)	- associates "value" with this template and the key "key". Is used to store information like "isRewritten".
	//
	// Optionally, template sources can also have the following functions:
	//   nodes()            - returns a DOM element containing the nodes of this template, where available
	//   nodes(value)       - writes the given DOM element to your storage location
	// If a DOM element is available for a given template source, template engines are encouraged to use it in preference over text()
	// for improved speed. However, all templateSources must supply text() even if they don't supply nodes().
	//
	// Once you've implemented a templateSource, make your template engine use it by subclassing whatever template engine you were
	// using and overriding "makeTemplateSource" to return an instance of your custom template source.
	ko.templateSources={};// ---- ko.templateSources.domElement -----
	// template types
	var templateScript=1,templateTextArea=2,templateTemplate=3,templateElement=4;ko.templateSources.domElement=function(element){this.domElement=element;if(element){var tagNameLower=ko.utils.tagNameLower(element);this.templateType=tagNameLower==="script"?templateScript:tagNameLower==="textarea"?templateTextArea:// For browsers with proper <template> element support, where the .content property gives a document fragment
	tagNameLower=="template"&&element.content&&element.content.nodeType===11?templateTemplate:templateElement;}};ko.templateSources.domElement.prototype['text']=function()/* valueToWrite */{var elemContentsProperty=this.templateType===templateScript?"text":this.templateType===templateTextArea?"value":"innerHTML";if(arguments.length==0){return this.domElement[elemContentsProperty];}else{var valueToWrite=arguments[0];if(elemContentsProperty==="innerHTML")ko.utils.setHtml(this.domElement,valueToWrite);else this.domElement[elemContentsProperty]=valueToWrite;}};var dataDomDataPrefix=ko.utils.domData.nextKey()+"_";ko.templateSources.domElement.prototype['data']=function(key/*, valueToWrite */){if(arguments.length===1){return ko.utils.domData.get(this.domElement,dataDomDataPrefix+key);}else{ko.utils.domData.set(this.domElement,dataDomDataPrefix+key,arguments[1]);}};var templatesDomDataKey=ko.utils.domData.nextKey();function getTemplateDomData(element){return ko.utils.domData.get(element,templatesDomDataKey)||{};}function setTemplateDomData(element,data){ko.utils.domData.set(element,templatesDomDataKey,data);}ko.templateSources.domElement.prototype['nodes']=function()/* valueToWrite */{var element=this.domElement;if(arguments.length==0){var templateData=getTemplateDomData(element),containerData=templateData.containerData;return containerData||(this.templateType===templateTemplate?element.content:this.templateType===templateElement?element:undefined);}else{var valueToWrite=arguments[0];setTemplateDomData(element,{containerData:valueToWrite});}};// ---- ko.templateSources.anonymousTemplate -----
	// Anonymous templates are normally saved/retrieved as DOM nodes through "nodes".
	// For compatibility, you can also read "text"; it will be serialized from the nodes on demand.
	// Writing to "text" is still supported, but then the template data will not be available as DOM nodes.
	ko.templateSources.anonymousTemplate=function(element){this.domElement=element;};ko.templateSources.anonymousTemplate.prototype=new ko.templateSources.domElement();ko.templateSources.anonymousTemplate.prototype.constructor=ko.templateSources.anonymousTemplate;ko.templateSources.anonymousTemplate.prototype['text']=function()/* valueToWrite */{if(arguments.length==0){var templateData=getTemplateDomData(this.domElement);if(templateData.textData===undefined&&templateData.containerData)templateData.textData=templateData.containerData.innerHTML;return templateData.textData;}else{var valueToWrite=arguments[0];setTemplateDomData(this.domElement,{textData:valueToWrite});}};ko.exportSymbol('templateSources',ko.templateSources);ko.exportSymbol('templateSources.domElement',ko.templateSources.domElement);ko.exportSymbol('templateSources.anonymousTemplate',ko.templateSources.anonymousTemplate);})();(function(){var _templateEngine;ko.setTemplateEngine=function(templateEngine){if(templateEngine!=undefined&&!(templateEngine instanceof ko.templateEngine))throw new Error("templateEngine must inherit from ko.templateEngine");_templateEngine=templateEngine;};function invokeForEachNodeInContinuousRange(firstNode,lastNode,action){var node,nextInQueue=firstNode,firstOutOfRangeNode=ko.virtualElements.nextSibling(lastNode);while(nextInQueue&&(node=nextInQueue)!==firstOutOfRangeNode){nextInQueue=ko.virtualElements.nextSibling(node);action(node,nextInQueue);}}function activateBindingsOnContinuousNodeArray(continuousNodeArray,bindingContext){// To be used on any nodes that have been rendered by a template and have been inserted into some parent element
	// Walks through continuousNodeArray (which *must* be continuous, i.e., an uninterrupted sequence of sibling nodes, because
	// the algorithm for walking them relies on this), and for each top-level item in the virtual-element sense,
	// (1) Does a regular "applyBindings" to associate bindingContext with this node and to activate any non-memoized bindings
	// (2) Unmemoizes any memos in the DOM subtree (e.g., to activate bindings that had been memoized during template rewriting)
	if(continuousNodeArray.length){var firstNode=continuousNodeArray[0],lastNode=continuousNodeArray[continuousNodeArray.length-1],parentNode=firstNode.parentNode,provider=ko.bindingProvider['instance'],preprocessNode=provider['preprocessNode'];if(preprocessNode){invokeForEachNodeInContinuousRange(firstNode,lastNode,function(node,nextNodeInRange){var nodePreviousSibling=node.previousSibling;var newNodes=preprocessNode.call(provider,node);if(newNodes){if(node===firstNode)firstNode=newNodes[0]||nextNodeInRange;if(node===lastNode)lastNode=newNodes[newNodes.length-1]||nodePreviousSibling;}});// Because preprocessNode can change the nodes, including the first and last nodes, update continuousNodeArray to match.
	// We need the full set, including inner nodes, because the unmemoize step might remove the first node (and so the real
	// first node needs to be in the array).
	continuousNodeArray.length=0;if(!firstNode){// preprocessNode might have removed all the nodes, in which case there's nothing left to do
	return;}if(firstNode===lastNode){continuousNodeArray.push(firstNode);}else{continuousNodeArray.push(firstNode,lastNode);ko.utils.fixUpContinuousNodeArray(continuousNodeArray,parentNode);}}// Need to applyBindings *before* unmemoziation, because unmemoization might introduce extra nodes (that we don't want to re-bind)
	// whereas a regular applyBindings won't introduce new memoized nodes
	invokeForEachNodeInContinuousRange(firstNode,lastNode,function(node){if(node.nodeType===1||node.nodeType===8)ko.applyBindings(bindingContext,node);});invokeForEachNodeInContinuousRange(firstNode,lastNode,function(node){if(node.nodeType===1||node.nodeType===8)ko.memoization.unmemoizeDomNodeAndDescendants(node,[bindingContext]);});// Make sure any changes done by applyBindings or unmemoize are reflected in the array
	ko.utils.fixUpContinuousNodeArray(continuousNodeArray,parentNode);}}function getFirstNodeFromPossibleArray(nodeOrNodeArray){return nodeOrNodeArray.nodeType?nodeOrNodeArray:nodeOrNodeArray.length>0?nodeOrNodeArray[0]:null;}function executeTemplate(targetNodeOrNodeArray,renderMode,template,bindingContext,options){options=options||{};var firstTargetNode=targetNodeOrNodeArray&&getFirstNodeFromPossibleArray(targetNodeOrNodeArray);var templateDocument=(firstTargetNode||template||{}).ownerDocument;var templateEngineToUse=options['templateEngine']||_templateEngine;ko.templateRewriting.ensureTemplateIsRewritten(template,templateEngineToUse,templateDocument);var renderedNodesArray=templateEngineToUse['renderTemplate'](template,bindingContext,options,templateDocument);// Loosely check result is an array of DOM nodes
	if(typeof renderedNodesArray.length!="number"||renderedNodesArray.length>0&&typeof renderedNodesArray[0].nodeType!="number")throw new Error("Template engine must return an array of DOM nodes");var haveAddedNodesToParent=false;switch(renderMode){case"replaceChildren":ko.virtualElements.setDomNodeChildren(targetNodeOrNodeArray,renderedNodesArray);haveAddedNodesToParent=true;break;case"replaceNode":ko.utils.replaceDomNodes(targetNodeOrNodeArray,renderedNodesArray);haveAddedNodesToParent=true;break;case"ignoreTargetNode":break;default:throw new Error("Unknown renderMode: "+renderMode);}if(haveAddedNodesToParent){activateBindingsOnContinuousNodeArray(renderedNodesArray,bindingContext);if(options['afterRender'])ko.dependencyDetection.ignore(options['afterRender'],null,[renderedNodesArray,bindingContext['$data']]);}return renderedNodesArray;}function resolveTemplateName(template,data,context){// The template can be specified as:
	if(ko.isObservable(template)){// 1. An observable, with string value
	return template();}else if(typeof template==='function'){// 2. A function of (data, context) returning a string
	return template(data,context);}else{// 3. A string
	return template;}}ko.renderTemplate=function(template,dataOrBindingContext,options,targetNodeOrNodeArray,renderMode){options=options||{};if((options['templateEngine']||_templateEngine)==undefined)throw new Error("Set a template engine before calling renderTemplate");renderMode=renderMode||"replaceChildren";if(targetNodeOrNodeArray){var firstTargetNode=getFirstNodeFromPossibleArray(targetNodeOrNodeArray);var whenToDispose=function whenToDispose(){return!firstTargetNode||!ko.utils.domNodeIsAttachedToDocument(firstTargetNode);};// Passive disposal (on next evaluation)
	var activelyDisposeWhenNodeIsRemoved=firstTargetNode&&renderMode=="replaceNode"?firstTargetNode.parentNode:firstTargetNode;return ko.dependentObservable(// So the DOM is automatically updated when any dependency changes
	function(){// Ensure we've got a proper binding context to work with
	var bindingContext=dataOrBindingContext&&dataOrBindingContext instanceof ko.bindingContext?dataOrBindingContext:new ko.bindingContext(ko.utils.unwrapObservable(dataOrBindingContext));var templateName=resolveTemplateName(template,bindingContext['$data'],bindingContext),renderedNodesArray=executeTemplate(targetNodeOrNodeArray,renderMode,templateName,bindingContext,options);if(renderMode=="replaceNode"){targetNodeOrNodeArray=renderedNodesArray;firstTargetNode=getFirstNodeFromPossibleArray(targetNodeOrNodeArray);}},null,{disposeWhen:whenToDispose,disposeWhenNodeIsRemoved:activelyDisposeWhenNodeIsRemoved});}else{// We don't yet have a DOM node to evaluate, so use a memo and render the template later when there is a DOM node
	return ko.memoization.memoize(function(domNode){ko.renderTemplate(template,dataOrBindingContext,options,domNode,"replaceNode");});}};ko.renderTemplateForEach=function(template,arrayOrObservableArray,options,targetNode,parentBindingContext){// Since setDomNodeChildrenFromArrayMapping always calls executeTemplateForArrayItem and then
	// activateBindingsCallback for added items, we can store the binding context in the former to use in the latter.
	var arrayItemContext;// This will be called by setDomNodeChildrenFromArrayMapping to get the nodes to add to targetNode
	var executeTemplateForArrayItem=function executeTemplateForArrayItem(arrayValue,index){// Support selecting template as a function of the data being rendered
	arrayItemContext=parentBindingContext['createChildContext'](arrayValue,options['as'],function(context){context['$index']=index;});var templateName=resolveTemplateName(template,arrayValue,arrayItemContext);return executeTemplate(null,"ignoreTargetNode",templateName,arrayItemContext,options);};// This will be called whenever setDomNodeChildrenFromArrayMapping has added nodes to targetNode
	var activateBindingsCallback=function activateBindingsCallback(arrayValue,addedNodesArray,index){activateBindingsOnContinuousNodeArray(addedNodesArray,arrayItemContext);if(options['afterRender'])options['afterRender'](addedNodesArray,arrayValue);// release the "cache" variable, so that it can be collected by
	// the GC when its value isn't used from within the bindings anymore.
	arrayItemContext=null;};return ko.dependentObservable(function(){var unwrappedArray=ko.utils.unwrapObservable(arrayOrObservableArray)||[];if(typeof unwrappedArray.length=="undefined")// Coerce single value into array
	unwrappedArray=[unwrappedArray];// Filter out any entries marked as destroyed
	var filteredArray=ko.utils.arrayFilter(unwrappedArray,function(item){return options['includeDestroyed']||item===undefined||item===null||!ko.utils.unwrapObservable(item['_destroy']);});// Call setDomNodeChildrenFromArrayMapping, ignoring any observables unwrapped within (most likely from a callback function).
	// If the array items are observables, though, they will be unwrapped in executeTemplateForArrayItem and managed within setDomNodeChildrenFromArrayMapping.
	ko.dependencyDetection.ignore(ko.utils.setDomNodeChildrenFromArrayMapping,null,[targetNode,filteredArray,executeTemplateForArrayItem,options,activateBindingsCallback]);},null,{disposeWhenNodeIsRemoved:targetNode});};var templateComputedDomDataKey=ko.utils.domData.nextKey();function disposeOldComputedAndStoreNewOne(element,newComputed){var oldComputed=ko.utils.domData.get(element,templateComputedDomDataKey);if(oldComputed&&typeof oldComputed.dispose=='function')oldComputed.dispose();ko.utils.domData.set(element,templateComputedDomDataKey,newComputed&&newComputed.isActive()?newComputed:undefined);}ko.bindingHandlers['template']={'init':function init(element,valueAccessor){// Support anonymous templates
	var bindingValue=ko.utils.unwrapObservable(valueAccessor());if(typeof bindingValue=="string"||bindingValue['name']){// It's a named template - clear the element
	ko.virtualElements.emptyNode(element);}else if('nodes'in bindingValue){// We've been given an array of DOM nodes. Save them as the template source.
	// There is no known use case for the node array being an observable array (if the output
	// varies, put that behavior *into* your template - that's what templates are for), and
	// the implementation would be a mess, so assert that it's not observable.
	var nodes=bindingValue['nodes']||[];if(ko.isObservable(nodes)){throw new Error('The "nodes" option must be a plain, non-observable array.');}var container=ko.utils.moveCleanedNodesToContainerElement(nodes);// This also removes the nodes from their current parent
	new ko.templateSources.anonymousTemplate(element)['nodes'](container);}else{// It's an anonymous template - store the element contents, then clear the element
	var templateNodes=ko.virtualElements.childNodes(element),container=ko.utils.moveCleanedNodesToContainerElement(templateNodes);// This also removes the nodes from their current parent
	new ko.templateSources.anonymousTemplate(element)['nodes'](container);}return{'controlsDescendantBindings':true};},'update':function update(element,valueAccessor,allBindings,viewModel,bindingContext){var value=valueAccessor(),dataValue,options=ko.utils.unwrapObservable(value),shouldDisplay=true,templateComputed=null,templateName;if(typeof options=="string"){templateName=value;options={};}else{templateName=options['name'];// Support "if"/"ifnot" conditions
	if('if'in options)shouldDisplay=ko.utils.unwrapObservable(options['if']);if(shouldDisplay&&'ifnot'in options)shouldDisplay=!ko.utils.unwrapObservable(options['ifnot']);dataValue=ko.utils.unwrapObservable(options['data']);}if('foreach'in options){// Render once for each data point (treating data set as empty if shouldDisplay==false)
	var dataArray=shouldDisplay&&options['foreach']||[];templateComputed=ko.renderTemplateForEach(templateName||element,dataArray,options,element,bindingContext);}else if(!shouldDisplay){ko.virtualElements.emptyNode(element);}else{// Render once for this single data point (or use the viewModel if no data was provided)
	var innerBindingContext='data'in options?bindingContext['createChildContext'](dataValue,options['as']):// Given an explitit 'data' value, we create a child binding context for it
	bindingContext;// Given no explicit 'data' value, we retain the same binding context
	templateComputed=ko.renderTemplate(templateName||element,innerBindingContext,options,element);}// It only makes sense to have a single template computed per element (otherwise which one should have its output displayed?)
	disposeOldComputedAndStoreNewOne(element,templateComputed);}};// Anonymous templates can't be rewritten. Give a nice error message if you try to do it.
	ko.expressionRewriting.bindingRewriteValidators['template']=function(bindingValue){var parsedBindingValue=ko.expressionRewriting.parseObjectLiteral(bindingValue);if(parsedBindingValue.length==1&&parsedBindingValue[0]['unknown'])return null;// It looks like a string literal, not an object literal, so treat it as a named template (which is allowed for rewriting)
	if(ko.expressionRewriting.keyValueArrayContainsKey(parsedBindingValue,"name"))return null;// Named templates can be rewritten, so return "no error"
	return"This template engine does not support anonymous templates nested within its templates";};ko.virtualElements.allowedBindings['template']=true;})();ko.exportSymbol('setTemplateEngine',ko.setTemplateEngine);ko.exportSymbol('renderTemplate',ko.renderTemplate);// Go through the items that have been added and deleted and try to find matches between them.
	ko.utils.findMovesInArrayComparison=function(left,right,limitFailedCompares){if(left.length&&right.length){var failedCompares,l,r,leftItem,rightItem;for(failedCompares=l=0;(!limitFailedCompares||failedCompares<limitFailedCompares)&&(leftItem=left[l]);++l){for(r=0;rightItem=right[r];++r){if(leftItem['value']===rightItem['value']){leftItem['moved']=rightItem['index'];rightItem['moved']=leftItem['index'];right.splice(r,1);// This item is marked as moved; so remove it from right list
	failedCompares=r=0;// Reset failed compares count because we're checking for consecutive failures
	break;}}failedCompares+=r;}}};ko.utils.compareArrays=function(){var statusNotInOld='added',statusNotInNew='deleted';// Simple calculation based on Levenshtein distance.
	function compareArrays(oldArray,newArray,options){// For backward compatibility, if the third arg is actually a bool, interpret
	// it as the old parameter 'dontLimitMoves'. Newer code should use { dontLimitMoves: true }.
	options=typeof options==='boolean'?{'dontLimitMoves':options}:options||{};oldArray=oldArray||[];newArray=newArray||[];if(oldArray.length<newArray.length)return compareSmallArrayToBigArray(oldArray,newArray,statusNotInOld,statusNotInNew,options);else return compareSmallArrayToBigArray(newArray,oldArray,statusNotInNew,statusNotInOld,options);}function compareSmallArrayToBigArray(smlArray,bigArray,statusNotInSml,statusNotInBig,options){var myMin=Math.min,myMax=Math.max,editDistanceMatrix=[],smlIndex,smlIndexMax=smlArray.length,bigIndex,bigIndexMax=bigArray.length,compareRange=bigIndexMax-smlIndexMax||1,maxDistance=smlIndexMax+bigIndexMax+1,thisRow,lastRow,bigIndexMaxForRow,bigIndexMinForRow;for(smlIndex=0;smlIndex<=smlIndexMax;smlIndex++){lastRow=thisRow;editDistanceMatrix.push(thisRow=[]);bigIndexMaxForRow=myMin(bigIndexMax,smlIndex+compareRange);bigIndexMinForRow=myMax(0,smlIndex-1);for(bigIndex=bigIndexMinForRow;bigIndex<=bigIndexMaxForRow;bigIndex++){if(!bigIndex)thisRow[bigIndex]=smlIndex+1;else if(!smlIndex)// Top row - transform empty array into new array via additions
	thisRow[bigIndex]=bigIndex+1;else if(smlArray[smlIndex-1]===bigArray[bigIndex-1])thisRow[bigIndex]=lastRow[bigIndex-1];// copy value (no edit)
	else{var northDistance=lastRow[bigIndex]||maxDistance;// not in big (deletion)
	var westDistance=thisRow[bigIndex-1]||maxDistance;// not in small (addition)
	thisRow[bigIndex]=myMin(northDistance,westDistance)+1;}}}var editScript=[],meMinusOne,notInSml=[],notInBig=[];for(smlIndex=smlIndexMax,bigIndex=bigIndexMax;smlIndex||bigIndex;){meMinusOne=editDistanceMatrix[smlIndex][bigIndex]-1;if(bigIndex&&meMinusOne===editDistanceMatrix[smlIndex][bigIndex-1]){notInSml.push(editScript[editScript.length]={// added
	'status':statusNotInSml,'value':bigArray[--bigIndex],'index':bigIndex});}else if(smlIndex&&meMinusOne===editDistanceMatrix[smlIndex-1][bigIndex]){notInBig.push(editScript[editScript.length]={// deleted
	'status':statusNotInBig,'value':smlArray[--smlIndex],'index':smlIndex});}else{--bigIndex;--smlIndex;if(!options['sparse']){editScript.push({'status':"retained",'value':bigArray[bigIndex]});}}}// Set a limit on the number of consecutive non-matching comparisons; having it a multiple of
	// smlIndexMax keeps the time complexity of this algorithm linear.
	ko.utils.findMovesInArrayComparison(notInBig,notInSml,!options['dontLimitMoves']&&smlIndexMax*10);return editScript.reverse();}return compareArrays;}();ko.exportSymbol('utils.compareArrays',ko.utils.compareArrays);(function(){// Objective:
	// * Given an input array, a container DOM node, and a function from array elements to arrays of DOM nodes,
	//   map the array elements to arrays of DOM nodes, concatenate together all these arrays, and use them to populate the container DOM node
	// * Next time we're given the same combination of things (with the array possibly having mutated), update the container DOM node
	//   so that its children is again the concatenation of the mappings of the array elements, but don't re-map any array elements that we
	//   previously mapped - retain those nodes, and just insert/delete other ones
	// "callbackAfterAddingNodes" will be invoked after any "mapping"-generated nodes are inserted into the container node
	// You can use this, for example, to activate bindings on those nodes.
	function mapNodeAndRefreshWhenChanged(containerNode,mapping,valueToMap,callbackAfterAddingNodes,index){// Map this array value inside a dependentObservable so we re-map when any dependency changes
	var mappedNodes=[];var dependentObservable=ko.dependentObservable(function(){var newMappedNodes=mapping(valueToMap,index,ko.utils.fixUpContinuousNodeArray(mappedNodes,containerNode))||[];// On subsequent evaluations, just replace the previously-inserted DOM nodes
	if(mappedNodes.length>0){ko.utils.replaceDomNodes(mappedNodes,newMappedNodes);if(callbackAfterAddingNodes)ko.dependencyDetection.ignore(callbackAfterAddingNodes,null,[valueToMap,newMappedNodes,index]);}// Replace the contents of the mappedNodes array, thereby updating the record
	// of which nodes would be deleted if valueToMap was itself later removed
	mappedNodes.length=0;ko.utils.arrayPushAll(mappedNodes,newMappedNodes);},null,{disposeWhenNodeIsRemoved:containerNode,disposeWhen:function disposeWhen(){return!ko.utils.anyDomNodeIsAttachedToDocument(mappedNodes);}});return{mappedNodes:mappedNodes,dependentObservable:dependentObservable.isActive()?dependentObservable:undefined};}var lastMappingResultDomDataKey=ko.utils.domData.nextKey(),deletedItemDummyValue=ko.utils.domData.nextKey();ko.utils.setDomNodeChildrenFromArrayMapping=function(domNode,array,mapping,options,callbackAfterAddingNodes){// Compare the provided array against the previous one
	array=array||[];options=options||{};var isFirstExecution=ko.utils.domData.get(domNode,lastMappingResultDomDataKey)===undefined;var lastMappingResult=ko.utils.domData.get(domNode,lastMappingResultDomDataKey)||[];var lastArray=ko.utils.arrayMap(lastMappingResult,function(x){return x.arrayEntry;});var editScript=ko.utils.compareArrays(lastArray,array,options['dontLimitMoves']);// Build the new mapping result
	var newMappingResult=[];var lastMappingResultIndex=0;var newMappingResultIndex=0;var nodesToDelete=[];var itemsToProcess=[];var itemsForBeforeRemoveCallbacks=[];var itemsForMoveCallbacks=[];var itemsForAfterAddCallbacks=[];var mapData;function itemMovedOrRetained(editScriptIndex,oldPosition){mapData=lastMappingResult[oldPosition];if(newMappingResultIndex!==oldPosition)itemsForMoveCallbacks[editScriptIndex]=mapData;// Since updating the index might change the nodes, do so before calling fixUpContinuousNodeArray
	mapData.indexObservable(newMappingResultIndex++);ko.utils.fixUpContinuousNodeArray(mapData.mappedNodes,domNode);newMappingResult.push(mapData);itemsToProcess.push(mapData);}function callCallback(callback,items){if(callback){for(var i=0,n=items.length;i<n;i++){if(items[i]){ko.utils.arrayForEach(items[i].mappedNodes,function(node){callback(node,i,items[i].arrayEntry);});}}}}for(var i=0,editScriptItem,movedIndex;editScriptItem=editScript[i];i++){movedIndex=editScriptItem['moved'];switch(editScriptItem['status']){case"deleted":if(movedIndex===undefined){mapData=lastMappingResult[lastMappingResultIndex];// Stop tracking changes to the mapping for these nodes
	if(mapData.dependentObservable){mapData.dependentObservable.dispose();mapData.dependentObservable=undefined;}// Queue these nodes for later removal
	if(ko.utils.fixUpContinuousNodeArray(mapData.mappedNodes,domNode).length){if(options['beforeRemove']){newMappingResult.push(mapData);itemsToProcess.push(mapData);if(mapData.arrayEntry===deletedItemDummyValue){mapData=null;}else{itemsForBeforeRemoveCallbacks[i]=mapData;}}if(mapData){nodesToDelete.push.apply(nodesToDelete,mapData.mappedNodes);}}}lastMappingResultIndex++;break;case"retained":itemMovedOrRetained(i,lastMappingResultIndex++);break;case"added":if(movedIndex!==undefined){itemMovedOrRetained(i,movedIndex);}else{mapData={arrayEntry:editScriptItem['value'],indexObservable:ko.observable(newMappingResultIndex++)};newMappingResult.push(mapData);itemsToProcess.push(mapData);if(!isFirstExecution)itemsForAfterAddCallbacks[i]=mapData;}break;}}// Store a copy of the array items we just considered so we can difference it next time
	ko.utils.domData.set(domNode,lastMappingResultDomDataKey,newMappingResult);// Call beforeMove first before any changes have been made to the DOM
	callCallback(options['beforeMove'],itemsForMoveCallbacks);// Next remove nodes for deleted items (or just clean if there's a beforeRemove callback)
	ko.utils.arrayForEach(nodesToDelete,options['beforeRemove']?ko.cleanNode:ko.removeNode);// Next add/reorder the remaining items (will include deleted items if there's a beforeRemove callback)
	for(var i=0,nextNode=ko.virtualElements.firstChild(domNode),lastNode,node;mapData=itemsToProcess[i];i++){// Get nodes for newly added items
	if(!mapData.mappedNodes)ko.utils.extend(mapData,mapNodeAndRefreshWhenChanged(domNode,mapping,mapData.arrayEntry,callbackAfterAddingNodes,mapData.indexObservable));// Put nodes in the right place if they aren't there already
	for(var j=0;node=mapData.mappedNodes[j];nextNode=node.nextSibling,lastNode=node,j++){if(node!==nextNode)ko.virtualElements.insertAfter(domNode,node,lastNode);}// Run the callbacks for newly added nodes (for example, to apply bindings, etc.)
	if(!mapData.initialized&&callbackAfterAddingNodes){callbackAfterAddingNodes(mapData.arrayEntry,mapData.mappedNodes,mapData.indexObservable);mapData.initialized=true;}}// If there's a beforeRemove callback, call it after reordering.
	// Note that we assume that the beforeRemove callback will usually be used to remove the nodes using
	// some sort of animation, which is why we first reorder the nodes that will be removed. If the
	// callback instead removes the nodes right away, it would be more efficient to skip reordering them.
	// Perhaps we'll make that change in the future if this scenario becomes more common.
	callCallback(options['beforeRemove'],itemsForBeforeRemoveCallbacks);// Replace the stored values of deleted items with a dummy value. This provides two benefits: it marks this item
	// as already "removed" so we won't call beforeRemove for it again, and it ensures that the item won't match up
	// with an actual item in the array and appear as "retained" or "moved".
	for(i=0;i<itemsForBeforeRemoveCallbacks.length;++i){if(itemsForBeforeRemoveCallbacks[i]){itemsForBeforeRemoveCallbacks[i].arrayEntry=deletedItemDummyValue;}}// Finally call afterMove and afterAdd callbacks
	callCallback(options['afterMove'],itemsForMoveCallbacks);callCallback(options['afterAdd'],itemsForAfterAddCallbacks);};})();ko.exportSymbol('utils.setDomNodeChildrenFromArrayMapping',ko.utils.setDomNodeChildrenFromArrayMapping);ko.nativeTemplateEngine=function(){this['allowTemplateRewriting']=false;};ko.nativeTemplateEngine.prototype=new ko.templateEngine();ko.nativeTemplateEngine.prototype.constructor=ko.nativeTemplateEngine;ko.nativeTemplateEngine.prototype['renderTemplateSource']=function(templateSource,bindingContext,options,templateDocument){var useNodesIfAvailable=!(ko.utils.ieVersion<9),// IE<9 cloneNode doesn't work properly
	templateNodesFunc=useNodesIfAvailable?templateSource['nodes']:null,templateNodes=templateNodesFunc?templateSource['nodes']():null;if(templateNodes){return ko.utils.makeArray(templateNodes.cloneNode(true).childNodes);}else{var templateText=templateSource['text']();return ko.utils.parseHtmlFragment(templateText,templateDocument);}};ko.nativeTemplateEngine.instance=new ko.nativeTemplateEngine();ko.setTemplateEngine(ko.nativeTemplateEngine.instance);ko.exportSymbol('nativeTemplateEngine',ko.nativeTemplateEngine);(function(){ko.jqueryTmplTemplateEngine=function(){// Detect which version of jquery-tmpl you're using. Unfortunately jquery-tmpl
	// doesn't expose a version number, so we have to infer it.
	// Note that as of Knockout 1.3, we only support jQuery.tmpl 1.0.0pre and later,
	// which KO internally refers to as version "2", so older versions are no longer detected.
	var jQueryTmplVersion=this.jQueryTmplVersion=function(){if(!jQueryInstance||!jQueryInstance['tmpl'])return 0;// Since it exposes no official version number, we use our own numbering system. To be updated as jquery-tmpl evolves.
	try{if(jQueryInstance['tmpl']['tag']['tmpl']['open'].toString().indexOf('__')>=0){// Since 1.0.0pre, custom tags should append markup to an array called "__"
	return 2;// Final version of jquery.tmpl
	}}catch(ex){/* Apparently not the version we were looking for */}return 1;// Any older version that we don't support
	}();function ensureHasReferencedJQueryTemplates(){if(jQueryTmplVersion<2)throw new Error("Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.");}function executeTemplate(compiledTemplate,data,jQueryTemplateOptions){return jQueryInstance['tmpl'](compiledTemplate,data,jQueryTemplateOptions);}this['renderTemplateSource']=function(templateSource,bindingContext,options,templateDocument){templateDocument=templateDocument||document;options=options||{};ensureHasReferencedJQueryTemplates();// Ensure we have stored a precompiled version of this template (don't want to reparse on every render)
	var precompiled=templateSource['data']('precompiled');if(!precompiled){var templateText=templateSource['text']()||"";// Wrap in "with($whatever.koBindingContext) { ... }"
	templateText="{{ko_with $item.koBindingContext}}"+templateText+"{{/ko_with}}";precompiled=jQueryInstance['template'](null,templateText);templateSource['data']('precompiled',precompiled);}var data=[bindingContext['$data']];// Prewrap the data in an array to stop jquery.tmpl from trying to unwrap any arrays
	var jQueryTemplateOptions=jQueryInstance['extend']({'koBindingContext':bindingContext},options['templateOptions']);var resultNodes=executeTemplate(precompiled,data,jQueryTemplateOptions);resultNodes['appendTo'](templateDocument.createElement("div"));// Using "appendTo" forces jQuery/jQuery.tmpl to perform necessary cleanup work
	jQueryInstance['fragments']={};// Clear jQuery's fragment cache to avoid a memory leak after a large number of template renders
	return resultNodes;};this['createJavaScriptEvaluatorBlock']=function(script){return"{{ko_code ((function() { return "+script+" })()) }}";};this['addTemplate']=function(templateName,templateMarkup){document.write("<script type='text/html' id='"+templateName+"'>"+templateMarkup+"<"+"/script>");};if(jQueryTmplVersion>0){jQueryInstance['tmpl']['tag']['ko_code']={open:"__.push($1 || '');"};jQueryInstance['tmpl']['tag']['ko_with']={open:"with($1) {",close:"} "};}};ko.jqueryTmplTemplateEngine.prototype=new ko.templateEngine();ko.jqueryTmplTemplateEngine.prototype.constructor=ko.jqueryTmplTemplateEngine;// Use this one by default *only if jquery.tmpl is referenced*
	var jqueryTmplTemplateEngineInstance=new ko.jqueryTmplTemplateEngine();if(jqueryTmplTemplateEngineInstance.jQueryTmplVersion>0)ko.setTemplateEngine(jqueryTmplTemplateEngineInstance);ko.exportSymbol('jqueryTmplTemplateEngine',ko.jqueryTmplTemplateEngine);})();});})();})();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)(module)))

/***/ },
/* 10 */
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/*
	 _ _      _       _
	 ___| (_) ___| | __  (_)___
	 / __| | |/ __| |/ /  | / __|
	 \__ \ | | (__|   < _ | \__ \
	 |___/_|_|\___|_|\_(_)/ |___/
	 |__/
	
	 Version: 1.5.9
	 Author: Ken Wheeler
	 Website: http://kenwheeler.github.io
	 Docs: http://kenwheeler.github.io/slick
	 Repo: http://github.com/kenwheeler/slick
	 Issues: http://github.com/kenwheeler/slick/issues
	
	 */
	!function (a) {
	  "use strict";
	   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_FACTORY__ = (a), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : "undefined" != typeof exports ? module.exports = a(require("jquery")) : a(jQuery);
	}(function (a) {
	  "use strict";
	  var b = window.Slick || {};b = function () {
	    function c(c, d) {
	      var f,
	          e = this;e.defaults = { accessibility: !0, adaptiveHeight: !1, appendArrows: a(c), appendDots: a(c), arrows: !0, asNavFor: null, prevArrow: '<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>', nextArrow: '<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>', autoplay: !1, autoplaySpeed: 3e3, centerMode: !1, centerPadding: "50px", cssEase: "ease", customPaging: function customPaging(a, b) {
	          return '<button type="button" data-role="none" role="button" aria-required="false" tabindex="0">' + (b + 1) + "</button>";
	        }, dots: !1, dotsClass: "slick-dots", draggable: !0, easing: "linear", edgeFriction: .35, fade: !1, focusOnSelect: !1, infinite: !0, initialSlide: 0, lazyLoad: "ondemand", mobileFirst: !1, pauseOnHover: !0, pauseOnDotsHover: !1, respondTo: "window", responsive: null, rows: 1, rtl: !1, slide: "", slidesPerRow: 1, slidesToShow: 1, slidesToScroll: 1, speed: 500, swipe: !0, swipeToSlide: !1, touchMove: !0, touchThreshold: 5, useCSS: !0, useTransform: !1, variableWidth: !1, vertical: !1, verticalSwiping: !1, waitForAnimate: !0, zIndex: 1e3 }, e.initials = { animating: !1, dragging: !1, autoPlayTimer: null, currentDirection: 0, currentLeft: null, currentSlide: 0, direction: 1, $dots: null, listWidth: null, listHeight: null, loadIndex: 0, $nextArrow: null, $prevArrow: null, slideCount: null, slideWidth: null, $slideTrack: null, $slides: null, sliding: !1, slideOffset: 0, swipeLeft: null, $list: null, touchObject: {}, transformsEnabled: !1, unslicked: !1 }, a.extend(e, e.initials), e.activeBreakpoint = null, e.animType = null, e.animProp = null, e.breakpoints = [], e.breakpointSettings = [], e.cssTransitions = !1, e.hidden = "hidden", e.paused = !1, e.positionProp = null, e.respondTo = null, e.rowCount = 1, e.shouldClick = !0, e.$slider = a(c), e.$slidesCache = null, e.transformType = null, e.transitionType = null, e.visibilityChange = "visibilitychange", e.windowWidth = 0, e.windowTimer = null, f = a(c).data("slick") || {}, e.options = a.extend({}, e.defaults, f, d), e.currentSlide = e.options.initialSlide, e.originalSettings = e.options, "undefined" != typeof document.mozHidden ? (e.hidden = "mozHidden", e.visibilityChange = "mozvisibilitychange") : "undefined" != typeof document.webkitHidden && (e.hidden = "webkitHidden", e.visibilityChange = "webkitvisibilitychange"), e.autoPlay = a.proxy(e.autoPlay, e), e.autoPlayClear = a.proxy(e.autoPlayClear, e), e.changeSlide = a.proxy(e.changeSlide, e), e.clickHandler = a.proxy(e.clickHandler, e), e.selectHandler = a.proxy(e.selectHandler, e), e.setPosition = a.proxy(e.setPosition, e), e.swipeHandler = a.proxy(e.swipeHandler, e), e.dragHandler = a.proxy(e.dragHandler, e), e.keyHandler = a.proxy(e.keyHandler, e), e.autoPlayIterator = a.proxy(e.autoPlayIterator, e), e.instanceUid = b++, e.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/, e.registerBreakpoints(), e.init(!0), e.checkResponsive(!0);
	    }var b = 0;return c;
	  }(), b.prototype.addSlide = b.prototype.slickAdd = function (b, c, d) {
	    var e = this;if ("boolean" == typeof c) d = c, c = null;else if (0 > c || c >= e.slideCount) return !1;e.unload(), "number" == typeof c ? 0 === c && 0 === e.$slides.length ? a(b).appendTo(e.$slideTrack) : d ? a(b).insertBefore(e.$slides.eq(c)) : a(b).insertAfter(e.$slides.eq(c)) : d === !0 ? a(b).prependTo(e.$slideTrack) : a(b).appendTo(e.$slideTrack), e.$slides = e.$slideTrack.children(this.options.slide), e.$slideTrack.children(this.options.slide).detach(), e.$slideTrack.append(e.$slides), e.$slides.each(function (b, c) {
	      a(c).attr("data-slick-index", b);
	    }), e.$slidesCache = e.$slides, e.reinit();
	  }, b.prototype.animateHeight = function () {
	    var a = this;if (1 === a.options.slidesToShow && a.options.adaptiveHeight === !0 && a.options.vertical === !1) {
	      var b = a.$slides.eq(a.currentSlide).outerHeight(!0);a.$list.animate({ height: b }, a.options.speed);
	    }
	  }, b.prototype.animateSlide = function (b, c) {
	    var d = {},
	        e = this;e.animateHeight(), e.options.rtl === !0 && e.options.vertical === !1 && (b = -b), e.transformsEnabled === !1 ? e.options.vertical === !1 ? e.$slideTrack.animate({ left: b }, e.options.speed, e.options.easing, c) : e.$slideTrack.animate({ top: b }, e.options.speed, e.options.easing, c) : e.cssTransitions === !1 ? (e.options.rtl === !0 && (e.currentLeft = -e.currentLeft), a({ animStart: e.currentLeft }).animate({ animStart: b }, { duration: e.options.speed, easing: e.options.easing, step: function step(a) {
	        a = Math.ceil(a), e.options.vertical === !1 ? (d[e.animType] = "translate(" + a + "px, 0px)", e.$slideTrack.css(d)) : (d[e.animType] = "translate(0px," + a + "px)", e.$slideTrack.css(d));
	      }, complete: function complete() {
	        c && c.call();
	      } })) : (e.applyTransition(), b = Math.ceil(b), e.options.vertical === !1 ? d[e.animType] = "translate3d(" + b + "px, 0px, 0px)" : d[e.animType] = "translate3d(0px," + b + "px, 0px)", e.$slideTrack.css(d), c && setTimeout(function () {
	      e.disableTransition(), c.call();
	    }, e.options.speed));
	  }, b.prototype.asNavFor = function (b) {
	    var c = this,
	        d = c.options.asNavFor;d && null !== d && (d = a(d).not(c.$slider)), null !== d && "object" == (typeof d === "undefined" ? "undefined" : _typeof(d)) && d.each(function () {
	      var c = a(this).slick("getSlick");c.unslicked || c.slideHandler(b, !0);
	    });
	  }, b.prototype.applyTransition = function (a) {
	    var b = this,
	        c = {};b.options.fade === !1 ? c[b.transitionType] = b.transformType + " " + b.options.speed + "ms " + b.options.cssEase : c[b.transitionType] = "opacity " + b.options.speed + "ms " + b.options.cssEase, b.options.fade === !1 ? b.$slideTrack.css(c) : b.$slides.eq(a).css(c);
	  }, b.prototype.autoPlay = function () {
	    var a = this;a.autoPlayTimer && clearInterval(a.autoPlayTimer), a.slideCount > a.options.slidesToShow && a.paused !== !0 && (a.autoPlayTimer = setInterval(a.autoPlayIterator, a.options.autoplaySpeed));
	  }, b.prototype.autoPlayClear = function () {
	    var a = this;a.autoPlayTimer && clearInterval(a.autoPlayTimer);
	  }, b.prototype.autoPlayIterator = function () {
	    var a = this;a.options.infinite === !1 ? 1 === a.direction ? (a.currentSlide + 1 === a.slideCount - 1 && (a.direction = 0), a.slideHandler(a.currentSlide + a.options.slidesToScroll)) : (a.currentSlide - 1 === 0 && (a.direction = 1), a.slideHandler(a.currentSlide - a.options.slidesToScroll)) : a.slideHandler(a.currentSlide + a.options.slidesToScroll);
	  }, b.prototype.buildArrows = function () {
	    var b = this;b.options.arrows === !0 && (b.$prevArrow = a(b.options.prevArrow).addClass("slick-arrow"), b.$nextArrow = a(b.options.nextArrow).addClass("slick-arrow"), b.slideCount > b.options.slidesToShow ? (b.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), b.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), b.htmlExpr.test(b.options.prevArrow) && b.$prevArrow.prependTo(b.options.appendArrows), b.htmlExpr.test(b.options.nextArrow) && b.$nextArrow.appendTo(b.options.appendArrows), b.options.infinite !== !0 && b.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true")) : b.$prevArrow.add(b.$nextArrow).addClass("slick-hidden").attr({ "aria-disabled": "true", tabindex: "-1" }));
	  }, b.prototype.buildDots = function () {
	    var c,
	        d,
	        b = this;if (b.options.dots === !0 && b.slideCount > b.options.slidesToShow) {
	      for (d = '<ul class="' + b.options.dotsClass + '">', c = 0; c <= b.getDotCount(); c += 1) {
	        d += "<li>" + b.options.customPaging.call(this, b, c) + "</li>";
	      }d += "</ul>", b.$dots = a(d).appendTo(b.options.appendDots), b.$dots.find("li").first().addClass("slick-active").attr("aria-hidden", "false");
	    }
	  }, b.prototype.buildOut = function () {
	    var b = this;b.$slides = b.$slider.children(b.options.slide + ":not(.slick-cloned)").addClass("slick-slide"), b.slideCount = b.$slides.length, b.$slides.each(function (b, c) {
	      a(c).attr("data-slick-index", b).data("originalStyling", a(c).attr("style") || "");
	    }), b.$slider.addClass("slick-slider"), b.$slideTrack = 0 === b.slideCount ? a('<div class="slick-track"/>').appendTo(b.$slider) : b.$slides.wrapAll('<div class="slick-track"/>').parent(), b.$list = b.$slideTrack.wrap('<div aria-live="polite" class="slick-list"/>').parent(), b.$slideTrack.css("opacity", 0), (b.options.centerMode === !0 || b.options.swipeToSlide === !0) && (b.options.slidesToScroll = 1), a("img[data-lazy]", b.$slider).not("[src]").addClass("slick-loading"), b.setupInfinite(), b.buildArrows(), b.buildDots(), b.updateDots(), b.setSlideClasses("number" == typeof b.currentSlide ? b.currentSlide : 0), b.options.draggable === !0 && b.$list.addClass("draggable");
	  }, b.prototype.buildRows = function () {
	    var b,
	        c,
	        d,
	        e,
	        f,
	        g,
	        h,
	        a = this;if (e = document.createDocumentFragment(), g = a.$slider.children(), a.options.rows > 1) {
	      for (h = a.options.slidesPerRow * a.options.rows, f = Math.ceil(g.length / h), b = 0; f > b; b++) {
	        var i = document.createElement("div");for (c = 0; c < a.options.rows; c++) {
	          var j = document.createElement("div");for (d = 0; d < a.options.slidesPerRow; d++) {
	            var k = b * h + (c * a.options.slidesPerRow + d);g.get(k) && j.appendChild(g.get(k));
	          }i.appendChild(j);
	        }e.appendChild(i);
	      }a.$slider.html(e), a.$slider.children().children().children().css({ width: 100 / a.options.slidesPerRow + "%", display: "inline-block" });
	    }
	  }, b.prototype.checkResponsive = function (b, c) {
	    var e,
	        f,
	        g,
	        d = this,
	        h = !1,
	        i = d.$slider.width(),
	        j = window.innerWidth || a(window).width();if ("window" === d.respondTo ? g = j : "slider" === d.respondTo ? g = i : "min" === d.respondTo && (g = Math.min(j, i)), d.options.responsive && d.options.responsive.length && null !== d.options.responsive) {
	      f = null;for (e in d.breakpoints) {
	        d.breakpoints.hasOwnProperty(e) && (d.originalSettings.mobileFirst === !1 ? g < d.breakpoints[e] && (f = d.breakpoints[e]) : g > d.breakpoints[e] && (f = d.breakpoints[e]));
	      }null !== f ? null !== d.activeBreakpoint ? (f !== d.activeBreakpoint || c) && (d.activeBreakpoint = f, "unslick" === d.breakpointSettings[f] ? d.unslick(f) : (d.options = a.extend({}, d.originalSettings, d.breakpointSettings[f]), b === !0 && (d.currentSlide = d.options.initialSlide), d.refresh(b)), h = f) : (d.activeBreakpoint = f, "unslick" === d.breakpointSettings[f] ? d.unslick(f) : (d.options = a.extend({}, d.originalSettings, d.breakpointSettings[f]), b === !0 && (d.currentSlide = d.options.initialSlide), d.refresh(b)), h = f) : null !== d.activeBreakpoint && (d.activeBreakpoint = null, d.options = d.originalSettings, b === !0 && (d.currentSlide = d.options.initialSlide), d.refresh(b), h = f), b || h === !1 || d.$slider.trigger("breakpoint", [d, h]);
	    }
	  }, b.prototype.changeSlide = function (b, c) {
	    var f,
	        g,
	        h,
	        d = this,
	        e = a(b.target);switch (e.is("a") && b.preventDefault(), e.is("li") || (e = e.closest("li")), h = d.slideCount % d.options.slidesToScroll !== 0, f = h ? 0 : (d.slideCount - d.currentSlide) % d.options.slidesToScroll, b.data.message) {case "previous":
	        g = 0 === f ? d.options.slidesToScroll : d.options.slidesToShow - f, d.slideCount > d.options.slidesToShow && d.slideHandler(d.currentSlide - g, !1, c);break;case "next":
	        g = 0 === f ? d.options.slidesToScroll : f, d.slideCount > d.options.slidesToShow && d.slideHandler(d.currentSlide + g, !1, c);break;case "index":
	        var i = 0 === b.data.index ? 0 : b.data.index || e.index() * d.options.slidesToScroll;d.slideHandler(d.checkNavigable(i), !1, c), e.children().trigger("focus");break;default:
	        return;}
	  }, b.prototype.checkNavigable = function (a) {
	    var c,
	        d,
	        b = this;if (c = b.getNavigableIndexes(), d = 0, a > c[c.length - 1]) a = c[c.length - 1];else for (var e in c) {
	      if (a < c[e]) {
	        a = d;break;
	      }d = c[e];
	    }return a;
	  }, b.prototype.cleanUpEvents = function () {
	    var b = this;b.options.dots && null !== b.$dots && (a("li", b.$dots).off("click.slick", b.changeSlide), b.options.pauseOnDotsHover === !0 && b.options.autoplay === !0 && a("li", b.$dots).off("mouseenter.slick", a.proxy(b.setPaused, b, !0)).off("mouseleave.slick", a.proxy(b.setPaused, b, !1))), b.options.arrows === !0 && b.slideCount > b.options.slidesToShow && (b.$prevArrow && b.$prevArrow.off("click.slick", b.changeSlide), b.$nextArrow && b.$nextArrow.off("click.slick", b.changeSlide)), b.$list.off("touchstart.slick mousedown.slick", b.swipeHandler), b.$list.off("touchmove.slick mousemove.slick", b.swipeHandler), b.$list.off("touchend.slick mouseup.slick", b.swipeHandler), b.$list.off("touchcancel.slick mouseleave.slick", b.swipeHandler), b.$list.off("click.slick", b.clickHandler), a(document).off(b.visibilityChange, b.visibility), b.$list.off("mouseenter.slick", a.proxy(b.setPaused, b, !0)), b.$list.off("mouseleave.slick", a.proxy(b.setPaused, b, !1)), b.options.accessibility === !0 && b.$list.off("keydown.slick", b.keyHandler), b.options.focusOnSelect === !0 && a(b.$slideTrack).children().off("click.slick", b.selectHandler), a(window).off("orientationchange.slick.slick-" + b.instanceUid, b.orientationChange), a(window).off("resize.slick.slick-" + b.instanceUid, b.resize), a("[draggable!=true]", b.$slideTrack).off("dragstart", b.preventDefault), a(window).off("load.slick.slick-" + b.instanceUid, b.setPosition), a(document).off("ready.slick.slick-" + b.instanceUid, b.setPosition);
	  }, b.prototype.cleanUpRows = function () {
	    var b,
	        a = this;a.options.rows > 1 && (b = a.$slides.children().children(), b.removeAttr("style"), a.$slider.html(b));
	  }, b.prototype.clickHandler = function (a) {
	    var b = this;b.shouldClick === !1 && (a.stopImmediatePropagation(), a.stopPropagation(), a.preventDefault());
	  }, b.prototype.destroy = function (b) {
	    var c = this;c.autoPlayClear(), c.touchObject = {}, c.cleanUpEvents(), a(".slick-cloned", c.$slider).detach(), c.$dots && c.$dots.remove(), c.$prevArrow && c.$prevArrow.length && (c.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), c.htmlExpr.test(c.options.prevArrow) && c.$prevArrow.remove()), c.$nextArrow && c.$nextArrow.length && (c.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), c.htmlExpr.test(c.options.nextArrow) && c.$nextArrow.remove()), c.$slides && (c.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function () {
	      a(this).attr("style", a(this).data("originalStyling"));
	    }), c.$slideTrack.children(this.options.slide).detach(), c.$slideTrack.detach(), c.$list.detach(), c.$slider.append(c.$slides)), c.cleanUpRows(), c.$slider.removeClass("slick-slider"), c.$slider.removeClass("slick-initialized"), c.unslicked = !0, b || c.$slider.trigger("destroy", [c]);
	  }, b.prototype.disableTransition = function (a) {
	    var b = this,
	        c = {};c[b.transitionType] = "", b.options.fade === !1 ? b.$slideTrack.css(c) : b.$slides.eq(a).css(c);
	  }, b.prototype.fadeSlide = function (a, b) {
	    var c = this;c.cssTransitions === !1 ? (c.$slides.eq(a).css({ zIndex: c.options.zIndex }), c.$slides.eq(a).animate({ opacity: 1 }, c.options.speed, c.options.easing, b)) : (c.applyTransition(a), c.$slides.eq(a).css({ opacity: 1, zIndex: c.options.zIndex }), b && setTimeout(function () {
	      c.disableTransition(a), b.call();
	    }, c.options.speed));
	  }, b.prototype.fadeSlideOut = function (a) {
	    var b = this;b.cssTransitions === !1 ? b.$slides.eq(a).animate({ opacity: 0, zIndex: b.options.zIndex - 2 }, b.options.speed, b.options.easing) : (b.applyTransition(a), b.$slides.eq(a).css({ opacity: 0, zIndex: b.options.zIndex - 2 }));
	  }, b.prototype.filterSlides = b.prototype.slickFilter = function (a) {
	    var b = this;null !== a && (b.$slidesCache = b.$slides, b.unload(), b.$slideTrack.children(this.options.slide).detach(), b.$slidesCache.filter(a).appendTo(b.$slideTrack), b.reinit());
	  }, b.prototype.getCurrent = b.prototype.slickCurrentSlide = function () {
	    var a = this;return a.currentSlide;
	  }, b.prototype.getDotCount = function () {
	    var a = this,
	        b = 0,
	        c = 0,
	        d = 0;if (a.options.infinite === !0) for (; b < a.slideCount;) {
	      ++d, b = c + a.options.slidesToScroll, c += a.options.slidesToScroll <= a.options.slidesToShow ? a.options.slidesToScroll : a.options.slidesToShow;
	    } else if (a.options.centerMode === !0) d = a.slideCount;else for (; b < a.slideCount;) {
	      ++d, b = c + a.options.slidesToScroll, c += a.options.slidesToScroll <= a.options.slidesToShow ? a.options.slidesToScroll : a.options.slidesToShow;
	    }return d - 1;
	  }, b.prototype.getLeft = function (a) {
	    var c,
	        d,
	        f,
	        b = this,
	        e = 0;return b.slideOffset = 0, d = b.$slides.first().outerHeight(!0), b.options.infinite === !0 ? (b.slideCount > b.options.slidesToShow && (b.slideOffset = b.slideWidth * b.options.slidesToShow * -1, e = d * b.options.slidesToShow * -1), b.slideCount % b.options.slidesToScroll !== 0 && a + b.options.slidesToScroll > b.slideCount && b.slideCount > b.options.slidesToShow && (a > b.slideCount ? (b.slideOffset = (b.options.slidesToShow - (a - b.slideCount)) * b.slideWidth * -1, e = (b.options.slidesToShow - (a - b.slideCount)) * d * -1) : (b.slideOffset = b.slideCount % b.options.slidesToScroll * b.slideWidth * -1, e = b.slideCount % b.options.slidesToScroll * d * -1))) : a + b.options.slidesToShow > b.slideCount && (b.slideOffset = (a + b.options.slidesToShow - b.slideCount) * b.slideWidth, e = (a + b.options.slidesToShow - b.slideCount) * d), b.slideCount <= b.options.slidesToShow && (b.slideOffset = 0, e = 0), b.options.centerMode === !0 && b.options.infinite === !0 ? b.slideOffset += b.slideWidth * Math.floor(b.options.slidesToShow / 2) - b.slideWidth : b.options.centerMode === !0 && (b.slideOffset = 0, b.slideOffset += b.slideWidth * Math.floor(b.options.slidesToShow / 2)), c = b.options.vertical === !1 ? a * b.slideWidth * -1 + b.slideOffset : a * d * -1 + e, b.options.variableWidth === !0 && (f = b.slideCount <= b.options.slidesToShow || b.options.infinite === !1 ? b.$slideTrack.children(".slick-slide").eq(a) : b.$slideTrack.children(".slick-slide").eq(a + b.options.slidesToShow), c = b.options.rtl === !0 ? f[0] ? -1 * (b.$slideTrack.width() - f[0].offsetLeft - f.width()) : 0 : f[0] ? -1 * f[0].offsetLeft : 0, b.options.centerMode === !0 && (f = b.slideCount <= b.options.slidesToShow || b.options.infinite === !1 ? b.$slideTrack.children(".slick-slide").eq(a) : b.$slideTrack.children(".slick-slide").eq(a + b.options.slidesToShow + 1), c = b.options.rtl === !0 ? f[0] ? -1 * (b.$slideTrack.width() - f[0].offsetLeft - f.width()) : 0 : f[0] ? -1 * f[0].offsetLeft : 0, c += (b.$list.width() - f.outerWidth()) / 2)), c;
	  }, b.prototype.getOption = b.prototype.slickGetOption = function (a) {
	    var b = this;return b.options[a];
	  }, b.prototype.getNavigableIndexes = function () {
	    var e,
	        a = this,
	        b = 0,
	        c = 0,
	        d = [];for (a.options.infinite === !1 ? e = a.slideCount : (b = -1 * a.options.slidesToScroll, c = -1 * a.options.slidesToScroll, e = 2 * a.slideCount); e > b;) {
	      d.push(b), b = c + a.options.slidesToScroll, c += a.options.slidesToScroll <= a.options.slidesToShow ? a.options.slidesToScroll : a.options.slidesToShow;
	    }return d;
	  }, b.prototype.getSlick = function () {
	    return this;
	  }, b.prototype.getSlideCount = function () {
	    var c,
	        d,
	        e,
	        b = this;return e = b.options.centerMode === !0 ? b.slideWidth * Math.floor(b.options.slidesToShow / 2) : 0, b.options.swipeToSlide === !0 ? (b.$slideTrack.find(".slick-slide").each(function (c, f) {
	      return f.offsetLeft - e + a(f).outerWidth() / 2 > -1 * b.swipeLeft ? (d = f, !1) : void 0;
	    }), c = Math.abs(a(d).attr("data-slick-index") - b.currentSlide) || 1) : b.options.slidesToScroll;
	  }, b.prototype.goTo = b.prototype.slickGoTo = function (a, b) {
	    var c = this;c.changeSlide({ data: { message: "index", index: parseInt(a) } }, b);
	  }, b.prototype.init = function (b) {
	    var c = this;a(c.$slider).hasClass("slick-initialized") || (a(c.$slider).addClass("slick-initialized"), c.buildRows(), c.buildOut(), c.setProps(), c.startLoad(), c.loadSlider(), c.initializeEvents(), c.updateArrows(), c.updateDots()), b && c.$slider.trigger("init", [c]), c.options.accessibility === !0 && c.initADA();
	  }, b.prototype.initArrowEvents = function () {
	    var a = this;a.options.arrows === !0 && a.slideCount > a.options.slidesToShow && (a.$prevArrow.on("click.slick", { message: "previous" }, a.changeSlide), a.$nextArrow.on("click.slick", { message: "next" }, a.changeSlide));
	  }, b.prototype.initDotEvents = function () {
	    var b = this;b.options.dots === !0 && b.slideCount > b.options.slidesToShow && a("li", b.$dots).on("click.slick", { message: "index" }, b.changeSlide), b.options.dots === !0 && b.options.pauseOnDotsHover === !0 && b.options.autoplay === !0 && a("li", b.$dots).on("mouseenter.slick", a.proxy(b.setPaused, b, !0)).on("mouseleave.slick", a.proxy(b.setPaused, b, !1));
	  }, b.prototype.initializeEvents = function () {
	    var b = this;b.initArrowEvents(), b.initDotEvents(), b.$list.on("touchstart.slick mousedown.slick", { action: "start" }, b.swipeHandler), b.$list.on("touchmove.slick mousemove.slick", { action: "move" }, b.swipeHandler), b.$list.on("touchend.slick mouseup.slick", { action: "end" }, b.swipeHandler), b.$list.on("touchcancel.slick mouseleave.slick", { action: "end" }, b.swipeHandler), b.$list.on("click.slick", b.clickHandler), a(document).on(b.visibilityChange, a.proxy(b.visibility, b)), b.$list.on("mouseenter.slick", a.proxy(b.setPaused, b, !0)), b.$list.on("mouseleave.slick", a.proxy(b.setPaused, b, !1)), b.options.accessibility === !0 && b.$list.on("keydown.slick", b.keyHandler), b.options.focusOnSelect === !0 && a(b.$slideTrack).children().on("click.slick", b.selectHandler), a(window).on("orientationchange.slick.slick-" + b.instanceUid, a.proxy(b.orientationChange, b)), a(window).on("resize.slick.slick-" + b.instanceUid, a.proxy(b.resize, b)), a("[draggable!=true]", b.$slideTrack).on("dragstart", b.preventDefault), a(window).on("load.slick.slick-" + b.instanceUid, b.setPosition), a(document).on("ready.slick.slick-" + b.instanceUid, b.setPosition);
	  }, b.prototype.initUI = function () {
	    var a = this;a.options.arrows === !0 && a.slideCount > a.options.slidesToShow && (a.$prevArrow.show(), a.$nextArrow.show()), a.options.dots === !0 && a.slideCount > a.options.slidesToShow && a.$dots.show(), a.options.autoplay === !0 && a.autoPlay();
	  }, b.prototype.keyHandler = function (a) {
	    var b = this;a.target.tagName.match("TEXTAREA|INPUT|SELECT") || (37 === a.keyCode && b.options.accessibility === !0 ? b.changeSlide({ data: { message: "previous" } }) : 39 === a.keyCode && b.options.accessibility === !0 && b.changeSlide({ data: { message: "next" } }));
	  }, b.prototype.lazyLoad = function () {
	    function g(b) {
	      a("img[data-lazy]", b).each(function () {
	        var b = a(this),
	            c = a(this).attr("data-lazy"),
	            d = document.createElement("img");d.onload = function () {
	          b.animate({ opacity: 0 }, 100, function () {
	            b.attr("src", c).animate({ opacity: 1 }, 200, function () {
	              b.removeAttr("data-lazy").removeClass("slick-loading");
	            });
	          });
	        }, d.src = c;
	      });
	    }var c,
	        d,
	        e,
	        f,
	        b = this;b.options.centerMode === !0 ? b.options.infinite === !0 ? (e = b.currentSlide + (b.options.slidesToShow / 2 + 1), f = e + b.options.slidesToShow + 2) : (e = Math.max(0, b.currentSlide - (b.options.slidesToShow / 2 + 1)), f = 2 + (b.options.slidesToShow / 2 + 1) + b.currentSlide) : (e = b.options.infinite ? b.options.slidesToShow + b.currentSlide : b.currentSlide, f = e + b.options.slidesToShow, b.options.fade === !0 && (e > 0 && e--, f <= b.slideCount && f++)), c = b.$slider.find(".slick-slide").slice(e, f), g(c), b.slideCount <= b.options.slidesToShow ? (d = b.$slider.find(".slick-slide"), g(d)) : b.currentSlide >= b.slideCount - b.options.slidesToShow ? (d = b.$slider.find(".slick-cloned").slice(0, b.options.slidesToShow), g(d)) : 0 === b.currentSlide && (d = b.$slider.find(".slick-cloned").slice(-1 * b.options.slidesToShow), g(d));
	  }, b.prototype.loadSlider = function () {
	    var a = this;a.setPosition(), a.$slideTrack.css({ opacity: 1 }), a.$slider.removeClass("slick-loading"), a.initUI(), "progressive" === a.options.lazyLoad && a.progressiveLazyLoad();
	  }, b.prototype.next = b.prototype.slickNext = function () {
	    var a = this;a.changeSlide({ data: { message: "next" } });
	  }, b.prototype.orientationChange = function () {
	    var a = this;a.checkResponsive(), a.setPosition();
	  }, b.prototype.pause = b.prototype.slickPause = function () {
	    var a = this;a.autoPlayClear(), a.paused = !0;
	  }, b.prototype.play = b.prototype.slickPlay = function () {
	    var a = this;a.paused = !1, a.autoPlay();
	  }, b.prototype.postSlide = function (a) {
	    var b = this;b.$slider.trigger("afterChange", [b, a]), b.animating = !1, b.setPosition(), b.swipeLeft = null, b.options.autoplay === !0 && b.paused === !1 && b.autoPlay(), b.options.accessibility === !0 && b.initADA();
	  }, b.prototype.prev = b.prototype.slickPrev = function () {
	    var a = this;a.changeSlide({ data: { message: "previous" } });
	  }, b.prototype.preventDefault = function (a) {
	    a.preventDefault();
	  }, b.prototype.progressiveLazyLoad = function () {
	    var c,
	        d,
	        b = this;c = a("img[data-lazy]", b.$slider).length, c > 0 && (d = a("img[data-lazy]", b.$slider).first(), d.attr("src", null), d.attr("src", d.attr("data-lazy")).removeClass("slick-loading").load(function () {
	      d.removeAttr("data-lazy"), b.progressiveLazyLoad(), b.options.adaptiveHeight === !0 && b.setPosition();
	    }).error(function () {
	      d.removeAttr("data-lazy"), b.progressiveLazyLoad();
	    }));
	  }, b.prototype.refresh = function (b) {
	    var d,
	        e,
	        c = this;e = c.slideCount - c.options.slidesToShow, c.options.infinite || (c.slideCount <= c.options.slidesToShow ? c.currentSlide = 0 : c.currentSlide > e && (c.currentSlide = e)), d = c.currentSlide, c.destroy(!0), a.extend(c, c.initials, { currentSlide: d }), c.init(), b || c.changeSlide({ data: { message: "index", index: d } }, !1);
	  }, b.prototype.registerBreakpoints = function () {
	    var c,
	        d,
	        e,
	        b = this,
	        f = b.options.responsive || null;if ("array" === a.type(f) && f.length) {
	      b.respondTo = b.options.respondTo || "window";for (c in f) {
	        if (e = b.breakpoints.length - 1, d = f[c].breakpoint, f.hasOwnProperty(c)) {
	          for (; e >= 0;) {
	            b.breakpoints[e] && b.breakpoints[e] === d && b.breakpoints.splice(e, 1), e--;
	          }b.breakpoints.push(d), b.breakpointSettings[d] = f[c].settings;
	        }
	      }b.breakpoints.sort(function (a, c) {
	        return b.options.mobileFirst ? a - c : c - a;
	      });
	    }
	  }, b.prototype.reinit = function () {
	    var b = this;b.$slides = b.$slideTrack.children(b.options.slide).addClass("slick-slide"), b.slideCount = b.$slides.length, b.currentSlide >= b.slideCount && 0 !== b.currentSlide && (b.currentSlide = b.currentSlide - b.options.slidesToScroll), b.slideCount <= b.options.slidesToShow && (b.currentSlide = 0), b.registerBreakpoints(), b.setProps(), b.setupInfinite(), b.buildArrows(), b.updateArrows(), b.initArrowEvents(), b.buildDots(), b.updateDots(), b.initDotEvents(), b.checkResponsive(!1, !0), b.options.focusOnSelect === !0 && a(b.$slideTrack).children().on("click.slick", b.selectHandler), b.setSlideClasses(0), b.setPosition(), b.$slider.trigger("reInit", [b]), b.options.autoplay === !0 && b.focusHandler();
	  }, b.prototype.resize = function () {
	    var b = this;a(window).width() !== b.windowWidth && (clearTimeout(b.windowDelay), b.windowDelay = window.setTimeout(function () {
	      b.windowWidth = a(window).width(), b.checkResponsive(), b.unslicked || b.setPosition();
	    }, 50));
	  }, b.prototype.removeSlide = b.prototype.slickRemove = function (a, b, c) {
	    var d = this;return "boolean" == typeof a ? (b = a, a = b === !0 ? 0 : d.slideCount - 1) : a = b === !0 ? --a : a, d.slideCount < 1 || 0 > a || a > d.slideCount - 1 ? !1 : (d.unload(), c === !0 ? d.$slideTrack.children().remove() : d.$slideTrack.children(this.options.slide).eq(a).remove(), d.$slides = d.$slideTrack.children(this.options.slide), d.$slideTrack.children(this.options.slide).detach(), d.$slideTrack.append(d.$slides), d.$slidesCache = d.$slides, void d.reinit());
	  }, b.prototype.setCSS = function (a) {
	    var d,
	        e,
	        b = this,
	        c = {};b.options.rtl === !0 && (a = -a), d = "left" == b.positionProp ? Math.ceil(a) + "px" : "0px", e = "top" == b.positionProp ? Math.ceil(a) + "px" : "0px", c[b.positionProp] = a, b.transformsEnabled === !1 ? b.$slideTrack.css(c) : (c = {}, b.cssTransitions === !1 ? (c[b.animType] = "translate(" + d + ", " + e + ")", b.$slideTrack.css(c)) : (c[b.animType] = "translate3d(" + d + ", " + e + ", 0px)", b.$slideTrack.css(c)));
	  }, b.prototype.setDimensions = function () {
	    var a = this;a.options.vertical === !1 ? a.options.centerMode === !0 && a.$list.css({ padding: "0px " + a.options.centerPadding }) : (a.$list.height(a.$slides.first().outerHeight(!0) * a.options.slidesToShow), a.options.centerMode === !0 && a.$list.css({ padding: a.options.centerPadding + " 0px" })), a.listWidth = a.$list.width(), a.listHeight = a.$list.height(), a.options.vertical === !1 && a.options.variableWidth === !1 ? (a.slideWidth = Math.ceil(a.listWidth / a.options.slidesToShow), a.$slideTrack.width(Math.ceil(a.slideWidth * a.$slideTrack.children(".slick-slide").length))) : a.options.variableWidth === !0 ? a.$slideTrack.width(5e3 * a.slideCount) : (a.slideWidth = Math.ceil(a.listWidth), a.$slideTrack.height(Math.ceil(a.$slides.first().outerHeight(!0) * a.$slideTrack.children(".slick-slide").length)));var b = a.$slides.first().outerWidth(!0) - a.$slides.first().width();a.options.variableWidth === !1 && a.$slideTrack.children(".slick-slide").width(a.slideWidth - b);
	  }, b.prototype.setFade = function () {
	    var c,
	        b = this;b.$slides.each(function (d, e) {
	      c = b.slideWidth * d * -1, b.options.rtl === !0 ? a(e).css({ position: "relative", right: c, top: 0, zIndex: b.options.zIndex - 2, opacity: 0 }) : a(e).css({ position: "relative", left: c, top: 0, zIndex: b.options.zIndex - 2, opacity: 0 });
	    }), b.$slides.eq(b.currentSlide).css({ zIndex: b.options.zIndex - 1, opacity: 1 });
	  }, b.prototype.setHeight = function () {
	    var a = this;if (1 === a.options.slidesToShow && a.options.adaptiveHeight === !0 && a.options.vertical === !1) {
	      var b = a.$slides.eq(a.currentSlide).outerHeight(!0);a.$list.css("height", b);
	    }
	  }, b.prototype.setOption = b.prototype.slickSetOption = function (b, c, d) {
	    var f,
	        g,
	        e = this;if ("responsive" === b && "array" === a.type(c)) for (g in c) {
	      if ("array" !== a.type(e.options.responsive)) e.options.responsive = [c[g]];else {
	        for (f = e.options.responsive.length - 1; f >= 0;) {
	          e.options.responsive[f].breakpoint === c[g].breakpoint && e.options.responsive.splice(f, 1), f--;
	        }e.options.responsive.push(c[g]);
	      }
	    } else e.options[b] = c;d === !0 && (e.unload(), e.reinit());
	  }, b.prototype.setPosition = function () {
	    var a = this;a.setDimensions(), a.setHeight(), a.options.fade === !1 ? a.setCSS(a.getLeft(a.currentSlide)) : a.setFade(), a.$slider.trigger("setPosition", [a]);
	  }, b.prototype.setProps = function () {
	    var a = this,
	        b = document.body.style;a.positionProp = a.options.vertical === !0 ? "top" : "left", "top" === a.positionProp ? a.$slider.addClass("slick-vertical") : a.$slider.removeClass("slick-vertical"), (void 0 !== b.WebkitTransition || void 0 !== b.MozTransition || void 0 !== b.msTransition) && a.options.useCSS === !0 && (a.cssTransitions = !0), a.options.fade && ("number" == typeof a.options.zIndex ? a.options.zIndex < 3 && (a.options.zIndex = 3) : a.options.zIndex = a.defaults.zIndex), void 0 !== b.OTransform && (a.animType = "OTransform", a.transformType = "-o-transform", a.transitionType = "OTransition", void 0 === b.perspectiveProperty && void 0 === b.webkitPerspective && (a.animType = !1)), void 0 !== b.MozTransform && (a.animType = "MozTransform", a.transformType = "-moz-transform", a.transitionType = "MozTransition", void 0 === b.perspectiveProperty && void 0 === b.MozPerspective && (a.animType = !1)), void 0 !== b.webkitTransform && (a.animType = "webkitTransform", a.transformType = "-webkit-transform", a.transitionType = "webkitTransition", void 0 === b.perspectiveProperty && void 0 === b.webkitPerspective && (a.animType = !1)), void 0 !== b.msTransform && (a.animType = "msTransform", a.transformType = "-ms-transform", a.transitionType = "msTransition", void 0 === b.msTransform && (a.animType = !1)), void 0 !== b.transform && a.animType !== !1 && (a.animType = "transform", a.transformType = "transform", a.transitionType = "transition"), a.transformsEnabled = a.options.useTransform && null !== a.animType && a.animType !== !1;
	  }, b.prototype.setSlideClasses = function (a) {
	    var c,
	        d,
	        e,
	        f,
	        b = this;d = b.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden", "true"), b.$slides.eq(a).addClass("slick-current"), b.options.centerMode === !0 ? (c = Math.floor(b.options.slidesToShow / 2), b.options.infinite === !0 && (a >= c && a <= b.slideCount - 1 - c ? b.$slides.slice(a - c, a + c + 1).addClass("slick-active").attr("aria-hidden", "false") : (e = b.options.slidesToShow + a, d.slice(e - c + 1, e + c + 2).addClass("slick-active").attr("aria-hidden", "false")), 0 === a ? d.eq(d.length - 1 - b.options.slidesToShow).addClass("slick-center") : a === b.slideCount - 1 && d.eq(b.options.slidesToShow).addClass("slick-center")), b.$slides.eq(a).addClass("slick-center")) : a >= 0 && a <= b.slideCount - b.options.slidesToShow ? b.$slides.slice(a, a + b.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false") : d.length <= b.options.slidesToShow ? d.addClass("slick-active").attr("aria-hidden", "false") : (f = b.slideCount % b.options.slidesToShow, e = b.options.infinite === !0 ? b.options.slidesToShow + a : a, b.options.slidesToShow == b.options.slidesToScroll && b.slideCount - a < b.options.slidesToShow ? d.slice(e - (b.options.slidesToShow - f), e + f).addClass("slick-active").attr("aria-hidden", "false") : d.slice(e, e + b.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false")), "ondemand" === b.options.lazyLoad && b.lazyLoad();
	  }, b.prototype.setupInfinite = function () {
	    var c,
	        d,
	        e,
	        b = this;if (b.options.fade === !0 && (b.options.centerMode = !1), b.options.infinite === !0 && b.options.fade === !1 && (d = null, b.slideCount > b.options.slidesToShow)) {
	      for (e = b.options.centerMode === !0 ? b.options.slidesToShow + 1 : b.options.slidesToShow, c = b.slideCount; c > b.slideCount - e; c -= 1) {
	        d = c - 1, a(b.$slides[d]).clone(!0).attr("id", "").attr("data-slick-index", d - b.slideCount).prependTo(b.$slideTrack).addClass("slick-cloned");
	      }for (c = 0; e > c; c += 1) {
	        d = c, a(b.$slides[d]).clone(!0).attr("id", "").attr("data-slick-index", d + b.slideCount).appendTo(b.$slideTrack).addClass("slick-cloned");
	      }b.$slideTrack.find(".slick-cloned").find("[id]").each(function () {
	        a(this).attr("id", "");
	      });
	    }
	  }, b.prototype.setPaused = function (a) {
	    var b = this;b.options.autoplay === !0 && b.options.pauseOnHover === !0 && (b.paused = a, a ? b.autoPlayClear() : b.autoPlay());
	  }, b.prototype.selectHandler = function (b) {
	    var c = this,
	        d = a(b.target).is(".slick-slide") ? a(b.target) : a(b.target).parents(".slick-slide"),
	        e = parseInt(d.attr("data-slick-index"));return e || (e = 0), c.slideCount <= c.options.slidesToShow ? (c.setSlideClasses(e), void c.asNavFor(e)) : void c.slideHandler(e);
	  }, b.prototype.slideHandler = function (a, b, c) {
	    var d,
	        e,
	        f,
	        g,
	        h = null,
	        i = this;return b = b || !1, i.animating === !0 && i.options.waitForAnimate === !0 || i.options.fade === !0 && i.currentSlide === a || i.slideCount <= i.options.slidesToShow ? void 0 : (b === !1 && i.asNavFor(a), d = a, h = i.getLeft(d), g = i.getLeft(i.currentSlide), i.currentLeft = null === i.swipeLeft ? g : i.swipeLeft, i.options.infinite === !1 && i.options.centerMode === !1 && (0 > a || a > i.getDotCount() * i.options.slidesToScroll) ? void (i.options.fade === !1 && (d = i.currentSlide, c !== !0 ? i.animateSlide(g, function () {
	      i.postSlide(d);
	    }) : i.postSlide(d))) : i.options.infinite === !1 && i.options.centerMode === !0 && (0 > a || a > i.slideCount - i.options.slidesToScroll) ? void (i.options.fade === !1 && (d = i.currentSlide, c !== !0 ? i.animateSlide(g, function () {
	      i.postSlide(d);
	    }) : i.postSlide(d))) : (i.options.autoplay === !0 && clearInterval(i.autoPlayTimer), e = 0 > d ? i.slideCount % i.options.slidesToScroll !== 0 ? i.slideCount - i.slideCount % i.options.slidesToScroll : i.slideCount + d : d >= i.slideCount ? i.slideCount % i.options.slidesToScroll !== 0 ? 0 : d - i.slideCount : d, i.animating = !0, i.$slider.trigger("beforeChange", [i, i.currentSlide, e]), f = i.currentSlide, i.currentSlide = e, i.setSlideClasses(i.currentSlide), i.updateDots(), i.updateArrows(), i.options.fade === !0 ? (c !== !0 ? (i.fadeSlideOut(f), i.fadeSlide(e, function () {
	      i.postSlide(e);
	    })) : i.postSlide(e), void i.animateHeight()) : void (c !== !0 ? i.animateSlide(h, function () {
	      i.postSlide(e);
	    }) : i.postSlide(e))));
	  }, b.prototype.startLoad = function () {
	    var a = this;a.options.arrows === !0 && a.slideCount > a.options.slidesToShow && (a.$prevArrow.hide(), a.$nextArrow.hide()), a.options.dots === !0 && a.slideCount > a.options.slidesToShow && a.$dots.hide(), a.$slider.addClass("slick-loading");
	  }, b.prototype.swipeDirection = function () {
	    var a,
	        b,
	        c,
	        d,
	        e = this;return a = e.touchObject.startX - e.touchObject.curX, b = e.touchObject.startY - e.touchObject.curY, c = Math.atan2(b, a), d = Math.round(180 * c / Math.PI), 0 > d && (d = 360 - Math.abs(d)), 45 >= d && d >= 0 ? e.options.rtl === !1 ? "left" : "right" : 360 >= d && d >= 315 ? e.options.rtl === !1 ? "left" : "right" : d >= 135 && 225 >= d ? e.options.rtl === !1 ? "right" : "left" : e.options.verticalSwiping === !0 ? d >= 35 && 135 >= d ? "left" : "right" : "vertical";
	  }, b.prototype.swipeEnd = function (a) {
	    var c,
	        b = this;if (b.dragging = !1, b.shouldClick = b.touchObject.swipeLength > 10 ? !1 : !0, void 0 === b.touchObject.curX) return !1;if (b.touchObject.edgeHit === !0 && b.$slider.trigger("edge", [b, b.swipeDirection()]), b.touchObject.swipeLength >= b.touchObject.minSwipe) switch (b.swipeDirection()) {case "left":
	        c = b.options.swipeToSlide ? b.checkNavigable(b.currentSlide + b.getSlideCount()) : b.currentSlide + b.getSlideCount(), b.slideHandler(c), b.currentDirection = 0, b.touchObject = {}, b.$slider.trigger("swipe", [b, "left"]);break;case "right":
	        c = b.options.swipeToSlide ? b.checkNavigable(b.currentSlide - b.getSlideCount()) : b.currentSlide - b.getSlideCount(), b.slideHandler(c), b.currentDirection = 1, b.touchObject = {}, b.$slider.trigger("swipe", [b, "right"]);} else b.touchObject.startX !== b.touchObject.curX && (b.slideHandler(b.currentSlide), b.touchObject = {});
	  }, b.prototype.swipeHandler = function (a) {
	    var b = this;if (!(b.options.swipe === !1 || "ontouchend" in document && b.options.swipe === !1 || b.options.draggable === !1 && -1 !== a.type.indexOf("mouse"))) switch (b.touchObject.fingerCount = a.originalEvent && void 0 !== a.originalEvent.touches ? a.originalEvent.touches.length : 1, b.touchObject.minSwipe = b.listWidth / b.options.touchThreshold, b.options.verticalSwiping === !0 && (b.touchObject.minSwipe = b.listHeight / b.options.touchThreshold), a.data.action) {case "start":
	        b.swipeStart(a);break;case "move":
	        b.swipeMove(a);break;case "end":
	        b.swipeEnd(a);}
	  }, b.prototype.swipeMove = function (a) {
	    var d,
	        e,
	        f,
	        g,
	        h,
	        b = this;return h = void 0 !== a.originalEvent ? a.originalEvent.touches : null, !b.dragging || h && 1 !== h.length ? !1 : (d = b.getLeft(b.currentSlide), b.touchObject.curX = void 0 !== h ? h[0].pageX : a.clientX, b.touchObject.curY = void 0 !== h ? h[0].pageY : a.clientY, b.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(b.touchObject.curX - b.touchObject.startX, 2))), b.options.verticalSwiping === !0 && (b.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(b.touchObject.curY - b.touchObject.startY, 2)))), e = b.swipeDirection(), "vertical" !== e ? (void 0 !== a.originalEvent && b.touchObject.swipeLength > 4 && a.preventDefault(), g = (b.options.rtl === !1 ? 1 : -1) * (b.touchObject.curX > b.touchObject.startX ? 1 : -1), b.options.verticalSwiping === !0 && (g = b.touchObject.curY > b.touchObject.startY ? 1 : -1), f = b.touchObject.swipeLength, b.touchObject.edgeHit = !1, b.options.infinite === !1 && (0 === b.currentSlide && "right" === e || b.currentSlide >= b.getDotCount() && "left" === e) && (f = b.touchObject.swipeLength * b.options.edgeFriction, b.touchObject.edgeHit = !0), b.options.vertical === !1 ? b.swipeLeft = d + f * g : b.swipeLeft = d + f * (b.$list.height() / b.listWidth) * g, b.options.verticalSwiping === !0 && (b.swipeLeft = d + f * g), b.options.fade === !0 || b.options.touchMove === !1 ? !1 : b.animating === !0 ? (b.swipeLeft = null, !1) : void b.setCSS(b.swipeLeft)) : void 0);
	  }, b.prototype.swipeStart = function (a) {
	    var c,
	        b = this;return 1 !== b.touchObject.fingerCount || b.slideCount <= b.options.slidesToShow ? (b.touchObject = {}, !1) : (void 0 !== a.originalEvent && void 0 !== a.originalEvent.touches && (c = a.originalEvent.touches[0]), b.touchObject.startX = b.touchObject.curX = void 0 !== c ? c.pageX : a.clientX, b.touchObject.startY = b.touchObject.curY = void 0 !== c ? c.pageY : a.clientY, void (b.dragging = !0));
	  }, b.prototype.unfilterSlides = b.prototype.slickUnfilter = function () {
	    var a = this;null !== a.$slidesCache && (a.unload(), a.$slideTrack.children(this.options.slide).detach(), a.$slidesCache.appendTo(a.$slideTrack), a.reinit());
	  }, b.prototype.unload = function () {
	    var b = this;a(".slick-cloned", b.$slider).remove(), b.$dots && b.$dots.remove(), b.$prevArrow && b.htmlExpr.test(b.options.prevArrow) && b.$prevArrow.remove(), b.$nextArrow && b.htmlExpr.test(b.options.nextArrow) && b.$nextArrow.remove(), b.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden", "true").css("width", "");
	  }, b.prototype.unslick = function (a) {
	    var b = this;b.$slider.trigger("unslick", [b, a]), b.destroy();
	  }, b.prototype.updateArrows = function () {
	    var b,
	        a = this;b = Math.floor(a.options.slidesToShow / 2), a.options.arrows === !0 && a.slideCount > a.options.slidesToShow && !a.options.infinite && (a.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), a.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), 0 === a.currentSlide ? (a.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true"), a.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : a.currentSlide >= a.slideCount - a.options.slidesToShow && a.options.centerMode === !1 ? (a.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), a.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : a.currentSlide >= a.slideCount - 1 && a.options.centerMode === !0 && (a.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), a.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")));
	  }, b.prototype.updateDots = function () {
	    var a = this;null !== a.$dots && (a.$dots.find("li").removeClass("slick-active").attr("aria-hidden", "true"), a.$dots.find("li").eq(Math.floor(a.currentSlide / a.options.slidesToScroll)).addClass("slick-active").attr("aria-hidden", "false"));
	  }, b.prototype.visibility = function () {
	    var a = this;document[a.hidden] ? (a.paused = !0, a.autoPlayClear()) : a.options.autoplay === !0 && (a.paused = !1, a.autoPlay());
	  }, b.prototype.initADA = function () {
	    var b = this;b.$slides.add(b.$slideTrack.find(".slick-cloned")).attr({ "aria-hidden": "true", tabindex: "-1" }).find("a, input, button, select").attr({ tabindex: "-1" }), b.$slideTrack.attr("role", "listbox"), b.$slides.not(b.$slideTrack.find(".slick-cloned")).each(function (c) {
	      a(this).attr({ role: "option", "aria-describedby": "slick-slide" + b.instanceUid + c });
	    }), null !== b.$dots && b.$dots.attr("role", "tablist").find("li").each(function (c) {
	      a(this).attr({ role: "presentation", "aria-selected": "false", "aria-controls": "navigation" + b.instanceUid + c, id: "slick-slide" + b.instanceUid + c });
	    }).first().attr("aria-selected", "true").end().find("button").attr("role", "button").end().closest("div").attr("role", "toolbar"), b.activateADA();
	  }, b.prototype.activateADA = function () {
	    var a = this;a.$slideTrack.find(".slick-active").attr({ "aria-hidden": "false" }).find("a, input, button, select").attr({ tabindex: "0" });
	  }, b.prototype.focusHandler = function () {
	    var b = this;b.$slider.on("focus.slick blur.slick", "*", function (c) {
	      c.stopImmediatePropagation();var d = a(this);setTimeout(function () {
	        b.isPlay && (d.is(":focus") ? (b.autoPlayClear(), b.paused = !0) : (b.paused = !1, b.autoPlay()));
	      }, 0);
	    });
	  }, a.fn.slick = function () {
	    var f,
	        g,
	        a = this,
	        c = arguments[0],
	        d = Array.prototype.slice.call(arguments, 1),
	        e = a.length;for (f = 0; e > f; f++) {
	      if ("object" == (typeof c === "undefined" ? "undefined" : _typeof(c)) || "undefined" == typeof c ? a[f].slick = new b(a[f], c) : g = a[f].slick[c].apply(a[f].slick, d), "undefined" != typeof g) return g;
	    }return a;
	  };
	});

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var require;var require;/* WEBPACK VAR INJECTION */(function(global, jQuery) {"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	(function e(t, n, r) {
	  function s(o, u) {
	    if (!n[o]) {
	      if (!t[o]) {
	        var a = typeof require == "function" && require;if (!u && a) return require(o, !0);if (i) return i(o, !0);var f = new Error("Cannot find module '" + o + "'");throw f.code = "MODULE_NOT_FOUND", f;
	      }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {
	        var n = t[o][1][e];return s(n ? n : e);
	      }, l, l.exports, e, t, n, r);
	    }return n[o].exports;
	  }var i = typeof require == "function" && require;for (var o = 0; o < r.length; o++) {
	    s(r[o]);
	  }return s;
	})({ 1: [function (require, module, exports) {
	    (function (global) {
	
	      var ResizeSensor = require('css-element-queries/src/ResizeSensor');
	      var ResizeSensor = require('css-element-queries/src/ResizeSensor');
	      var Ps = require('perfect-scrollbar');
	      var ko = typeof window !== "undefined" ? window['ko'] : typeof global !== "undefined" ? global['ko'] : null;
	
	      function getOpts(acc) {
	        var opts = ko.unwrap(acc());
	        if (opts.x === undefined) opts.x = true;
	        if (opts.y === undefined) opts.y = true;
	        return opts;
	      }
	
	      function psOpts(opts) {
	        return {
	          suppressScrollX: !opts.x,
	          suppressScrollY: !opts.y
	        };
	      }
	
	      var scrollBinding = {
	        init: function init(element, valAcc, bindings, vm, ctx) {
	          var opts = getOpts(valAcc);
	          Ps.initialize(element, psOpts(opts));
	          var sensor = new ResizeSensor(element, function () {
	            Ps.update(element);
	          });
	          ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
	            sensor.detach();
	            Ps.destroy(element);
	          });
	        },
	        update: function update(element, valAcc, bindings, vm, ctx) {
	          var opts = getOpts(valAcc);
	          if (ctx._firstUpdateComplete) {
	            Ps.destroy(element);
	            ko.bindingHandlers.scroll.init.apply(this, arguments);
	          }
	          Object.assign(element.style, {
	            overflowX: opts.x ? 'scroll' : 'hidden',
	            overflowY: opts.y ? 'scroll' : 'hidden'
	          });
	          ctx._firstUpdateComplete = true;
	        }
	      };
	
	      module.exports = ko.bindingHandlers.scroll = scrollBinding;
	    }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
	  }, { "css-element-queries/src/ResizeSensor": 2, "perfect-scrollbar": 3 }], 2: [function (require, module, exports) {
	    /**
	     * Copyright Marc J. Schmidt. See the LICENSE file at the top-level
	     * directory of this distribution and at
	     * https://github.com/marcj/css-element-queries/blob/master/LICENSE.
	     */
	    ;
	    (function () {
	
	      /**
	       * Class for dimension change detection.
	       *
	       * @param {Element|Element[]|Elements|jQuery} element
	       * @param {Function} callback
	       *
	       * @constructor
	       */
	      var ResizeSensor = function ResizeSensor(element, callback) {
	        /**
	         *
	         * @constructor
	         */
	        function EventQueue() {
	          this.q = [];
	          this.add = function (ev) {
	            this.q.push(ev);
	          };
	
	          var i, j;
	          this.call = function () {
	            for (i = 0, j = this.q.length; i < j; i++) {
	              this.q[i].call();
	            }
	          };
	        }
	
	        /**
	         * @param {HTMLElement} element
	         * @param {String}      prop
	         * @returns {String|Number}
	         */
	        function getComputedStyle(element, prop) {
	          if (element.currentStyle) {
	            return element.currentStyle[prop];
	          } else if (window.getComputedStyle) {
	            return window.getComputedStyle(element, null).getPropertyValue(prop);
	          } else {
	            return element.style[prop];
	          }
	        }
	
	        /**
	         *
	         * @param {HTMLElement} element
	         * @param {Function}    resized
	         */
	        function attachResizeEvent(element, resized) {
	          if (!element.resizedAttached) {
	            element.resizedAttached = new EventQueue();
	            element.resizedAttached.add(resized);
	          } else if (element.resizedAttached) {
	            element.resizedAttached.add(resized);
	            return;
	          }
	
	          element.resizeSensor = document.createElement('div');
	          element.resizeSensor.className = 'resize-sensor';
	          var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;';
	          var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';
	
	          element.resizeSensor.style.cssText = style;
	          element.resizeSensor.innerHTML = '<div class="resize-sensor-expand" style="' + style + '">' + '<div style="' + styleChild + '"></div>' + '</div>' + '<div class="resize-sensor-shrink" style="' + style + '">' + '<div style="' + styleChild + ' width: 200%; height: 200%"></div>' + '</div>';
	          element.appendChild(element.resizeSensor);
	
	          if (!{ fixed: 1, absolute: 1 }[getComputedStyle(element, 'position')]) {
	            element.style.position = 'relative';
	          }
	
	          var expand = element.resizeSensor.childNodes[0];
	          var expandChild = expand.childNodes[0];
	          var shrink = element.resizeSensor.childNodes[1];
	          var shrinkChild = shrink.childNodes[0];
	
	          var lastWidth, lastHeight;
	
	          var reset = function reset() {
	            expandChild.style.width = expand.offsetWidth + 10 + 'px';
	            expandChild.style.height = expand.offsetHeight + 10 + 'px';
	            expand.scrollLeft = expand.scrollWidth;
	            expand.scrollTop = expand.scrollHeight;
	            shrink.scrollLeft = shrink.scrollWidth;
	            shrink.scrollTop = shrink.scrollHeight;
	            lastWidth = element.offsetWidth;
	            lastHeight = element.offsetHeight;
	          };
	
	          reset();
	
	          var changed = function changed() {
	            if (element.resizedAttached) {
	              element.resizedAttached.call();
	            }
	          };
	
	          var addEvent = function addEvent(el, name, cb) {
	            if (el.attachEvent) {
	              el.attachEvent('on' + name, cb);
	            } else {
	              el.addEventListener(name, cb);
	            }
	          };
	
	          var onScroll = function onScroll() {
	            if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {
	              changed();
	            }
	            reset();
	          };
	
	          addEvent(expand, 'scroll', onScroll);
	          addEvent(shrink, 'scroll', onScroll);
	        }
	
	        var elementType = Object.prototype.toString.call(element);
	        var isCollectionTyped = '[object Array]' === elementType || '[object NodeList]' === elementType || '[object HTMLCollection]' === elementType || 'undefined' !== typeof jQuery && element instanceof jQuery //jquery
	        || 'undefined' !== typeof Elements && element instanceof Elements //mootools
	        ;
	
	        if (isCollectionTyped) {
	          var i = 0,
	              j = element.length;
	          for (; i < j; i++) {
	            attachResizeEvent(element[i], callback);
	          }
	        } else {
	          attachResizeEvent(element, callback);
	        }
	
	        this.detach = function () {
	          if (isCollectionTyped) {
	            var i = 0,
	                j = element.length;
	            for (; i < j; i++) {
	              ResizeSensor.detach(element[i]);
	            }
	          } else {
	            ResizeSensor.detach(element);
	          }
	        };
	      };
	
	      ResizeSensor.detach = function (element) {
	        if (element.resizeSensor) {
	          element.removeChild(element.resizeSensor);
	          delete element.resizeSensor;
	          delete element.resizedAttached;
	        }
	      };
	
	      // make available to common module loader
	      if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
	        module.exports = ResizeSensor;
	      } else {
	        window.ResizeSensor = ResizeSensor;
	      }
	    })();
	  }, {}], 3: [function (require, module, exports) {
	    'use strict';
	
	    module.exports = require('./src/js/main');
	  }, { "./src/js/main": 9 }], 4: [function (require, module, exports) {
	    'use strict';
	
	    function oldAdd(element, className) {
	      var classes = element.className.split(' ');
	      if (classes.indexOf(className) < 0) {
	        classes.push(className);
	      }
	      element.className = classes.join(' ');
	    }
	
	    function oldRemove(element, className) {
	      var classes = element.className.split(' ');
	      var idx = classes.indexOf(className);
	      if (idx >= 0) {
	        classes.splice(idx, 1);
	      }
	      element.className = classes.join(' ');
	    }
	
	    exports.add = function (element, className) {
	      if (element.classList) {
	        element.classList.add(className);
	      } else {
	        oldAdd(element, className);
	      }
	    };
	
	    exports.remove = function (element, className) {
	      if (element.classList) {
	        element.classList.remove(className);
	      } else {
	        oldRemove(element, className);
	      }
	    };
	
	    exports.list = function (element) {
	      if (element.classList) {
	        return Array.prototype.slice.apply(element.classList);
	      } else {
	        return element.className.split(' ');
	      }
	    };
	  }, {}], 5: [function (require, module, exports) {
	    'use strict';
	
	    var DOM = {};
	
	    DOM.e = function (tagName, className) {
	      var element = document.createElement(tagName);
	      element.className = className;
	      return element;
	    };
	
	    DOM.appendTo = function (child, parent) {
	      parent.appendChild(child);
	      return child;
	    };
	
	    function cssGet(element, styleName) {
	      return window.getComputedStyle(element)[styleName];
	    }
	
	    function cssSet(element, styleName, styleValue) {
	      if (typeof styleValue === 'number') {
	        styleValue = styleValue.toString() + 'px';
	      }
	      element.style[styleName] = styleValue;
	      return element;
	    }
	
	    function cssMultiSet(element, obj) {
	      for (var key in obj) {
	        var val = obj[key];
	        if (typeof val === 'number') {
	          val = val.toString() + 'px';
	        }
	        element.style[key] = val;
	      }
	      return element;
	    }
	
	    DOM.css = function (element, styleNameOrObject, styleValue) {
	      if ((typeof styleNameOrObject === "undefined" ? "undefined" : _typeof(styleNameOrObject)) === 'object') {
	        // multiple set with object
	        return cssMultiSet(element, styleNameOrObject);
	      } else {
	        if (typeof styleValue === 'undefined') {
	          return cssGet(element, styleNameOrObject);
	        } else {
	          return cssSet(element, styleNameOrObject, styleValue);
	        }
	      }
	    };
	
	    DOM.matches = function (element, query) {
	      if (typeof element.matches !== 'undefined') {
	        return element.matches(query);
	      } else {
	        if (typeof element.matchesSelector !== 'undefined') {
	          return element.matchesSelector(query);
	        } else if (typeof element.webkitMatchesSelector !== 'undefined') {
	          return element.webkitMatchesSelector(query);
	        } else if (typeof element.mozMatchesSelector !== 'undefined') {
	          return element.mozMatchesSelector(query);
	        } else if (typeof element.msMatchesSelector !== 'undefined') {
	          return element.msMatchesSelector(query);
	        }
	      }
	    };
	
	    DOM.remove = function (element) {
	      if (typeof element.remove !== 'undefined') {
	        element.remove();
	      } else {
	        if (element.parentNode) {
	          element.parentNode.removeChild(element);
	        }
	      }
	    };
	
	    DOM.queryChildren = function (element, selector) {
	      return Array.prototype.filter.call(element.childNodes, function (child) {
	        return DOM.matches(child, selector);
	      });
	    };
	
	    module.exports = DOM;
	  }, {}], 6: [function (require, module, exports) {
	    'use strict';
	
	    var EventElement = function EventElement(element) {
	      this.element = element;
	      this.events = {};
	    };
	
	    EventElement.prototype.bind = function (eventName, handler) {
	      if (typeof this.events[eventName] === 'undefined') {
	        this.events[eventName] = [];
	      }
	      this.events[eventName].push(handler);
	      this.element.addEventListener(eventName, handler, false);
	    };
	
	    EventElement.prototype.unbind = function (eventName, handler) {
	      var isHandlerProvided = typeof handler !== 'undefined';
	      this.events[eventName] = this.events[eventName].filter(function (hdlr) {
	        if (isHandlerProvided && hdlr !== handler) {
	          return true;
	        }
	        this.element.removeEventListener(eventName, hdlr, false);
	        return false;
	      }, this);
	    };
	
	    EventElement.prototype.unbindAll = function () {
	      for (var name in this.events) {
	        this.unbind(name);
	      }
	    };
	
	    var EventManager = function EventManager() {
	      this.eventElements = [];
	    };
	
	    EventManager.prototype.eventElement = function (element) {
	      var ee = this.eventElements.filter(function (eventElement) {
	        return eventElement.element === element;
	      })[0];
	      if (typeof ee === 'undefined') {
	        ee = new EventElement(element);
	        this.eventElements.push(ee);
	      }
	      return ee;
	    };
	
	    EventManager.prototype.bind = function (element, eventName, handler) {
	      this.eventElement(element).bind(eventName, handler);
	    };
	
	    EventManager.prototype.unbind = function (element, eventName, handler) {
	      this.eventElement(element).unbind(eventName, handler);
	    };
	
	    EventManager.prototype.unbindAll = function () {
	      for (var i = 0; i < this.eventElements.length; i++) {
	        this.eventElements[i].unbindAll();
	      }
	    };
	
	    EventManager.prototype.once = function (element, eventName, handler) {
	      var ee = this.eventElement(element);
	      var onceHandler = function onceHandler(e) {
	        ee.unbind(eventName, onceHandler);
	        handler(e);
	      };
	      ee.bind(eventName, onceHandler);
	    };
	
	    module.exports = EventManager;
	  }, {}], 7: [function (require, module, exports) {
	    'use strict';
	
	    module.exports = function () {
	      function s4() {
	        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
	      }
	      return function () {
	        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
	      };
	    }();
	  }, {}], 8: [function (require, module, exports) {
	    'use strict';
	
	    var cls = require('./class');
	    var dom = require('./dom');
	
	    var toInt = exports.toInt = function (x) {
	      return parseInt(x, 10) || 0;
	    };
	
	    var clone = exports.clone = function (obj) {
	      if (obj === null) {
	        return null;
	      } else if (obj.constructor === Array) {
	        return obj.map(clone);
	      } else if ((typeof obj === "undefined" ? "undefined" : _typeof(obj)) === 'object') {
	        var result = {};
	        for (var key in obj) {
	          result[key] = clone(obj[key]);
	        }
	        return result;
	      } else {
	        return obj;
	      }
	    };
	
	    exports.extend = function (original, source) {
	      var result = clone(original);
	      for (var key in source) {
	        result[key] = clone(source[key]);
	      }
	      return result;
	    };
	
	    exports.isEditable = function (el) {
	      return dom.matches(el, "input,[contenteditable]") || dom.matches(el, "select,[contenteditable]") || dom.matches(el, "textarea,[contenteditable]") || dom.matches(el, "button,[contenteditable]");
	    };
	
	    exports.removePsClasses = function (element) {
	      var clsList = cls.list(element);
	      for (var i = 0; i < clsList.length; i++) {
	        var className = clsList[i];
	        if (className.indexOf('ps-') === 0) {
	          cls.remove(element, className);
	        }
	      }
	    };
	
	    exports.outerWidth = function (element) {
	      return toInt(dom.css(element, 'width')) + toInt(dom.css(element, 'paddingLeft')) + toInt(dom.css(element, 'paddingRight')) + toInt(dom.css(element, 'borderLeftWidth')) + toInt(dom.css(element, 'borderRightWidth'));
	    };
	
	    exports.startScrolling = function (element, axis) {
	      cls.add(element, 'ps-in-scrolling');
	      if (typeof axis !== 'undefined') {
	        cls.add(element, 'ps-' + axis);
	      } else {
	        cls.add(element, 'ps-x');
	        cls.add(element, 'ps-y');
	      }
	    };
	
	    exports.stopScrolling = function (element, axis) {
	      cls.remove(element, 'ps-in-scrolling');
	      if (typeof axis !== 'undefined') {
	        cls.remove(element, 'ps-' + axis);
	      } else {
	        cls.remove(element, 'ps-x');
	        cls.remove(element, 'ps-y');
	      }
	    };
	
	    exports.env = {
	      isWebKit: 'WebkitAppearance' in document.documentElement.style,
	      supportsTouch: 'ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch,
	      supportsIePointer: window.navigator.msMaxTouchPoints !== null
	    };
	  }, { "./class": 4, "./dom": 5 }], 9: [function (require, module, exports) {
	    'use strict';
	
	    var destroy = require('./plugin/destroy');
	    var initialize = require('./plugin/initialize');
	    var update = require('./plugin/update');
	
	    module.exports = {
	      initialize: initialize,
	      update: update,
	      destroy: destroy
	    };
	  }, { "./plugin/destroy": 11, "./plugin/initialize": 19, "./plugin/update": 23 }], 10: [function (require, module, exports) {
	    'use strict';
	
	    module.exports = {
	      handlers: ['click-rail', 'drag-scrollbar', 'keyboard', 'wheel', 'touch'],
	      maxScrollbarLength: null,
	      minScrollbarLength: null,
	      scrollXMarginOffset: 0,
	      scrollYMarginOffset: 0,
	      stopPropagationOnClick: true,
	      suppressScrollX: false,
	      suppressScrollY: false,
	      swipePropagation: true,
	      useBothWheelAxes: false,
	      wheelPropagation: false,
	      wheelSpeed: 1,
	      theme: 'default'
	    };
	  }, {}], 11: [function (require, module, exports) {
	    'use strict';
	
	    var _ = require('../lib/helper');
	    var dom = require('../lib/dom');
	    var instances = require('./instances');
	
	    module.exports = function (element) {
	      var i = instances.get(element);
	
	      if (!i) {
	        return;
	      }
	
	      i.event.unbindAll();
	      dom.remove(i.scrollbarX);
	      dom.remove(i.scrollbarY);
	      dom.remove(i.scrollbarXRail);
	      dom.remove(i.scrollbarYRail);
	      _.removePsClasses(element);
	
	      instances.remove(element);
	    };
	  }, { "../lib/dom": 5, "../lib/helper": 8, "./instances": 20 }], 12: [function (require, module, exports) {
	    'use strict';
	
	    var _ = require('../../lib/helper');
	    var instances = require('../instances');
	    var updateGeometry = require('../update-geometry');
	    var updateScroll = require('../update-scroll');
	
	    function bindClickRailHandler(element, i) {
	      function pageOffset(el) {
	        return el.getBoundingClientRect();
	      }
	      var stopPropagation = function stopPropagation(e) {
	        e.stopPropagation();
	      };
	
	      if (i.settings.stopPropagationOnClick) {
	        i.event.bind(i.scrollbarY, 'click', stopPropagation);
	      }
	      i.event.bind(i.scrollbarYRail, 'click', function (e) {
	        var halfOfScrollbarLength = _.toInt(i.scrollbarYHeight / 2);
	        var positionTop = i.railYRatio * (e.pageY - window.pageYOffset - pageOffset(i.scrollbarYRail).top - halfOfScrollbarLength);
	        var maxPositionTop = i.railYRatio * (i.railYHeight - i.scrollbarYHeight);
	        var positionRatio = positionTop / maxPositionTop;
	
	        if (positionRatio < 0) {
	          positionRatio = 0;
	        } else if (positionRatio > 1) {
	          positionRatio = 1;
	        }
	
	        updateScroll(element, 'top', (i.contentHeight - i.containerHeight) * positionRatio);
	        updateGeometry(element);
	
	        e.stopPropagation();
	      });
	
	      if (i.settings.stopPropagationOnClick) {
	        i.event.bind(i.scrollbarX, 'click', stopPropagation);
	      }
	      i.event.bind(i.scrollbarXRail, 'click', function (e) {
	        var halfOfScrollbarLength = _.toInt(i.scrollbarXWidth / 2);
	        var positionLeft = i.railXRatio * (e.pageX - window.pageXOffset - pageOffset(i.scrollbarXRail).left - halfOfScrollbarLength);
	        var maxPositionLeft = i.railXRatio * (i.railXWidth - i.scrollbarXWidth);
	        var positionRatio = positionLeft / maxPositionLeft;
	
	        if (positionRatio < 0) {
	          positionRatio = 0;
	        } else if (positionRatio > 1) {
	          positionRatio = 1;
	        }
	
	        updateScroll(element, 'left', (i.contentWidth - i.containerWidth) * positionRatio - i.negativeScrollAdjustment);
	        updateGeometry(element);
	
	        e.stopPropagation();
	      });
	    }
	
	    module.exports = function (element) {
	      var i = instances.get(element);
	      bindClickRailHandler(element, i);
	    };
	  }, { "../../lib/helper": 8, "../instances": 20, "../update-geometry": 21, "../update-scroll": 22 }], 13: [function (require, module, exports) {
	    'use strict';
	
	    var _ = require('../../lib/helper');
	    var dom = require('../../lib/dom');
	    var instances = require('../instances');
	    var updateGeometry = require('../update-geometry');
	    var updateScroll = require('../update-scroll');
	
	    function bindMouseScrollXHandler(element, i) {
	      var currentLeft = null;
	      var currentPageX = null;
	
	      function updateScrollLeft(deltaX) {
	        var newLeft = currentLeft + deltaX * i.railXRatio;
	        var maxLeft = Math.max(0, i.scrollbarXRail.getBoundingClientRect().left) + i.railXRatio * (i.railXWidth - i.scrollbarXWidth);
	
	        if (newLeft < 0) {
	          i.scrollbarXLeft = 0;
	        } else if (newLeft > maxLeft) {
	          i.scrollbarXLeft = maxLeft;
	        } else {
	          i.scrollbarXLeft = newLeft;
	        }
	
	        var scrollLeft = _.toInt(i.scrollbarXLeft * (i.contentWidth - i.containerWidth) / (i.containerWidth - i.railXRatio * i.scrollbarXWidth)) - i.negativeScrollAdjustment;
	        updateScroll(element, 'left', scrollLeft);
	      }
	
	      var mouseMoveHandler = function mouseMoveHandler(e) {
	        updateScrollLeft(e.pageX - currentPageX);
	        updateGeometry(element);
	        e.stopPropagation();
	        e.preventDefault();
	      };
	
	      var mouseUpHandler = function mouseUpHandler() {
	        _.stopScrolling(element, 'x');
	        i.event.unbind(i.ownerDocument, 'mousemove', mouseMoveHandler);
	      };
	
	      i.event.bind(i.scrollbarX, 'mousedown', function (e) {
	        currentPageX = e.pageX;
	        currentLeft = _.toInt(dom.css(i.scrollbarX, 'left')) * i.railXRatio;
	        _.startScrolling(element, 'x');
	
	        i.event.bind(i.ownerDocument, 'mousemove', mouseMoveHandler);
	        i.event.once(i.ownerDocument, 'mouseup', mouseUpHandler);
	
	        e.stopPropagation();
	        e.preventDefault();
	      });
	    }
	
	    function bindMouseScrollYHandler(element, i) {
	      var currentTop = null;
	      var currentPageY = null;
	
	      function updateScrollTop(deltaY) {
	        var newTop = currentTop + deltaY * i.railYRatio;
	        var maxTop = Math.max(0, i.scrollbarYRail.getBoundingClientRect().top) + i.railYRatio * (i.railYHeight - i.scrollbarYHeight);
	
	        if (newTop < 0) {
	          i.scrollbarYTop = 0;
	        } else if (newTop > maxTop) {
	          i.scrollbarYTop = maxTop;
	        } else {
	          i.scrollbarYTop = newTop;
	        }
	
	        var scrollTop = _.toInt(i.scrollbarYTop * (i.contentHeight - i.containerHeight) / (i.containerHeight - i.railYRatio * i.scrollbarYHeight));
	        updateScroll(element, 'top', scrollTop);
	      }
	
	      var mouseMoveHandler = function mouseMoveHandler(e) {
	        updateScrollTop(e.pageY - currentPageY);
	        updateGeometry(element);
	        e.stopPropagation();
	        e.preventDefault();
	      };
	
	      var mouseUpHandler = function mouseUpHandler() {
	        _.stopScrolling(element, 'y');
	        i.event.unbind(i.ownerDocument, 'mousemove', mouseMoveHandler);
	      };
	
	      i.event.bind(i.scrollbarY, 'mousedown', function (e) {
	        currentPageY = e.pageY;
	        currentTop = _.toInt(dom.css(i.scrollbarY, 'top')) * i.railYRatio;
	        _.startScrolling(element, 'y');
	
	        i.event.bind(i.ownerDocument, 'mousemove', mouseMoveHandler);
	        i.event.once(i.ownerDocument, 'mouseup', mouseUpHandler);
	
	        e.stopPropagation();
	        e.preventDefault();
	      });
	    }
	
	    module.exports = function (element) {
	      var i = instances.get(element);
	      bindMouseScrollXHandler(element, i);
	      bindMouseScrollYHandler(element, i);
	    };
	  }, { "../../lib/dom": 5, "../../lib/helper": 8, "../instances": 20, "../update-geometry": 21, "../update-scroll": 22 }], 14: [function (require, module, exports) {
	    'use strict';
	
	    var _ = require('../../lib/helper');
	    var dom = require('../../lib/dom');
	    var instances = require('../instances');
	    var updateGeometry = require('../update-geometry');
	    var updateScroll = require('../update-scroll');
	
	    function bindKeyboardHandler(element, i) {
	      var hovered = false;
	      i.event.bind(element, 'mouseenter', function () {
	        hovered = true;
	      });
	      i.event.bind(element, 'mouseleave', function () {
	        hovered = false;
	      });
	
	      var shouldPrevent = false;
	      function shouldPreventDefault(deltaX, deltaY) {
	        var scrollTop = element.scrollTop;
	        if (deltaX === 0) {
	          if (!i.scrollbarYActive) {
	            return false;
	          }
	          if (scrollTop === 0 && deltaY > 0 || scrollTop >= i.contentHeight - i.containerHeight && deltaY < 0) {
	            return !i.settings.wheelPropagation;
	          }
	        }
	
	        var scrollLeft = element.scrollLeft;
	        if (deltaY === 0) {
	          if (!i.scrollbarXActive) {
	            return false;
	          }
	          if (scrollLeft === 0 && deltaX < 0 || scrollLeft >= i.contentWidth - i.containerWidth && deltaX > 0) {
	            return !i.settings.wheelPropagation;
	          }
	        }
	        return true;
	      }
	
	      i.event.bind(i.ownerDocument, 'keydown', function (e) {
	        if (e.isDefaultPrevented && e.isDefaultPrevented() || e.defaultPrevented) {
	          return;
	        }
	
	        var focused = dom.matches(i.scrollbarX, ':focus') || dom.matches(i.scrollbarY, ':focus');
	
	        if (!hovered && !focused) {
	          return;
	        }
	
	        var activeElement = document.activeElement ? document.activeElement : i.ownerDocument.activeElement;
	        if (activeElement) {
	          if (activeElement.tagName === 'IFRAME') {
	            activeElement = activeElement.contentDocument.activeElement;
	          } else {
	            // go deeper if element is a webcomponent
	            while (activeElement.shadowRoot) {
	              activeElement = activeElement.shadowRoot.activeElement;
	            }
	          }
	          if (_.isEditable(activeElement)) {
	            return;
	          }
	        }
	
	        var deltaX = 0;
	        var deltaY = 0;
	
	        switch (e.which) {
	          case 37:
	            // left
	            deltaX = -30;
	            break;
	          case 38:
	            // up
	            deltaY = 30;
	            break;
	          case 39:
	            // right
	            deltaX = 30;
	            break;
	          case 40:
	            // down
	            deltaY = -30;
	            break;
	          case 33:
	            // page up
	            deltaY = 90;
	            break;
	          case 32:
	            // space bar
	            if (e.shiftKey) {
	              deltaY = 90;
	            } else {
	              deltaY = -90;
	            }
	            break;
	          case 34:
	            // page down
	            deltaY = -90;
	            break;
	          case 35:
	            // end
	            if (e.ctrlKey) {
	              deltaY = -i.contentHeight;
	            } else {
	              deltaY = -i.containerHeight;
	            }
	            break;
	          case 36:
	            // home
	            if (e.ctrlKey) {
	              deltaY = element.scrollTop;
	            } else {
	              deltaY = i.containerHeight;
	            }
	            break;
	          default:
	            return;
	        }
	
	        updateScroll(element, 'top', element.scrollTop - deltaY);
	        updateScroll(element, 'left', element.scrollLeft + deltaX);
	        updateGeometry(element);
	
	        shouldPrevent = shouldPreventDefault(deltaX, deltaY);
	        if (shouldPrevent) {
	          e.preventDefault();
	        }
	      });
	    }
	
	    module.exports = function (element) {
	      var i = instances.get(element);
	      bindKeyboardHandler(element, i);
	    };
	  }, { "../../lib/dom": 5, "../../lib/helper": 8, "../instances": 20, "../update-geometry": 21, "../update-scroll": 22 }], 15: [function (require, module, exports) {
	    'use strict';
	
	    var instances = require('../instances');
	    var updateGeometry = require('../update-geometry');
	    var updateScroll = require('../update-scroll');
	
	    function bindMouseWheelHandler(element, i) {
	      var shouldPrevent = false;
	
	      function shouldPreventDefault(deltaX, deltaY) {
	        var scrollTop = element.scrollTop;
	        if (deltaX === 0) {
	          if (!i.scrollbarYActive) {
	            return false;
	          }
	          if (scrollTop === 0 && deltaY > 0 || scrollTop >= i.contentHeight - i.containerHeight && deltaY < 0) {
	            return !i.settings.wheelPropagation;
	          }
	        }
	
	        var scrollLeft = element.scrollLeft;
	        if (deltaY === 0) {
	          if (!i.scrollbarXActive) {
	            return false;
	          }
	          if (scrollLeft === 0 && deltaX < 0 || scrollLeft >= i.contentWidth - i.containerWidth && deltaX > 0) {
	            return !i.settings.wheelPropagation;
	          }
	        }
	        return true;
	      }
	
	      function getDeltaFromEvent(e) {
	        var deltaX = e.deltaX;
	        var deltaY = -1 * e.deltaY;
	
	        if (typeof deltaX === "undefined" || typeof deltaY === "undefined") {
	          // OS X Safari
	          deltaX = -1 * e.wheelDeltaX / 6;
	          deltaY = e.wheelDeltaY / 6;
	        }
	
	        if (e.deltaMode && e.deltaMode === 1) {
	          // Firefox in deltaMode 1: Line scrolling
	          deltaX *= 10;
	          deltaY *= 10;
	        }
	
	        if (deltaX !== deltaX && deltaY !== deltaY /* NaN checks */) {
	            // IE in some mouse drivers
	            deltaX = 0;
	            deltaY = e.wheelDelta;
	          }
	
	        return [deltaX, deltaY];
	      }
	
	      function shouldBeConsumedByChild(deltaX, deltaY) {
	        var child = element.querySelector('textarea:hover, select[multiple]:hover, .ps-child:hover');
	        if (child) {
	          if (child.tagName !== 'TEXTAREA' && !window.getComputedStyle(child).overflow.match(/(scroll|auto)/)) {
	            return false;
	          }
	
	          var maxScrollTop = child.scrollHeight - child.clientHeight;
	          if (maxScrollTop > 0) {
	            if (!(child.scrollTop === 0 && deltaY > 0) && !(child.scrollTop === maxScrollTop && deltaY < 0)) {
	              return true;
	            }
	          }
	          var maxScrollLeft = child.scrollLeft - child.clientWidth;
	          if (maxScrollLeft > 0) {
	            if (!(child.scrollLeft === 0 && deltaX < 0) && !(child.scrollLeft === maxScrollLeft && deltaX > 0)) {
	              return true;
	            }
	          }
	        }
	        return false;
	      }
	
	      function mousewheelHandler(e) {
	        var delta = getDeltaFromEvent(e);
	
	        var deltaX = delta[0];
	        var deltaY = delta[1];
	
	        if (shouldBeConsumedByChild(deltaX, deltaY)) {
	          return;
	        }
	
	        shouldPrevent = false;
	        if (!i.settings.useBothWheelAxes) {
	          // deltaX will only be used for horizontal scrolling and deltaY will
	          // only be used for vertical scrolling - this is the default
	          updateScroll(element, 'top', element.scrollTop - deltaY * i.settings.wheelSpeed);
	          updateScroll(element, 'left', element.scrollLeft + deltaX * i.settings.wheelSpeed);
	        } else if (i.scrollbarYActive && !i.scrollbarXActive) {
	          // only vertical scrollbar is active and useBothWheelAxes option is
	          // active, so let's scroll vertical bar using both mouse wheel axes
	          if (deltaY) {
	            updateScroll(element, 'top', element.scrollTop - deltaY * i.settings.wheelSpeed);
	          } else {
	            updateScroll(element, 'top', element.scrollTop + deltaX * i.settings.wheelSpeed);
	          }
	          shouldPrevent = true;
	        } else if (i.scrollbarXActive && !i.scrollbarYActive) {
	          // useBothWheelAxes and only horizontal bar is active, so use both
	          // wheel axes for horizontal bar
	          if (deltaX) {
	            updateScroll(element, 'left', element.scrollLeft + deltaX * i.settings.wheelSpeed);
	          } else {
	            updateScroll(element, 'left', element.scrollLeft - deltaY * i.settings.wheelSpeed);
	          }
	          shouldPrevent = true;
	        }
	
	        updateGeometry(element);
	
	        shouldPrevent = shouldPrevent || shouldPreventDefault(deltaX, deltaY);
	        if (shouldPrevent) {
	          e.stopPropagation();
	          e.preventDefault();
	        }
	      }
	
	      if (typeof window.onwheel !== "undefined") {
	        i.event.bind(element, 'wheel', mousewheelHandler);
	      } else if (typeof window.onmousewheel !== "undefined") {
	        i.event.bind(element, 'mousewheel', mousewheelHandler);
	      }
	    }
	
	    module.exports = function (element) {
	      var i = instances.get(element);
	      bindMouseWheelHandler(element, i);
	    };
	  }, { "../instances": 20, "../update-geometry": 21, "../update-scroll": 22 }], 16: [function (require, module, exports) {
	    'use strict';
	
	    var instances = require('../instances');
	    var updateGeometry = require('../update-geometry');
	
	    function bindNativeScrollHandler(element, i) {
	      i.event.bind(element, 'scroll', function () {
	        updateGeometry(element);
	      });
	    }
	
	    module.exports = function (element) {
	      var i = instances.get(element);
	      bindNativeScrollHandler(element, i);
	    };
	  }, { "../instances": 20, "../update-geometry": 21 }], 17: [function (require, module, exports) {
	    'use strict';
	
	    var _ = require('../../lib/helper');
	    var instances = require('../instances');
	    var updateGeometry = require('../update-geometry');
	    var updateScroll = require('../update-scroll');
	
	    function bindSelectionHandler(element, i) {
	      function getRangeNode() {
	        var selection = window.getSelection ? window.getSelection() : document.getSelection ? document.getSelection() : '';
	        if (selection.toString().length === 0) {
	          return null;
	        } else {
	          return selection.getRangeAt(0).commonAncestorContainer;
	        }
	      }
	
	      var scrollingLoop = null;
	      var scrollDiff = { top: 0, left: 0 };
	      function startScrolling() {
	        if (!scrollingLoop) {
	          scrollingLoop = setInterval(function () {
	            if (!instances.get(element)) {
	              clearInterval(scrollingLoop);
	              return;
	            }
	
	            updateScroll(element, 'top', element.scrollTop + scrollDiff.top);
	            updateScroll(element, 'left', element.scrollLeft + scrollDiff.left);
	            updateGeometry(element);
	          }, 50); // every .1 sec
	        }
	      }
	      function stopScrolling() {
	        if (scrollingLoop) {
	          clearInterval(scrollingLoop);
	          scrollingLoop = null;
	        }
	        _.stopScrolling(element);
	      }
	
	      var isSelected = false;
	      i.event.bind(i.ownerDocument, 'selectionchange', function () {
	        if (element.contains(getRangeNode())) {
	          isSelected = true;
	        } else {
	          isSelected = false;
	          stopScrolling();
	        }
	      });
	      i.event.bind(window, 'mouseup', function () {
	        if (isSelected) {
	          isSelected = false;
	          stopScrolling();
	        }
	      });
	
	      i.event.bind(window, 'mousemove', function (e) {
	        if (isSelected) {
	          var mousePosition = { x: e.pageX, y: e.pageY };
	          var containerGeometry = {
	            left: element.offsetLeft,
	            right: element.offsetLeft + element.offsetWidth,
	            top: element.offsetTop,
	            bottom: element.offsetTop + element.offsetHeight
	          };
	
	          if (mousePosition.x < containerGeometry.left + 3) {
	            scrollDiff.left = -5;
	            _.startScrolling(element, 'x');
	          } else if (mousePosition.x > containerGeometry.right - 3) {
	            scrollDiff.left = 5;
	            _.startScrolling(element, 'x');
	          } else {
	            scrollDiff.left = 0;
	          }
	
	          if (mousePosition.y < containerGeometry.top + 3) {
	            if (containerGeometry.top + 3 - mousePosition.y < 5) {
	              scrollDiff.top = -5;
	            } else {
	              scrollDiff.top = -20;
	            }
	            _.startScrolling(element, 'y');
	          } else if (mousePosition.y > containerGeometry.bottom - 3) {
	            if (mousePosition.y - containerGeometry.bottom + 3 < 5) {
	              scrollDiff.top = 5;
	            } else {
	              scrollDiff.top = 20;
	            }
	            _.startScrolling(element, 'y');
	          } else {
	            scrollDiff.top = 0;
	          }
	
	          if (scrollDiff.top === 0 && scrollDiff.left === 0) {
	            stopScrolling();
	          } else {
	            startScrolling();
	          }
	        }
	      });
	    }
	
	    module.exports = function (element) {
	      var i = instances.get(element);
	      bindSelectionHandler(element, i);
	    };
	  }, { "../../lib/helper": 8, "../instances": 20, "../update-geometry": 21, "../update-scroll": 22 }], 18: [function (require, module, exports) {
	    'use strict';
	
	    var _ = require('../../lib/helper');
	    var instances = require('../instances');
	    var updateGeometry = require('../update-geometry');
	    var updateScroll = require('../update-scroll');
	
	    function bindTouchHandler(element, i, supportsTouch, supportsIePointer) {
	      function shouldPreventDefault(deltaX, deltaY) {
	        var scrollTop = element.scrollTop;
	        var scrollLeft = element.scrollLeft;
	        var magnitudeX = Math.abs(deltaX);
	        var magnitudeY = Math.abs(deltaY);
	
	        if (magnitudeY > magnitudeX) {
	          // user is perhaps trying to swipe up/down the page
	
	          if (deltaY < 0 && scrollTop === i.contentHeight - i.containerHeight || deltaY > 0 && scrollTop === 0) {
	            return !i.settings.swipePropagation;
	          }
	        } else if (magnitudeX > magnitudeY) {
	          // user is perhaps trying to swipe left/right across the page
	
	          if (deltaX < 0 && scrollLeft === i.contentWidth - i.containerWidth || deltaX > 0 && scrollLeft === 0) {
	            return !i.settings.swipePropagation;
	          }
	        }
	
	        return true;
	      }
	
	      function applyTouchMove(differenceX, differenceY) {
	        updateScroll(element, 'top', element.scrollTop - differenceY);
	        updateScroll(element, 'left', element.scrollLeft - differenceX);
	
	        updateGeometry(element);
	      }
	
	      var startOffset = {};
	      var startTime = 0;
	      var speed = {};
	      var easingLoop = null;
	      var inGlobalTouch = false;
	      var inLocalTouch = false;
	
	      function globalTouchStart() {
	        inGlobalTouch = true;
	      }
	      function globalTouchEnd() {
	        inGlobalTouch = false;
	      }
	
	      function getTouch(e) {
	        if (e.targetTouches) {
	          return e.targetTouches[0];
	        } else {
	          // Maybe IE pointer
	          return e;
	        }
	      }
	      function shouldHandle(e) {
	        if (e.targetTouches && e.targetTouches.length === 1) {
	          return true;
	        }
	        if (e.pointerType && e.pointerType !== 'mouse' && e.pointerType !== e.MSPOINTER_TYPE_MOUSE) {
	          return true;
	        }
	        return false;
	      }
	      function touchStart(e) {
	        if (shouldHandle(e)) {
	          inLocalTouch = true;
	
	          var touch = getTouch(e);
	
	          startOffset.pageX = touch.pageX;
	          startOffset.pageY = touch.pageY;
	
	          startTime = new Date().getTime();
	
	          if (easingLoop !== null) {
	            clearInterval(easingLoop);
	          }
	
	          e.stopPropagation();
	        }
	      }
	      function touchMove(e) {
	        if (!inLocalTouch && i.settings.swipePropagation) {
	          touchStart(e);
	        }
	        if (!inGlobalTouch && inLocalTouch && shouldHandle(e)) {
	          var touch = getTouch(e);
	
	          var currentOffset = { pageX: touch.pageX, pageY: touch.pageY };
	
	          var differenceX = currentOffset.pageX - startOffset.pageX;
	          var differenceY = currentOffset.pageY - startOffset.pageY;
	
	          applyTouchMove(differenceX, differenceY);
	          startOffset = currentOffset;
	
	          var currentTime = new Date().getTime();
	
	          var timeGap = currentTime - startTime;
	          if (timeGap > 0) {
	            speed.x = differenceX / timeGap;
	            speed.y = differenceY / timeGap;
	            startTime = currentTime;
	          }
	
	          if (shouldPreventDefault(differenceX, differenceY)) {
	            e.stopPropagation();
	            e.preventDefault();
	          }
	        }
	      }
	      function touchEnd() {
	        if (!inGlobalTouch && inLocalTouch) {
	          inLocalTouch = false;
	
	          clearInterval(easingLoop);
	          easingLoop = setInterval(function () {
	            if (!instances.get(element)) {
	              clearInterval(easingLoop);
	              return;
	            }
	
	            if (Math.abs(speed.x) < 0.01 && Math.abs(speed.y) < 0.01) {
	              clearInterval(easingLoop);
	              return;
	            }
	
	            applyTouchMove(speed.x * 30, speed.y * 30);
	
	            speed.x *= 0.8;
	            speed.y *= 0.8;
	          }, 10);
	        }
	      }
	
	      if (supportsTouch) {
	        i.event.bind(window, 'touchstart', globalTouchStart);
	        i.event.bind(window, 'touchend', globalTouchEnd);
	        i.event.bind(element, 'touchstart', touchStart);
	        i.event.bind(element, 'touchmove', touchMove);
	        i.event.bind(element, 'touchend', touchEnd);
	      }
	
	      if (supportsIePointer) {
	        if (window.PointerEvent) {
	          i.event.bind(window, 'pointerdown', globalTouchStart);
	          i.event.bind(window, 'pointerup', globalTouchEnd);
	          i.event.bind(element, 'pointerdown', touchStart);
	          i.event.bind(element, 'pointermove', touchMove);
	          i.event.bind(element, 'pointerup', touchEnd);
	        } else if (window.MSPointerEvent) {
	          i.event.bind(window, 'MSPointerDown', globalTouchStart);
	          i.event.bind(window, 'MSPointerUp', globalTouchEnd);
	          i.event.bind(element, 'MSPointerDown', touchStart);
	          i.event.bind(element, 'MSPointerMove', touchMove);
	          i.event.bind(element, 'MSPointerUp', touchEnd);
	        }
	      }
	    }
	
	    module.exports = function (element) {
	      if (!_.env.supportsTouch && !_.env.supportsIePointer) {
	        return;
	      }
	
	      var i = instances.get(element);
	      bindTouchHandler(element, i, _.env.supportsTouch, _.env.supportsIePointer);
	    };
	  }, { "../../lib/helper": 8, "../instances": 20, "../update-geometry": 21, "../update-scroll": 22 }], 19: [function (require, module, exports) {
	    'use strict';
	
	    var _ = require('../lib/helper');
	    var cls = require('../lib/class');
	    var instances = require('./instances');
	    var updateGeometry = require('./update-geometry');
	
	    // Handlers
	    var handlers = {
	      'click-rail': require('./handler/click-rail'),
	      'drag-scrollbar': require('./handler/drag-scrollbar'),
	      'keyboard': require('./handler/keyboard'),
	      'wheel': require('./handler/mouse-wheel'),
	      'touch': require('./handler/touch'),
	      'selection': require('./handler/selection')
	    };
	    var nativeScrollHandler = require('./handler/native-scroll');
	
	    module.exports = function (element, userSettings) {
	      userSettings = (typeof userSettings === "undefined" ? "undefined" : _typeof(userSettings)) === 'object' ? userSettings : {};
	
	      cls.add(element, 'ps-container');
	
	      // Create a plugin instance.
	      var i = instances.add(element);
	
	      i.settings = _.extend(i.settings, userSettings);
	      cls.add(element, 'ps-theme-' + i.settings.theme);
	
	      i.settings.handlers.forEach(function (handlerName) {
	        handlers[handlerName](element);
	      });
	
	      nativeScrollHandler(element);
	
	      updateGeometry(element);
	    };
	  }, { "../lib/class": 4, "../lib/helper": 8, "./handler/click-rail": 12, "./handler/drag-scrollbar": 13, "./handler/keyboard": 14, "./handler/mouse-wheel": 15, "./handler/native-scroll": 16, "./handler/selection": 17, "./handler/touch": 18, "./instances": 20, "./update-geometry": 21 }], 20: [function (require, module, exports) {
	    'use strict';
	
	    var _ = require('../lib/helper');
	    var cls = require('../lib/class');
	    var defaultSettings = require('./default-setting');
	    var dom = require('../lib/dom');
	    var EventManager = require('../lib/event-manager');
	    var guid = require('../lib/guid');
	
	    var instances = {};
	
	    function Instance(element) {
	      var i = this;
	
	      i.settings = _.clone(defaultSettings);
	      i.containerWidth = null;
	      i.containerHeight = null;
	      i.contentWidth = null;
	      i.contentHeight = null;
	
	      i.isRtl = dom.css(element, 'direction') === "rtl";
	      i.isNegativeScroll = function () {
	        var originalScrollLeft = element.scrollLeft;
	        var result = null;
	        element.scrollLeft = -1;
	        result = element.scrollLeft < 0;
	        element.scrollLeft = originalScrollLeft;
	        return result;
	      }();
	      i.negativeScrollAdjustment = i.isNegativeScroll ? element.scrollWidth - element.clientWidth : 0;
	      i.event = new EventManager();
	      i.ownerDocument = element.ownerDocument || document;
	
	      function focus() {
	        cls.add(element, 'ps-focus');
	      }
	
	      function blur() {
	        cls.remove(element, 'ps-focus');
	      }
	
	      i.scrollbarXRail = dom.appendTo(dom.e('div', 'ps-scrollbar-x-rail'), element);
	      i.scrollbarX = dom.appendTo(dom.e('div', 'ps-scrollbar-x'), i.scrollbarXRail);
	      i.scrollbarX.setAttribute('tabindex', 0);
	      i.event.bind(i.scrollbarX, 'focus', focus);
	      i.event.bind(i.scrollbarX, 'blur', blur);
	      i.scrollbarXActive = null;
	      i.scrollbarXWidth = null;
	      i.scrollbarXLeft = null;
	      i.scrollbarXBottom = _.toInt(dom.css(i.scrollbarXRail, 'bottom'));
	      i.isScrollbarXUsingBottom = i.scrollbarXBottom === i.scrollbarXBottom; // !isNaN
	      i.scrollbarXTop = i.isScrollbarXUsingBottom ? null : _.toInt(dom.css(i.scrollbarXRail, 'top'));
	      i.railBorderXWidth = _.toInt(dom.css(i.scrollbarXRail, 'borderLeftWidth')) + _.toInt(dom.css(i.scrollbarXRail, 'borderRightWidth'));
	      // Set rail to display:block to calculate margins
	      dom.css(i.scrollbarXRail, 'display', 'block');
	      i.railXMarginWidth = _.toInt(dom.css(i.scrollbarXRail, 'marginLeft')) + _.toInt(dom.css(i.scrollbarXRail, 'marginRight'));
	      dom.css(i.scrollbarXRail, 'display', '');
	      i.railXWidth = null;
	      i.railXRatio = null;
	
	      i.scrollbarYRail = dom.appendTo(dom.e('div', 'ps-scrollbar-y-rail'), element);
	      i.scrollbarY = dom.appendTo(dom.e('div', 'ps-scrollbar-y'), i.scrollbarYRail);
	      i.scrollbarY.setAttribute('tabindex', 0);
	      i.event.bind(i.scrollbarY, 'focus', focus);
	      i.event.bind(i.scrollbarY, 'blur', blur);
	      i.scrollbarYActive = null;
	      i.scrollbarYHeight = null;
	      i.scrollbarYTop = null;
	      i.scrollbarYRight = _.toInt(dom.css(i.scrollbarYRail, 'right'));
	      i.isScrollbarYUsingRight = i.scrollbarYRight === i.scrollbarYRight; // !isNaN
	      i.scrollbarYLeft = i.isScrollbarYUsingRight ? null : _.toInt(dom.css(i.scrollbarYRail, 'left'));
	      i.scrollbarYOuterWidth = i.isRtl ? _.outerWidth(i.scrollbarY) : null;
	      i.railBorderYWidth = _.toInt(dom.css(i.scrollbarYRail, 'borderTopWidth')) + _.toInt(dom.css(i.scrollbarYRail, 'borderBottomWidth'));
	      dom.css(i.scrollbarYRail, 'display', 'block');
	      i.railYMarginHeight = _.toInt(dom.css(i.scrollbarYRail, 'marginTop')) + _.toInt(dom.css(i.scrollbarYRail, 'marginBottom'));
	      dom.css(i.scrollbarYRail, 'display', '');
	      i.railYHeight = null;
	      i.railYRatio = null;
	    }
	
	    function getId(element) {
	      return element.getAttribute('data-ps-id');
	    }
	
	    function setId(element, id) {
	      element.setAttribute('data-ps-id', id);
	    }
	
	    function removeId(element) {
	      element.removeAttribute('data-ps-id');
	    }
	
	    exports.add = function (element) {
	      var newId = guid();
	      setId(element, newId);
	      instances[newId] = new Instance(element);
	      return instances[newId];
	    };
	
	    exports.remove = function (element) {
	      delete instances[getId(element)];
	      removeId(element);
	    };
	
	    exports.get = function (element) {
	      return instances[getId(element)];
	    };
	  }, { "../lib/class": 4, "../lib/dom": 5, "../lib/event-manager": 6, "../lib/guid": 7, "../lib/helper": 8, "./default-setting": 10 }], 21: [function (require, module, exports) {
	    'use strict';
	
	    var _ = require('../lib/helper');
	    var cls = require('../lib/class');
	    var dom = require('../lib/dom');
	    var instances = require('./instances');
	    var updateScroll = require('./update-scroll');
	
	    function getThumbSize(i, thumbSize) {
	      if (i.settings.minScrollbarLength) {
	        thumbSize = Math.max(thumbSize, i.settings.minScrollbarLength);
	      }
	      if (i.settings.maxScrollbarLength) {
	        thumbSize = Math.min(thumbSize, i.settings.maxScrollbarLength);
	      }
	      return thumbSize;
	    }
	
	    function updateCss(element, i) {
	      var xRailOffset = { width: i.railXWidth };
	      if (i.isRtl) {
	        xRailOffset.left = i.negativeScrollAdjustment + element.scrollLeft + i.containerWidth - i.contentWidth;
	      } else {
	        xRailOffset.left = element.scrollLeft;
	      }
	      if (i.isScrollbarXUsingBottom) {
	        xRailOffset.bottom = i.scrollbarXBottom - element.scrollTop;
	      } else {
	        xRailOffset.top = i.scrollbarXTop + element.scrollTop;
	      }
	      dom.css(i.scrollbarXRail, xRailOffset);
	
	      var yRailOffset = { top: element.scrollTop, height: i.railYHeight };
	      if (i.isScrollbarYUsingRight) {
	        if (i.isRtl) {
	          yRailOffset.right = i.contentWidth - (i.negativeScrollAdjustment + element.scrollLeft) - i.scrollbarYRight - i.scrollbarYOuterWidth;
	        } else {
	          yRailOffset.right = i.scrollbarYRight - element.scrollLeft;
	        }
	      } else {
	        if (i.isRtl) {
	          yRailOffset.left = i.negativeScrollAdjustment + element.scrollLeft + i.containerWidth * 2 - i.contentWidth - i.scrollbarYLeft - i.scrollbarYOuterWidth;
	        } else {
	          yRailOffset.left = i.scrollbarYLeft + element.scrollLeft;
	        }
	      }
	      dom.css(i.scrollbarYRail, yRailOffset);
	
	      dom.css(i.scrollbarX, { left: i.scrollbarXLeft, width: i.scrollbarXWidth - i.railBorderXWidth });
	      dom.css(i.scrollbarY, { top: i.scrollbarYTop, height: i.scrollbarYHeight - i.railBorderYWidth });
	    }
	
	    module.exports = function (element) {
	      var i = instances.get(element);
	
	      i.containerWidth = element.clientWidth;
	      i.containerHeight = element.clientHeight;
	      i.contentWidth = element.scrollWidth;
	      i.contentHeight = element.scrollHeight;
	
	      var existingRails;
	      if (!element.contains(i.scrollbarXRail)) {
	        existingRails = dom.queryChildren(element, '.ps-scrollbar-x-rail');
	        if (existingRails.length > 0) {
	          existingRails.forEach(function (rail) {
	            dom.remove(rail);
	          });
	        }
	        dom.appendTo(i.scrollbarXRail, element);
	      }
	      if (!element.contains(i.scrollbarYRail)) {
	        existingRails = dom.queryChildren(element, '.ps-scrollbar-y-rail');
	        if (existingRails.length > 0) {
	          existingRails.forEach(function (rail) {
	            dom.remove(rail);
	          });
	        }
	        dom.appendTo(i.scrollbarYRail, element);
	      }
	
	      if (!i.settings.suppressScrollX && i.containerWidth + i.settings.scrollXMarginOffset < i.contentWidth) {
	        i.scrollbarXActive = true;
	        i.railXWidth = i.containerWidth - i.railXMarginWidth;
	        i.railXRatio = i.containerWidth / i.railXWidth;
	        i.scrollbarXWidth = getThumbSize(i, _.toInt(i.railXWidth * i.containerWidth / i.contentWidth));
	        i.scrollbarXLeft = _.toInt((i.negativeScrollAdjustment + element.scrollLeft) * (i.railXWidth - i.scrollbarXWidth) / (i.contentWidth - i.containerWidth));
	      } else {
	        i.scrollbarXActive = false;
	      }
	
	      if (!i.settings.suppressScrollY && i.containerHeight + i.settings.scrollYMarginOffset < i.contentHeight) {
	        i.scrollbarYActive = true;
	        i.railYHeight = i.containerHeight - i.railYMarginHeight;
	        i.railYRatio = i.containerHeight / i.railYHeight;
	        i.scrollbarYHeight = getThumbSize(i, _.toInt(i.railYHeight * i.containerHeight / i.contentHeight));
	        i.scrollbarYTop = _.toInt(element.scrollTop * (i.railYHeight - i.scrollbarYHeight) / (i.contentHeight - i.containerHeight));
	      } else {
	        i.scrollbarYActive = false;
	      }
	
	      if (i.scrollbarXLeft >= i.railXWidth - i.scrollbarXWidth) {
	        i.scrollbarXLeft = i.railXWidth - i.scrollbarXWidth;
	      }
	      if (i.scrollbarYTop >= i.railYHeight - i.scrollbarYHeight) {
	        i.scrollbarYTop = i.railYHeight - i.scrollbarYHeight;
	      }
	
	      updateCss(element, i);
	
	      if (i.scrollbarXActive) {
	        cls.add(element, 'ps-active-x');
	      } else {
	        cls.remove(element, 'ps-active-x');
	        i.scrollbarXWidth = 0;
	        i.scrollbarXLeft = 0;
	        updateScroll(element, 'left', 0);
	      }
	      if (i.scrollbarYActive) {
	        cls.add(element, 'ps-active-y');
	      } else {
	        cls.remove(element, 'ps-active-y');
	        i.scrollbarYHeight = 0;
	        i.scrollbarYTop = 0;
	        updateScroll(element, 'top', 0);
	      }
	    };
	  }, { "../lib/class": 4, "../lib/dom": 5, "../lib/helper": 8, "./instances": 20, "./update-scroll": 22 }], 22: [function (require, module, exports) {
	    'use strict';
	
	    var instances = require('./instances');
	
	    var upEvent = document.createEvent('Event');
	    var downEvent = document.createEvent('Event');
	    var leftEvent = document.createEvent('Event');
	    var rightEvent = document.createEvent('Event');
	    var yEvent = document.createEvent('Event');
	    var xEvent = document.createEvent('Event');
	    var xStartEvent = document.createEvent('Event');
	    var xEndEvent = document.createEvent('Event');
	    var yStartEvent = document.createEvent('Event');
	    var yEndEvent = document.createEvent('Event');
	    var lastTop;
	    var lastLeft;
	
	    upEvent.initEvent('ps-scroll-up', true, true);
	    downEvent.initEvent('ps-scroll-down', true, true);
	    leftEvent.initEvent('ps-scroll-left', true, true);
	    rightEvent.initEvent('ps-scroll-right', true, true);
	    yEvent.initEvent('ps-scroll-y', true, true);
	    xEvent.initEvent('ps-scroll-x', true, true);
	    xStartEvent.initEvent('ps-x-reach-start', true, true);
	    xEndEvent.initEvent('ps-x-reach-end', true, true);
	    yStartEvent.initEvent('ps-y-reach-start', true, true);
	    yEndEvent.initEvent('ps-y-reach-end', true, true);
	
	    module.exports = function (element, axis, value) {
	      if (typeof element === 'undefined') {
	        throw 'You must provide an element to the update-scroll function';
	      }
	
	      if (typeof axis === 'undefined') {
	        throw 'You must provide an axis to the update-scroll function';
	      }
	
	      if (typeof value === 'undefined') {
	        throw 'You must provide a value to the update-scroll function';
	      }
	
	      if (axis === 'top' && value <= 0) {
	        element.scrollTop = value = 0; // don't allow negative scroll
	        element.dispatchEvent(yStartEvent);
	      }
	
	      if (axis === 'left' && value <= 0) {
	        element.scrollLeft = value = 0; // don't allow negative scroll
	        element.dispatchEvent(xStartEvent);
	      }
	
	      var i = instances.get(element);
	
	      if (axis === 'top' && value >= i.contentHeight - i.containerHeight) {
	        // don't allow scroll past container
	        value = i.contentHeight - i.containerHeight;
	        if (value - element.scrollTop <= 1) {
	          // mitigates rounding errors on non-subpixel scroll values
	          value = element.scrollTop;
	        } else {
	          element.scrollTop = value;
	        }
	        element.dispatchEvent(yEndEvent);
	      }
	
	      if (axis === 'left' && value >= i.contentWidth - i.containerWidth) {
	        // don't allow scroll past container
	        value = i.contentWidth - i.containerWidth;
	        if (value - element.scrollLeft <= 1) {
	          // mitigates rounding errors on non-subpixel scroll values
	          value = element.scrollLeft;
	        } else {
	          element.scrollLeft = value;
	        }
	        element.dispatchEvent(xEndEvent);
	      }
	
	      if (!lastTop) {
	        lastTop = element.scrollTop;
	      }
	
	      if (!lastLeft) {
	        lastLeft = element.scrollLeft;
	      }
	
	      if (axis === 'top' && value < lastTop) {
	        element.dispatchEvent(upEvent);
	      }
	
	      if (axis === 'top' && value > lastTop) {
	        element.dispatchEvent(downEvent);
	      }
	
	      if (axis === 'left' && value < lastLeft) {
	        element.dispatchEvent(leftEvent);
	      }
	
	      if (axis === 'left' && value > lastLeft) {
	        element.dispatchEvent(rightEvent);
	      }
	
	      if (axis === 'top') {
	        element.scrollTop = lastTop = value;
	        element.dispatchEvent(yEvent);
	      }
	
	      if (axis === 'left') {
	        element.scrollLeft = lastLeft = value;
	        element.dispatchEvent(xEvent);
	      }
	    };
	  }, { "./instances": 20 }], 23: [function (require, module, exports) {
	    'use strict';
	
	    var _ = require('../lib/helper');
	    var dom = require('../lib/dom');
	    var instances = require('./instances');
	    var updateGeometry = require('./update-geometry');
	    var updateScroll = require('./update-scroll');
	
	    module.exports = function (element) {
	      var i = instances.get(element);
	
	      if (!i) {
	        return;
	      }
	
	      // Recalcuate negative scrollLeft adjustment
	      i.negativeScrollAdjustment = i.isNegativeScroll ? element.scrollWidth - element.clientWidth : 0;
	
	      // Recalculate rail margins
	      dom.css(i.scrollbarXRail, 'display', 'block');
	      dom.css(i.scrollbarYRail, 'display', 'block');
	      i.railXMarginWidth = _.toInt(dom.css(i.scrollbarXRail, 'marginLeft')) + _.toInt(dom.css(i.scrollbarXRail, 'marginRight'));
	      i.railYMarginHeight = _.toInt(dom.css(i.scrollbarYRail, 'marginTop')) + _.toInt(dom.css(i.scrollbarYRail, 'marginBottom'));
	
	      // Hide scrollbars not to affect scrollWidth and scrollHeight
	      dom.css(i.scrollbarXRail, 'display', 'none');
	      dom.css(i.scrollbarYRail, 'display', 'none');
	
	      updateGeometry(element);
	
	      // Update top/left scroll to trigger events
	      updateScroll(element, 'top', element.scrollTop);
	      updateScroll(element, 'left', element.scrollLeft);
	
	      dom.css(i.scrollbarXRail, 'display', '');
	      dom.css(i.scrollbarYRail, 'display', '');
	    };
	  }, { "../lib/dom": 5, "../lib/helper": 8, "./instances": 20, "./update-geometry": 21, "./update-scroll": 22 }] }, {}, [1]);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(4)))

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["Clipboard"] = __webpack_require__(14);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;var require;"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/*!
	 * clipboard.js v1.5.5
	 * https://zenorocha.github.io/clipboard.js
	 *
	 * Licensed MIT © Zeno Rocha
	 */
	!function (t) {
	  if ("object" == ( false ? "undefined" : _typeof(exports)) && "undefined" != typeof module) module.exports = t();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (t), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {
	    var e;e = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this, e.Clipboard = t();
	  }
	}(function () {
	  var t, e, n;return function t(e, n, r) {
	    function o(a, c) {
	      if (!n[a]) {
	        if (!e[a]) {
	          var s = "function" == typeof require && require;if (!c && s) return require(a, !0);if (i) return i(a, !0);var u = new Error("Cannot find module '" + a + "'");throw u.code = "MODULE_NOT_FOUND", u;
	        }var l = n[a] = { exports: {} };e[a][0].call(l.exports, function (t) {
	          var n = e[a][1][t];return o(n ? n : t);
	        }, l, l.exports, t, e, n, r);
	      }return n[a].exports;
	    }for (var i = "function" == typeof require && require, a = 0; a < r.length; a++) {
	      o(r[a]);
	    }return o;
	  }({ 1: [function (t, e, n) {
	      var r = t("matches-selector");e.exports = function (t, e, n) {
	        for (var o = n ? t : t.parentNode; o && o !== document;) {
	          if (r(o, e)) return o;o = o.parentNode;
	        }
	      };
	    }, { "matches-selector": 2 }], 2: [function (t, e, n) {
	      function r(t, e) {
	        if (i) return i.call(t, e);for (var n = t.parentNode.querySelectorAll(e), r = 0; r < n.length; ++r) {
	          if (n[r] == t) return !0;
	        }return !1;
	      }var o = Element.prototype,
	          i = o.matchesSelector || o.webkitMatchesSelector || o.mozMatchesSelector || o.msMatchesSelector || o.oMatchesSelector;e.exports = r;
	    }, {}], 3: [function (t, e, n) {
	      function r(t, e, n, r) {
	        var i = o.apply(this, arguments);return t.addEventListener(n, i), { destroy: function destroy() {
	            t.removeEventListener(n, i);
	          } };
	      }function o(t, e, n, r) {
	        return function (n) {
	          n.delegateTarget = i(n.target, e, !0), n.delegateTarget && r.call(t, n);
	        };
	      }var i = t("closest");e.exports = r;
	    }, { closest: 1 }], 4: [function (t, e, n) {
	      n.node = function (t) {
	        return void 0 !== t && t instanceof HTMLElement && 1 === t.nodeType;
	      }, n.nodeList = function (t) {
	        var e = Object.prototype.toString.call(t);return void 0 !== t && ("[object NodeList]" === e || "[object HTMLCollection]" === e) && "length" in t && (0 === t.length || n.node(t[0]));
	      }, n.string = function (t) {
	        return "string" == typeof t || t instanceof String;
	      }, n.function = function (t) {
	        var e = Object.prototype.toString.call(t);return "[object Function]" === e;
	      };
	    }, {}], 5: [function (t, e, n) {
	      function r(t, e, n) {
	        if (!t && !e && !n) throw new Error("Missing required arguments");if (!c.string(e)) throw new TypeError("Second argument must be a String");if (!c.function(n)) throw new TypeError("Third argument must be a Function");if (c.node(t)) return o(t, e, n);if (c.nodeList(t)) return i(t, e, n);if (c.string(t)) return a(t, e, n);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList");
	      }function o(t, e, n) {
	        return t.addEventListener(e, n), { destroy: function destroy() {
	            t.removeEventListener(e, n);
	          } };
	      }function i(t, e, n) {
	        return Array.prototype.forEach.call(t, function (t) {
	          t.addEventListener(e, n);
	        }), { destroy: function destroy() {
	            Array.prototype.forEach.call(t, function (t) {
	              t.removeEventListener(e, n);
	            });
	          } };
	      }function a(t, e, n) {
	        return s(document.body, t, e, n);
	      }var c = t("./is"),
	          s = t("delegate");e.exports = r;
	    }, { "./is": 4, delegate: 3 }], 6: [function (t, e, n) {
	      function r(t) {
	        var e;if ("INPUT" === t.nodeName || "TEXTAREA" === t.nodeName) t.focus(), t.setSelectionRange(0, t.value.length), e = t.value;else {
	          t.hasAttribute("contenteditable") && t.focus();var n = window.getSelection(),
	              r = document.createRange();r.selectNodeContents(t), n.removeAllRanges(), n.addRange(r), e = n.toString();
	        }return e;
	      }e.exports = r;
	    }, {}], 7: [function (t, e, n) {
	      function r() {}r.prototype = { on: function on(t, e, n) {
	          var r = this.e || (this.e = {});return (r[t] || (r[t] = [])).push({ fn: e, ctx: n }), this;
	        }, once: function once(t, e, n) {
	          function r() {
	            o.off(t, r), e.apply(n, arguments);
	          }var o = this;return r._ = e, this.on(t, r, n);
	        }, emit: function emit(t) {
	          var e = [].slice.call(arguments, 1),
	              n = ((this.e || (this.e = {}))[t] || []).slice(),
	              r = 0,
	              o = n.length;for (r; o > r; r++) {
	            n[r].fn.apply(n[r].ctx, e);
	          }return this;
	        }, off: function off(t, e) {
	          var n = this.e || (this.e = {}),
	              r = n[t],
	              o = [];if (r && e) for (var i = 0, a = r.length; a > i; i++) {
	            r[i].fn !== e && r[i].fn._ !== e && o.push(r[i]);
	          }return o.length ? n[t] = o : delete n[t], this;
	        } }, e.exports = r;
	    }, {}], 8: [function (t, e, n) {
	      "use strict";
	      function r(t) {
	        return t && t.__esModule ? t : { "default": t };
	      }function o(t, e) {
	        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
	      }n.__esModule = !0;var i = function () {
	        function t(t, e) {
	          for (var n = 0; n < e.length; n++) {
	            var r = e[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);
	          }
	        }return function (e, n, r) {
	          return n && t(e.prototype, n), r && t(e, r), e;
	        };
	      }(),
	          a = t("select"),
	          c = r(a),
	          s = function () {
	        function t(e) {
	          o(this, t), this.resolveOptions(e), this.initSelection();
	        }return t.prototype.resolveOptions = function t() {
	          var e = arguments.length <= 0 || void 0 === arguments[0] ? {} : arguments[0];this.action = e.action, this.emitter = e.emitter, this.target = e.target, this.text = e.text, this.trigger = e.trigger, this.selectedText = "";
	        }, t.prototype.initSelection = function t() {
	          if (this.text && this.target) throw new Error('Multiple attributes declared, use either "target" or "text"');if (this.text) this.selectFake();else {
	            if (!this.target) throw new Error('Missing required attributes, use either "target" or "text"');this.selectTarget();
	          }
	        }, t.prototype.selectFake = function t() {
	          var e = this;this.removeFake(), this.fakeHandler = document.body.addEventListener("click", function () {
	            return e.removeFake();
	          }), this.fakeElem = document.createElement("textarea"), this.fakeElem.style.position = "absolute", this.fakeElem.style.left = "-9999px", this.fakeElem.style.top = (window.pageYOffset || document.documentElement.scrollTop) + "px", this.fakeElem.setAttribute("readonly", ""), this.fakeElem.value = this.text, document.body.appendChild(this.fakeElem), this.selectedText = c.default(this.fakeElem), this.copyText();
	        }, t.prototype.removeFake = function t() {
	          this.fakeHandler && (document.body.removeEventListener("click"), this.fakeHandler = null), this.fakeElem && (document.body.removeChild(this.fakeElem), this.fakeElem = null);
	        }, t.prototype.selectTarget = function t() {
	          this.selectedText = c.default(this.target), this.copyText();
	        }, t.prototype.copyText = function t() {
	          var e = void 0;try {
	            e = document.execCommand(this.action);
	          } catch (n) {
	            e = !1;
	          }this.handleResult(e);
	        }, t.prototype.handleResult = function t(e) {
	          e ? this.emitter.emit("success", { action: this.action, text: this.selectedText, trigger: this.trigger, clearSelection: this.clearSelection.bind(this) }) : this.emitter.emit("error", { action: this.action, trigger: this.trigger, clearSelection: this.clearSelection.bind(this) });
	        }, t.prototype.clearSelection = function t() {
	          this.target && this.target.blur(), window.getSelection().removeAllRanges();
	        }, t.prototype.destroy = function t() {
	          this.removeFake();
	        }, i(t, [{ key: "action", set: function t() {
	            var e = arguments.length <= 0 || void 0 === arguments[0] ? "copy" : arguments[0];if (this._action = e, "copy" !== this._action && "cut" !== this._action) throw new Error('Invalid "action" value, use either "copy" or "cut"');
	          }, get: function t() {
	            return this._action;
	          } }, { key: "target", set: function t(e) {
	            if (void 0 !== e) {
	              if (!e || "object" != (typeof e === "undefined" ? "undefined" : _typeof(e)) || 1 !== e.nodeType) throw new Error('Invalid "target" value, use a valid Element');this._target = e;
	            }
	          }, get: function t() {
	            return this._target;
	          } }]), t;
	      }();n.default = s, e.exports = n.default;
	    }, { select: 6 }], 9: [function (t, e, n) {
	      "use strict";
	      function r(t) {
	        return t && t.__esModule ? t : { "default": t };
	      }function o(t, e) {
	        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
	      }function i(t, e) {
	        if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + (typeof e === "undefined" ? "undefined" : _typeof(e)));t.prototype = Object.create(e && e.prototype, { constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 } }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
	      }function a(t, e) {
	        var n = "data-clipboard-" + t;if (e.hasAttribute(n)) return e.getAttribute(n);
	      }n.__esModule = !0;var c = t("./clipboard-action"),
	          s = r(c),
	          u = t("tiny-emitter"),
	          l = r(u),
	          f = t("good-listener"),
	          d = r(f),
	          h = function (t) {
	        function e(n, r) {
	          o(this, e), t.call(this), this.resolveOptions(r), this.listenClick(n);
	        }return i(e, t), e.prototype.resolveOptions = function t() {
	          var e = arguments.length <= 0 || void 0 === arguments[0] ? {} : arguments[0];this.action = "function" == typeof e.action ? e.action : this.defaultAction, this.target = "function" == typeof e.target ? e.target : this.defaultTarget, this.text = "function" == typeof e.text ? e.text : this.defaultText;
	        }, e.prototype.listenClick = function t(e) {
	          var n = this;this.listener = d.default(e, "click", function (t) {
	            return n.onClick(t);
	          });
	        }, e.prototype.onClick = function t(e) {
	          var n = e.delegateTarget || e.currentTarget;this.clipboardAction && (this.clipboardAction = null), this.clipboardAction = new s.default({ action: this.action(n), target: this.target(n), text: this.text(n), trigger: n, emitter: this });
	        }, e.prototype.defaultAction = function t(e) {
	          return a("action", e);
	        }, e.prototype.defaultTarget = function t(e) {
	          var n = a("target", e);return n ? document.querySelector(n) : void 0;
	        }, e.prototype.defaultText = function t(e) {
	          return a("text", e);
	        }, e.prototype.destroy = function t() {
	          this.listener.destroy(), this.clipboardAction && (this.clipboardAction.destroy(), this.clipboardAction = null);
	        }, e;
	      }(l.default);n.default = h, e.exports = n.default;
	    }, { "./clipboard-action": 8, "good-listener": 5, "tiny-emitter": 7 }] }, {}, [9])(9);
	});

/***/ },
/* 15 */
/***/ function(module, exports) {

	"use strict";
	
	/*!
	* Clamp.js 0.5.1
	*
	* Copyright 2011-2013, Joseph Schmitt http://joe.sh
	* Released under the WTFPL license
	* http://sam.zoy.org/wtfpl/
	*/
	(function () {
	  window.$clamp = function (c, d) {
	    function s(a, b) {
	      n.getComputedStyle || (n.getComputedStyle = function (a, b) {
	        this.el = a;this.getPropertyValue = function (b) {
	          var c = /(\-([a-z]){1})/g;"float" == b && (b = "styleFloat");c.test(b) && (b = b.replace(c, function (a, b, c) {
	            return c.toUpperCase();
	          }));return a.currentStyle && a.currentStyle[b] ? a.currentStyle[b] : null;
	        };return this;
	      });return n.getComputedStyle(a, null).getPropertyValue(b);
	    }function t(a) {
	      a = a || c.clientHeight;var b = u(c);return Math.max(Math.floor(a / b), 0);
	    }function x(a) {
	      return u(c) * a;
	    }function u(a) {
	      var b = s(a, "line-height");"normal" == b && (b = 1.2 * parseInt(s(a, "font-size")));return parseInt(b);
	    }function l(a) {
	      if (a.lastChild.children && 0 < a.lastChild.children.length) return l(Array.prototype.slice.call(a.children).pop());if (a.lastChild && a.lastChild.nodeValue && "" != a.lastChild.nodeValue && a.lastChild.nodeValue != b.truncationChar) return a.lastChild;a.lastChild.parentNode.removeChild(a.lastChild);return l(c);
	    }function p(a, d) {
	      if (d) {
	        var e = a.nodeValue.replace(b.truncationChar, "");f || (h = 0 < k.length ? k.shift() : "", f = e.split(h));1 < f.length ? (q = f.pop(), r(a, f.join(h))) : f = null;m && (a.nodeValue = a.nodeValue.replace(b.truncationChar, ""), c.innerHTML = a.nodeValue + " " + m.innerHTML + b.truncationChar);if (f) {
	          if (c.clientHeight <= d) if (0 <= k.length && "" != h) r(a, f.join(h) + h + q), f = null;else return c.innerHTML;
	        } else "" == h && (r(a, ""), a = l(c), k = b.splitOnChars.slice(0), h = k[0], q = f = null);if (b.animate) setTimeout(function () {
	          p(a, d);
	        }, !0 === b.animate ? 10 : b.animate);else return p(a, d);
	      }
	    }function r(a, c) {
	      a.nodeValue = c + b.truncationChar;
	    }d = d || {};
	    var n = window,
	        b = { clamp: d.clamp || 2, useNativeClamp: "undefined" != typeof d.useNativeClamp ? d.useNativeClamp : !0, splitOnChars: d.splitOnChars || [".", "-", "\u2013", "\u2014", " "], animate: d.animate || !1, truncationChar: d.truncationChar || "\u2026", truncationHTML: d.truncationHTML },
	        e = c.style,
	        y = c.innerHTML,
	        z = "undefined" != typeof c.style.webkitLineClamp,
	        g = b.clamp,
	        v = g.indexOf && (-1 < g.indexOf("px") || -1 < g.indexOf("em")),
	        m;b.truncationHTML && (m = document.createElement("span"), m.innerHTML = b.truncationHTML);var k = b.splitOnChars.slice(0),
	        h = k[0],
	        f,
	        q;"auto" == g ? g = t() : v && (g = t(parseInt(g)));var w;z && b.useNativeClamp ? (e.overflow = "hidden", e.textOverflow = "ellipsis", e.webkitBoxOrient = "vertical", e.display = "-webkit-box", e.webkitLineClamp = g, v && (e.height = b.clamp + "px")) : (e = x(g), e <= c.clientHeight && (w = p(l(c), e)));return { original: y, clamped: w };
	  };
	})();

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(17);
	__webpack_require__(18);
	__webpack_require__(19);

/***/ },
/* 17 */
/***/ function(module, exports) {

	"use strict";
	
	ko.bindingHandlers.blockEllipsis = {
		init: function init(element, valueAccessor, allBindings, viewModel, bindingContext) {
			$clamp(element, valueAccessor());
		}
	};

/***/ },
/* 18 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = ko.bindingHandlers.foreachprop = {
	
		transformObject: function transformObject(params) {
			var properties = [];
			var obj,
			    sortFn = params.sortFn;
	
			obj = sortFn ? params.data : params;
			obj = ko.utils.unwrapObservable(obj);
	
			ko.utils.objectForEach(obj, function (key, value) {
				properties.push({
					key: key,
					value: value
				});
			});
	
			if (sortFn) {
				properties.sort(sortFn);
			}
	
			return properties;
		},
		init: function init(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
			var properties = ko.pureComputed(function () {
				var obj = ko.utils.unwrapObservable(valueAccessor());
				return ko.bindingHandlers.foreachprop.transformObject(obj);
			});
			ko.applyBindingsToNode(element, {
				foreach: properties
			}, bindingContext);
			return {
				controlsDescendantBindings: true
			};
		}
	};

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';
	
	var common = {
		container: 'body',
		trigger: 'hover',
		placement: 'bottom'
	};
	
	ko.bindingHandlers.popover = {
		update: function update(element, valueAccessor) {
			var $element = $(element);
			var params = valueAccessor();
			var config = $.extend({}, common, params, { data: null });
	
			if (params.type === 'popover' && params.data) {
				var data = ko.unwrap(params.data);
				config.title = 'Error ' + data[0] + ': ' + data[1];
				config.content = data[2];
				$element.popover(config);
				if (config.trigger === 'click') {
					var timer;
					$element.on('shown.bs.popover', function () {
						timer = setTimeout(function () {
							$element.trigger('click');
						}, 2000);
					});
					$element.on('hide.bs.popover', function () {
						clearInterval(timer);
					});
				}
			} else {
				config.delay = {
					"show": 1500,
					"hide": 100
				};
				config.title = params.title || config.title;
				$element.tooltip(config);
			}
		}
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = function () {
		__webpack_require__(21);
		__webpack_require__(22);
		__webpack_require__(23);
		__webpack_require__(24);
		__webpack_require__(25);
	
		__webpack_require__(26);
	
		__webpack_require__(27);
	
		__webpack_require__(28);
		__webpack_require__(29);
		__webpack_require__(30);
		__webpack_require__(31);
		__webpack_require__(33);
		__webpack_require__(34);
	}();

/***/ },
/* 21 */
/***/ function(module, exports) {

	'use strict';
	
	var self;
	
	function AboutMethod(params) {
		self = this;
		var method = ko.unwrap(params.selectedMethodData);
		this.documentationLink = ko.observable(method.link);
		this.name = ko.observable(method.name);
		this.description = ko.observable(method.description);
	
		// on model change
		params.selectedMethodData.subscribe(function (val) {
			this.documentationLink(val.link);
			this.name(val.name);
			this.description(val.description);
		}, this);
	
		// methods
		this.togglePopUp = ko.observable(false);
	}
	
	AboutMethod.prototype.onAboutClick = function (model) {
		return model.togglePopUp(!model.togglePopUp());
	};
	
	module.exports = ko.components.register('about-method', {
		viewModel: AboutMethod,
		template: '\n\t\t<section data-bind="css: {active: togglePopUp}" class="api-exp-about">\n\t\t\t<div class="api-exp-about-wrapper">\n\t\t\t\t<button data-bind="click: onAboutClick" class="api-exp-about__button devices-button"></button>\n\t\t\t\t<a data-bind="attr: {href: documentationLink}" href="#" class="api-exp-about__button" target="_blank"></a>\n\t\t\t\t<article class="api-exp-about__content">\n\t\t\t\t\t<h5 data-bind="text: name" class="api-exp-about__title">About API and Method:</h5>\n\t\t\t\t\t<section class="api-exp-about__description">\n\t\t\t\t\t\t<p data-bind="text: description"></p>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t<a data-bind="attr: {href: documentationLink}" target="_blank" href="#" class="api-exp-about__description-link">Read mode</a>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</section>\n\t\t\t\t</article>\n\t\t\t\t<div data-bind="click: onAboutClick" class="api-exp-about-layer"></div>\n\t\t\t</div>\n\t\t</section>\n' });

/***/ },
/* 22 */
/***/ function(module, exports) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var self;
	
	var CategoryMenu = function () {
		function CategoryMenu(params) {
			_classCallCheck(this, CategoryMenu);
	
			self = this;
	
			this.selectedCategory = params.selectedCategory;
			var initCategory = ko.unwrap(params.selectedCategory);
			this.categories = ko.observableArray(Object.keys(params.data).map(function (item, index) {
				var checked = initCategory ? item === initCategory : !index;
				// initial load
				checked && self.selectedCategory(item);
				return {
					checked: ko.observable(checked),
					name: item,
					link: false
				};
			}));
	
			params.selectedCategory.subscribe(function (categoryName) {
				checkActive(self.categories, categoryName);
			});
		}
	
		_createClass(CategoryMenu, [{
			key: 'selectCategory',
			value: function selectCategory(category) {
				var categoryName = category.name;
				self.selectedCategory(categoryName);
				checkActive(self.categories, categoryName);
			}
		}]);
	
		return CategoryMenu;
	}();
	
	module.exports = ko.components.register('category-menu', {
		viewModel: CategoryMenu,
		template: '\n\t\t<aside class="api-exp-side-menu">\n\t\t\t<ul data-bind="foreach: categories" class="api-exp-side-menu__container nav nav-pills nav-stacked visible-lg-block">\n\t\t\t\t<li data-bind="css: {active: checked}" role="presentation" class="api-exp-side-menu__item">\n\t\t\t\t\t<a data-bind="click: $parent.selectCategory, text: name" href="#" class="api-exp-side-menu__link"></a>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t\t<!--select-->\n\t\t\t<div class="api-exp-side-menu__select hidden-lg">\n\t\t\t\t<!-- ko template: { nodes: $componentTemplateNodes, data: $component } --><!-- /ko -->\n\t\t\t</div>\n\t\t</aside>\n' });
	
	function checkActive(koArr, activeElem) {
		if (!koArr && !activeElem) {
			return false;
		}
	
		koArr(koArr().map(function (obj) {
			if (obj.name === activeElem) {
				obj.checked(true);
			} else {
				obj.checked(false);
			}
			return obj;
		}));
	}

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var self;
	
	var MethodsFilter = function () {
		function MethodsFilter(_ref) {
			var selectedCategory = _ref.selectedCategory,
			    data = _ref.data,
			    selectedMethodType = _ref.selectedMethodType,
			    selectedMethod = _ref.selectedMethod;
	
			_classCallCheck(this, MethodsFilter);
	
			self = this;
			this.selectedCategory = selectedCategory;
			this.data = data;
			this.selectedMethodType = selectedMethodType;
			this.selectedMethod = selectedMethod;
			this.selectedMethodName = ko.observable('');
			this.methodsViewModel = ko.observableArray([]);
			this.init();
		}
	
		/**
	  * Initialization phase
	  */
	
	
		_createClass(MethodsFilter, [{
			key: 'init',
			value: function init() {
				var _this = this;
	
				this.updateMethodsModel(ko.unwrap(this.selectedMethodType));
	
				//on change
				this.selectedMethodType.subscribe(function (val) {
					return _this.updateMethodsModel(val);
				});
				this.selectedMethod.subscribe(function (val) {
					_this.selectedMethodName(_this.data[ko.unwrap(self.selectedCategory)]['ALL'][val].name);
				});
			}
	
			/**
	   * Filters transclusion dom nodes
	   * @param param {array} $componentTemplateNodes
	   * @param index {number} index of element
	   * @returns {array} dom nodes array for insertion
	   */
	
		}, {
			key: 'filterTransclusion',
			value: function filterTransclusion(param, index) {
				var text = param.find(function (item) {
					return item.nodeName === '#text';
				});
				var el = param.filter(function (item) {
					return item.nodeName !== '#text' && item.nodeName !== '#comment';
				})[index];
				return [text, el, text];
			}
		}, {
			key: 'updateMethodsModel',
	
	
			/**
	   * Updates VM for methods select
	   * @param methodType
	   */
			value: function updateMethodsModel(methodType) {
				var obj = this.data[ko.unwrap(self.selectedCategory)][methodType] || {},
				    arr = [],
				    selectedMethod = ko.unwrap(self.selectedMethod),
				    count = 0;
	
				for (var i in obj) {
					if (!obj.hasOwnProperty(i)) {
						continue;
					}
					var property = obj[i];
	
					var vmMethod = $.extend({}, {
						id: property.id,
						name: property.name,
						link: property.link,
						checked: ko.observable(selectedMethod ? selectedMethod === property.id : !count)
					});
	
					if (selectedMethod === property.id) {
						self.selectedMethodName(property.name);
					}
	
					arr.push(vmMethod);
	
					// set global observable
					!selectedMethod && !count && this.selectedMethod(property.id);
	
					count++;
				}
	
				this.methodsViewModel(arr);
			}
		}, {
			key: 'onSelectMethod',
	
	
			/**
	   * On select handler for methods select
	   * @param item
	   */
			value: function onSelectMethod(item) {
				self.selectedMethod(item.id);
			}
		}]);
	
		return MethodsFilter;
	}();
	
	module.exports = ko.components.register('methods-filter', {
		viewModel: MethodsFilter,
		template: '\n\t\t<section  class="api-exp-main-filter">\n\t\t\t<section class="api-exp-filter">\n\t\t\t\t<section class="api-exp-methods clearfix">\n\t\t\t\t\t<label class="api-exp-methods__label">Methods</label>\n\t\n\t\t\t\t\t<!--radios-->\n\t\t\t\t\t<!-- ko template: { nodes: filterTransclusion($componentTemplateNodes, 0), data: $component } --><!-- /ko -->\n\t\t\t\t\t\n\t\t\t\t\t<!--select-->\n\t\t\t\t\t<div class="api-exp-methods__select">\n\t\t\t\t\t\t<!-- ko template: { nodes: filterTransclusion($componentTemplateNodes, 1), data: $component }--><!--/ko-->\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\t\t\t</section>\n\t\t</section>\n' });
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 24 */
/***/ function(module, exports) {

	'use strict';
	
	var self;
	
	function RadioFilter(params) {
		self = this;
		var selectedCategory = ko.unwrap(params.selectedCategory);
		var data = params.data;
		this.selectedMethodType = params.selectedMethodType;
		this.RADIO_ID = 'api-exp-';
	
		this.radiosModel = ko.observableArray([]);
		this.updateRadiosModel(data[selectedCategory]);
	
		params.selectedCategory.subscribe(function (val) {
			this.updateRadiosModel(data[val]);
		}, this);
	}
	
	RadioFilter.prototype.updateRadiosModel = function (param) {
		var obj = param || {},
		    arr = [];
	
		for (var i in obj) {
			if (!obj.hasOwnProperty(i)) {
				continue;
			}
			var item = {
				checked: ko.observable(i === 'ALL'),
				name: i
			};
			arr.push(item);
			// initial notify for all subscribers
			i === 'ALL' && this.selectedMethodType.notifySubscribers(i);
		}
	
		arr = arr.sort(compareMethods);
		this.radiosModel(arr);
		return arr;
	};
	
	/**
	 * Onchange handler for Radio buttons
	 * @param item
	 */
	RadioFilter.prototype.onchangeRadios = function (item) {
		var radiosModel = ko.unwrap(self.radiosModel).map(function (obj) {
			if (obj.name === item.name) {
				obj.checked(true);
				self.selectedMethodType(obj.name);
				console.log(ko.unwrap(self.selectedMethodType));
			} else {
				obj.checked(false);
			}
			return obj;
		});
		self.radiosModel(radiosModel);
	};
	
	/**
	 * Uniq id for radio btn
	 * @param name
	 * @returns {string}
	 */
	RadioFilter.prototype.getInputId = function (name) {
		return self.RADIO_ID + name;
	};
	
	/**
	 * Sort function for methods aray
	 * @param f
	 * @param s
	 * @returns {number}
	 */
	function compareMethods(f, s) {
		var a = f.name.toUpperCase();
		var b = s.name.toUpperCase();
	
		if (a === b) {
			return 0;
		}
		if (a === 'ALL' || a === 'GET' && (b === 'POST' || b === 'PUT' || b === 'DELETE') || a === 'POST' && (b === 'PUT' || b === 'DELETE') || a === 'PUT' && b === 'DELETE') {
			return -1;
		}
		return 1;
	}
	
	module.exports = ko.components.register('radio-filter', {
		viewModel: RadioFilter,
		template: '\n\t\t<!--radios-->\n\t\t<section data-bind="foreach: radiosModel" class="api-exp-methods__radio-buttons radio-buttons clearfix">\n\t\t\t<div data-bind="css: {active: checked}" class="api-exp-method">\n\t\t\t\t<input data-bind="attr: { id: $component.getInputId(name), checked: checked }, event: {change: $component.onchangeRadios}"\n\t\t\t\t\t\t\t\tclass="api-exp-content-method__radio"\n\t\t\t\t\t\t\t\ttype="radio"\n\t\t\t\t\t\t\t\tname="api-exp-methods">\n\t\t\t\t<label data-bind="text: name, attr: {for: $component.getInputId(name)}" class="radio-inline api-exp-method__label"></label>\n\t\t\t</div>\n\t\t</section>\n' });

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var self;
	
	var ParamsFilter = function () {
		function ParamsFilter(_ref) {
			var selectedMethod = _ref.selectedMethod,
			    selectedParams = _ref.selectedParams,
			    selectedMethodData = _ref.selectedMethodData,
			    _ref$animationSpeed = _ref.animationSpeed,
			    animationSpeed = _ref$animationSpeed === undefined ? 200 : _ref$animationSpeed;
	
			_classCallCheck(this, ParamsFilter);
	
			self = this;
			this.animationSpeed = animationSpeed;
			this.selectedMethod = selectedMethod;
			this.selectedParams = selectedParams;
			this.selectedMethodData = selectedMethodData;
			this.isHidden = ko.observable(true);
			this.paramInFocus = ko.observable({});
			this.paramsModel = ko.observableArray([]);
			this.isDirty = ko.computed(this.checkDirty, this);
			this.init({ selectedMethod: selectedMethod, selectedParams: selectedParams });
		}
	
		/**
	  * Initialization phase
	  */
	
	
		_createClass(ParamsFilter, [{
			key: 'init',
			value: function init(_ref2) {
				var _this = this;
	
				var selectedMethod = _ref2.selectedMethod,
				    selectedParams = _ref2.selectedParams;
	
				this.updateViewModel();
	
				selectedMethod.subscribe(function (val) {
					_this.updateViewModel(val);
				});
	
				selectedParams.subscribe(function (selectedParams) {
					var paramsModel = ko.unwrap(_this.paramsModel);
					selectedParams.map(function (param) {
						var matchedParam = paramsModel.find(function (val) {
							return param.name === val.name;
						});
						matchedParam.value(ko.unwrap(param.value));
					});
					_this.paramsModel(paramsModel);
				}, this, 'paramsSet');
			}
	
			/**
	   * Initial build of Select Model
	   */
	
		}, {
			key: 'updateViewModel',
			value: function updateViewModel() {
				var obj = ko.unwrap(self.selectedMethodData).parameters || {},
				    arr = [];
	
				for (var i in obj) {
					if (!obj.hasOwnProperty(i)) {
						continue;
					}
					var param = obj[i];
					var selectedParam;
	
					// copies all values from model to view-model
					var vmParam = $.extend(true, {}, param);
	
					vmParam.value = ko.observable(vmParam.select && param.options[0].name || vmParam.value || '');
	
					//add observable for selected options
					if (vmParam.select) {
						vmParam.options = selectedParam ? selectedParam.options : ko.observableArray(param.options.map(function (item) {
							return $.extend(true, {}, item, { checked: ko.observable(item.checked) });
						}));
					}
	
					// 'dirty' flag watcher for current field
					vmParam.isDirty = ko.pureComputed(function () {
						if (this.select) {
							return this.value() !== this.default && this.value() !== 'none';
						}
						return !!this.value().toString().trim().length;
					}, vmParam);
	
					// add calendar btn for current field
					vmParam.hasCalendar = i.search(/(date|time)/gmi) != -1;
	
					// add pop-up btn for current field
					vmParam.hasPopUp = i.search(/(attractionId|venueId)/gmi) != -1;
	
					arr.push(vmParam);
				}
	
				// prepare output for request
				this.paramsModel(arr);
				this.paramInFocus(this.paramsModel()[0]);
				this.prepareUrlPairs(arr, this.selectedParams);
				return arr;
			}
	
			/**
	   * Dirty params form observable method
	   * @returns {boolean}
	   */
	
		}, {
			key: 'checkDirty',
			value: function checkDirty() {
				this.prepareUrlPairs(ko.unwrap(this.paramsModel), this.selectedParams);
				var dirty = ko.unwrap(this.paramsModel).filter(function (item) {
					return ko.unwrap(item.isDirty) === true;
				});
				return dirty.length > 0;
			}
	
			/**
	   * Enter key handler
	   * @param model
	   * @param event
	   */
	
		}, {
			key: 'onEnterKeyDown',
			value: function onEnterKeyDown(model, event) {
				if (event.keyCode === 13) {
					$('#api-exp-get-btn').trigger('click');
				} else {
					return true;
				}
			}
	
			/**
	   * Slide toggle for params container method
	   * @param viewModel
	   * @param event
	   */
	
		}, {
			key: 'slideToggle',
			value: function slideToggle(viewModel, event) {
				$(event.currentTarget).parents('.js-slide-control').find('.js-slide-wrapper').slideToggle(viewModel.animationSpeed, function () {
					viewModel.isHidden(!viewModel.isHidden());
				});
			}
	
			/**
	   * Maches focused param
	   * @param item
	   */
	
		}, {
			key: 'onFocus',
			value: function onFocus(item) {
				self.paramInFocus(item);
			}
	
			/**
	   * Filters params by defined value
	   * @param arr
	   * @param koObs
	   * @returns {boolean}
	   */
	
		}, {
			key: 'prepareUrlPairs',
			value: function prepareUrlPairs(arr, koObs) {
				if (!arr || !koObs) {
					return false;
				}
	
				return koObs(arr.filter(function (item) {
					return item.value() && item.value() !== 'none' || item.default;
				}));
			}
	
			/**
	   * On select value handler for params select
	   * @param param {object} parameter view-model
	   * @param option {object} option view-model
	   */
	
		}, {
			key: 'onSelectParamValue',
			value: function onSelectParamValue(param, option) {
				param.value(option.name);
			}
	
			/**
	   * Params clear button handler
	   * @param vm {object} view model
	   * @param e {object} event
	   */
	
		}, {
			key: 'onParamsClear',
			value: function onParamsClear(vm, e) {
				var arr = ko.unwrap(self.paramsModel);
	
				self.paramsModel(arr.map(function (param) {
					param.value(param.select && param.default || '');
	
					if (param.select) {
						param.options(ko.unwrap(param.options).map(function (option, index) {
							option.checked(!index);
							return option;
						}));
					}
					return param;
				}));
	
				// prepare output for request
				this.paramInFocus(this.paramsModel()[0]);
				this.prepareUrlPairs(arr, this.selectedParams);
			}
		}]);
	
		return ParamsFilter;
	}();
	
	module.exports = ko.components.register('params-filter', {
		viewModel: ParamsFilter,
		template: '\n\t\t<section data-bind="css: {closed: isHidden, dirty: isDirty}" class="api-exp-params js-slide-control">\n\t\t\n\t\t\t<section class="api-exp-params-headline">\n\t\t\t\t<button data-bind="click: slideToggle" class="btn shevron-up toggle-btn btn-icon" type="button">Parameters</button>\n\t\t\t\t<div class="api-exp-params-headline-edit">\n\t\t\t\t\t<button class="btn api-exp-params-headline__btn api-exp-params-headline__btn-copy">&nbsp;</button>\n\t\t\t\t\t<button data-bind="click: onParamsClear" class="btn api-exp-params-headline__btn api-exp-params-headline__btn-clear">&nbsp;</button>\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t\t\n\t\t\t<div class="api-exp-params-wrapper clearfix js-slide-wrapper">\n\t\t\t\t<!--about-->\n\t\t\t\t<section class="api-exp-about visible-lg-block">\n\t\t\t\t\t<div class="api-exp-about-wrapper">\n\t\t\t\t\t\t<span class="api-exp-about__button"></span>\n\t\t\t\t\t\t<article class="api-exp-about__content">\n\t\t\t\t\t\t\t<h5 data-bind="text: paramInFocus().name" class="api-exp-about__title">About API and Method:</h5>\n\t\t\t\t\t\t\t<section class="api-exp-about__description">\n\t\t\t\t\t\t\t\t<p data-bind="html: paramInFocus().doc"></p>\n\t\t\t\t\t\t\t</section>\n\t\t\t\t\t\t</article>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\t\t\t\t\n\t\t\t\t<!--params filter-->\n\t\t\t\t<section class="api-exp-params-filter">\n\t\t\t\t\t<section data-bind="foreach: paramsModel" class="api-exp-params-filter-fields">\n\t\t\t\t\t\t<!--select-->\n\t\t\t\t\t\t\n\t\t\t\t\t\t<!-- ko if: select -->\n\t\t\t\t\t\t\t<div class="api-exp-params-filter__field">\n\t\t\t\t\t\t\t\t<custom-select params="\n\t\t\t\t\t\t\t\t\tdata: $data,\n\t\t\t\t\t\t\t\t\toptions: options,\n\t\t\t\t\t\t\t\t\tonselect: $component.onSelectParamValue.bind($data, $data),\n\t\t\t\t\t\t\t\t\tfocus: $component.onFocus,\n\t\t\t\t\t\t\t\t\tselected: value">\n\t\t\t\t\t\t\t\t</custom-select>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<!-- /ko -->\n\t\t\t\t\t\t\n\t\t\t\t\t\t<!-- ko ifnot: select -->\n\t\t\t\t\t\t\t<div data-bind="css: {\'dirty\': isDirty, calendar: hasCalendar, popup: hasPopUp}" class="api-exp-params-filter__field">\n\t\t\t\t\t\t\t\t<input data-bind="textInput: value, event: {focus: $component.onFocus, keydown: $component.onEnterKeyDown}, attr: {id: \'api-exp-param_\' + name}" type="text" class="form-control">\n\t\t\t\t\t\t\t\t<span data-bind="text: name" class="api-exp-params-filter__placeholder"></span>\n\t\t\t\t\t\t\t\t<button class="api-exp-params-filter__button">&nbsp;</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<!-- /ko -->\n\t\t\t\t\t\t\n\t\t\t\t\t</section>\n\t\t\t\t</section><!--params filter-->\n\t\t\t</div>\n\t\t</section><!--parameters-->\n' });
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Custom select component
	 */
	
	var CustomSelect = function () {
		function CustomSelect(_ref) {
			var data = _ref.data,
			    selected = _ref.selected,
			    options = _ref.options,
			    focus = _ref.focus,
			    onselect = _ref.onselect,
			    _ref$animationSpeed = _ref.animationSpeed,
			    animationSpeed = _ref$animationSpeed === undefined ? 200 : _ref$animationSpeed;
	
			_classCallCheck(this, CustomSelect);
	
			var rawOptions = ko.unwrap(options);
			var DEFAULT_SELECTED = rawOptions[0].name;
			this.curentSelectData = data;
			this.onFocus = focus;
			this.onselectMethod = onselect;
			this.animationSpeed = animationSpeed;
			this.options = options;
			this.value = ko.unwrap(selected) || DEFAULT_SELECTED;
			this.selectedOption = ko.observable(this.mapForChecked({ rawOptions: rawOptions, name: this.value }));
			this.setSubscribtions({ selected: selected, DEFAULT_SELECTED: DEFAULT_SELECTED });
		}
	
		_createClass(CustomSelect, [{
			key: 'setSubscribtions',
			value: function setSubscribtions(_ref2) {
				var _this = this;
	
				var selected = _ref2.selected,
				    DEFAULT_SELECTED = _ref2.DEFAULT_SELECTED;
	
				// has preselected option
				if (selected) {
					selected.subscribe(function (value) {
						var selectedOption = _this.mapForChecked({ rawOptions: ko.unwrap(_this.options), name: value || DEFAULT_SELECTED });
	
						return _this.selectedOption(selectedOption);
					});
				}
	
				// on select map for checked
				this.selectedOption.subscribe(function (value) {
					_this.mapForChecked({ rawOptions: ko.unwrap(_this.options), name: value.name });
					_this.onselectMethod(value);
				});
	
				// quantity of options check
				this.isOneOption = ko.pureComputed(function () {
					return ko.unwrap(_this.options).length < 2;
				});
			}
	
			/**
	   * Updates checked option
	   * @param rawOptions {array} options
	   * @param name {string} name of selected option
	   * @returns {object} selected option
	   */
	
		}, {
			key: 'mapForChecked',
			value: function mapForChecked(_ref3) {
				var rawOptions = _ref3.rawOptions,
				    name = _ref3.name;
	
				var selectedOption = void 0;
				var _iteratorNormalCompletion = true;
				var _didIteratorError = false;
				var _iteratorError = undefined;
	
				try {
					for (var _iterator = rawOptions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
						var option = _step.value;
	
						option.checked(option.name === name);
						if (option.name === name) {
							selectedOption = option;
						}
					}
				} catch (err) {
					_didIteratorError = true;
					_iteratorError = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion && _iterator.return) {
							_iterator.return();
						}
					} finally {
						if (_didIteratorError) {
							throw _iteratorError;
						}
					}
				}
	
				return selectedOption;
			}
		}, {
			key: 'slideToggle',
			value: function slideToggle(item, event) {
				this.onFocus && this.onFocus(this.curentSelectData);
				if (ko.unwrap(this.isOneOption)) {
					return false;
				}
				var el = this.constructor.findElement(event);
				el.wrapper.slideToggle(this.animationSpeed);
				el.layer.toggleClass('hidden');
			}
		}, {
			key: 'onSelect',
			value: function onSelect(item, event) {
				var rawOptions = ko.unwrap(this.options);
				this.mapForChecked({ rawOptions: rawOptions, name: item.name });
				this.selectedOption(item);
				this.slideToggle(item, event);
			}
		}], [{
			key: 'findElement',
			value: function findElement(event) {
				var parent = $(event.currentTarget).parents('.js-custom-select');
				return {
					wrapper: parent.find('.js-custom-select-wrapper'),
					layer: parent.find('.js-custom-select-layer')
				};
			}
		}]);
	
		return CustomSelect;
	}();
	
	module.exports = ko.components.register('custom-select', {
		viewModel: CustomSelect,
		template: '\n\t<div class="api-exp-custom-select js-custom-select">\n\t\t<div class="api-exp-custom-select-wrapper">\n\t\t\t<select class="api-exp-custom-select__field" name="api-exp-method" data-bind="options: options, optionsText: \'name\', value: selectedOption"></select>\n\t\t\t\t<span class="api-exp-custom-select__placeholder">\n\t\t\t\t<input type="text" readonly="" data-bind="click: slideToggle, value: selectedOption().name, attr: {disabled: isOneOption}">\n\t\t\t\t<b class="api-exp-custom-select__chevron" data-bind="css: {hidden: isOneOption}">&nbsp;</b>\n\t\t\t</span>\n\t\t\t<ul data-bind="foreach: options" class="api-exp-custom-select__list js-custom-select-wrapper">\n\t\t\t\t<li data-bind="css: {\'active\': checked}" class="api-exp-custom-select__item">\n\t\t\t\t\t<button class="api-exp-custom-select__item-label"\n\t\t\t\t\t\t\t\t\tdata-bind="click: $component.onSelect.bind($component),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttext: name,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcss: {\'active\': checked},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tattr: {\'data-value\': name}"></button>\n\t\t\t\t\t<a class="api-exp-custom-select__item-link" target="_blank" data-bind="attr: {href: link}, css: {\'hidden\': !link}">&nbsp;</a>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</div>\n\t\t<div data-bind="click: slideToggle" class="api-exp-custom-select-layer js-custom-select-layer hidden"></div>\n\t</div>\n' });
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ErrorPopUp = function () {
		function ErrorPopUp(params) {
			var _this = this;
	
			_classCallCheck(this, ErrorPopUp);
	
			this.status = ko.observable('');
			this.statusText = ko.observable('');
			this.details = ko.observable('');
			params.onError.subscribe(function (errorObj) {
				_this.status(Object.getProp(errorObj, '.responseJSON.errors[0].status') || errorObj.status || 'unnown');
				_this.statusText(Object.getProp(errorObj, '.responseJSON.errors[0].statusText') || errorObj.statusText || '');
				_this.details(Object.getProp(errorObj, '.responseJSON.errors[0].detail') || 'unnown');
				_this.togglePopUp();
			}, this, 'error');
		}
	
		_createClass(ErrorPopUp, [{
			key: 'togglePopUp',
			value: function togglePopUp() {
				$('#error-modal').modal('show');
			}
		}]);
	
		return ErrorPopUp;
	}();
	
	module.exports = ko.components.register('error-pop-up', {
		viewModel: ErrorPopUp,
		template: '\n\t\t<section id="error-modal" class="modal fade" tabindex="-1" role="dialog">\n\t\t\t<div class="modal-dialog" role="document">\n\t\t\t\t<div class="modal-content error-pop-up">\n\t\t\t\t\t<div class="modal-header">\n\t\t\t\t\t\t<h2 class="error-title">Error <span data-bind="text: status"></span>: <span data-bind="text: statusText"></span></h2>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="modal-body">\n\t\t\t\t\t\t<p data-bind="text: details" class="error-details"></p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="modal-footer">\n\t\t\t\t\t\t<button type="button" class="btn btn-primary btn-accept" data-dismiss="modal" aria-label="Close">Ok</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div><!-- /.modal-content -->\n\t\t\t</div><!-- /.modal-dialog -->\n\t\t</section><!-- /.modal -->\n' });
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/*
	todo: single - first load;
	todo: paging (params)
	todo: ulr parse
	todo: fields validation
	 */
	
	var self;
	
	var CardGroup = function () {
		function CardGroup(params) {
			_classCallCheck(this, CardGroup);
	
			self = this;
			this.config = this.constructor.getConfig(params);
			this.data = this.constructor.prepareData({ params: params, config: this.config._CONFIG });
			this.groupIndex = params.groupIndex || 0;
			this.sectionIndex = ko.unwrap(params.sectionIndex);
			this.colorClass = params.colorClass;
			this.getMore = params.getMore;
			this.page = this.constructor.getPagingInfo(params, this.data.page);
			this.collapseId = this.constructor.getCollapseId();
			this._hasEventsPanel = false;
		}
	
		_createClass(CardGroup, [{
			key: 'sortByConfig',
			value: function sortByConfig(a, b) {
				if (this.config && this.config[a.key] && this.config[b.key] && this.config[a.key]._CONFIG && this.config[b.key]._CONFIG) {
					var i1 = this.config[a.key]._CONFIG.index;
					var i2 = this.config[b.key]._CONFIG.index;
					return i1 - i2;
				}
				return 0;
			}
		}, {
			key: 'checkIfHasEventsList',
			value: function checkIfHasEventsList(key) {
				return self._hasEventsPanel = key === 'events' || self._hasEventsPanel;
			}
	
			/**
	   * Configures and params for each panel group
	   */
	
		}], [{
			key: 'getConfig',
			value: function getConfig(_ref) {
				var _ref$deepProp = _ref.deepProp,
				    deepProp = _ref$deepProp === undefined ? '' : _ref$deepProp,
				    config = _ref.config,
				    filter = _ref.filter,
				    methodId = _ref.methodId;
	
				self.deepProp = deepProp;
				// main config
				if (!self.deepProp && !config) {
					// panelGroup index - 0
	
					// get full config;
					var rawFilter = ko.unwrap(filter);
	
					// get current method config
					var methodConfig = rawFilter[methodId] || {};
	
					// method config inherits global config
					methodConfig._CONFIG = $.extend(true, {}, rawFilter._GLOBAL_CONFIG, methodConfig._CONFIG);
	
					return methodConfig;
				} else {
					// panelGroup index > 0
					return config || {};
				}
			}
	
			/**
	   * Data manipulations
	   */
	
		}, {
			key: 'prepareData',
			value: function prepareData(_ref2) {
				var _ref2$params = _ref2.params,
				    params = _ref2$params === undefined ? {} : _ref2$params,
				    config = _ref2.config;
	
				var data = $.extend(true, {}, params.data) || {};
				this.unwrappObjects(data, config);
				this.removeDeprecated(data, config);
				return this.wrappPrimitives({ data: data, _propTitle: params._propTitle });
			}
	
			/**
	   * Gathers all stand alone props in to one object
	   * @param data {object}
	   * @param _propTitle {string}
	   * @returns {object} revised data
	   */
	
		}, {
			key: 'wrappPrimitives',
			value: function wrappPrimitives(_ref3) {
				var data = _ref3.data,
				    _ref3$_propTitle = _ref3._propTitle,
				    _propTitle = _ref3$_propTitle === undefined ? 'object' : _ref3$_propTitle;
	
				var newData = {},
				    val = void 0;
	
				// gathering all primitive props in additional panel
				for (var key in data) {
					if (!data.hasOwnProperty(key)) {
						continue;
					}
					val = data[key];
	
					if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) !== 'object') {
						newData[_propTitle] = newData[_propTitle] || {};
						newData[_propTitle][key] = val;
					} else {
						newData[key] = val;
					}
				}
				return newData;
			}
	
			/**
	   * Unwraps objects
	   */
	
		}, {
			key: 'removeDeprecated',
			value: function removeDeprecated(obj) {
				var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
				var deprecated = config.deprecated || [];
	
				deprecated.map(function (item) {
					if (obj[item]) {
						delete obj[item];
					}
					return item;
				});
	
				return obj;
			}
	
			/**
	   * Removes deprecated objects
	   */
	
		}, {
			key: 'unwrappObjects',
			value: function unwrappObjects(obj) {
				var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
				var unwrapp = config.unwrapp || [];
	
				unwrapp.map(function (item) {
					var val = obj[item];
					if (val) {
						var arr = Object.keys(val);
						for (var i = 0; i < arr.length; i++) {
							var prop = arr[i];
							obj[prop] = val[prop];
						}
						delete obj[item];
					}
					return item;
				});
	
				return obj;
			}
	
			/**
	   * Prepares data for paging
	   */
	
		}, {
			key: 'getPagingInfo',
			value: function getPagingInfo(params, pageObj) {
				var pageParam = void 0,
				    size = void 0;
	
				if (pageObj) {
					size = params.cardSize || pageObj.size;
					pageParam = params.pageParam || params.params.find(function (item) {
						return item.name === 'page';
					});
	
					return {
						category: params.category,
						method: params.method,
						methodId: params.methodId,
						params: params.params,
						pageParam: pageParam && pageParam.value,
						setParams: params.setParams,
						size: size
					};
				}
				return null;
			}
	
			/**
	   * Provides id str for panel 'collapse toggle' logic
	   * @param str
	   * @returns {string}
	   */
	
		}, {
			key: 'getCollapseId',
			value: function getCollapseId() {
				return 'card-panel-body-' + self.sectionIndex + self.groupIndex;
			}
		}]);
	
		return CardGroup;
	}();
	
	module.exports = ko.components.register('panel-group', {
		viewModel: CardGroup,
		template: '\n\t\t<section data-bind="foreachprop: {data: data, sortFn: sortByConfig.bind($component)}" class="panel-group">\n\t\t\t<!--panel-->\n\t\t\t<panel data-bind="css: {\'has-events-list\': $component.checkIfHasEventsList(key)}"\n\t\t\t\t\t\t\tparams="$data: $data,\n\t\t\t\t\t\t\t\t\t\t\t$index: $index,\n\t\t\t\t\t\t\t\t\t\t\tpanelGroup: $component,\n\t\t\t\t\t\t\t\t\t\t\tsortByConfig: $component.sortByConfig">\n\t\t\t</panel>\n\t\t</section>\n' });
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Panel = function () {
		function Panel(_ref) {
			var _ref$$data = _ref.$data,
			    $data = _ref$$data === undefined ? {} : _ref$$data,
			    _ref$panelGroup = _ref.panelGroup,
			    panelGroup = _ref$panelGroup === undefined ? {} : _ref$panelGroup,
			    $index = _ref.$index;
	
			_classCallCheck(this, Panel);
	
			this.$data = $data;
			this.key = $data.key;
			this.$index = ko.unwrap($index);
			this.panelGroup = panelGroup;
			this.page = panelGroup.page;
			this.colorClass = panelGroup.colorClass || '';
			this.config = this.constructor.panelConfig({ config: panelGroup.config, key: this.key });
			this.isExpanded = this.constructor.isExpanded(this.config);
			this.collapseId = panelGroup.collapseId + this.$index;
			this.isActive = ko.observable(this.isExpanded);
		}
	
		_createClass(Panel, [{
			key: 'setActive',
			value: function setActive(model, event) {
				this.isActive(!this.isActive());
			}
	
			/**
	   * Gets config for each panel
	   * @param config
	   * @param key
	   * @returns {*|{}}
	   */
	
		}], [{
			key: 'panelConfig',
			value: function panelConfig(_ref2) {
				var config = _ref2.config,
				    key = _ref2.key;
	
				var subConfig = config[key] || {};
	
				subConfig._CONFIG = $.extend(true, {}, config._CONFIG, subConfig._CONFIG);
				return subConfig;
			}
	
			/**
	   * Checks for 'expanded' config for each panel
	   * @param config
	   * @returns {boolean}
	   */
	
		}, {
			key: 'isExpanded',
			value: function isExpanded(config) {
				return !(Object.getProp(config, '._CONFIG.collapsed') || false);
			}
		}]);
	
		return Panel;
	}();
	
	module.exports = ko.components.register('panel', {
		viewModel: Panel,
		template: '\n\t\t<section data-bind="css: {[colorClass]: true, active: isActive}" class="panel panel-primary">\n\t\t\t<!--panel-heading-->\n\t\t\t<panel-heading params="config: config, data: $data, index: $index, page: page, setActive: setActive.bind($component), collapseId: collapseId, colorClass: colorClass, isExpanded: isExpanded"></panel-heading>\n\t\t\t\n\t\t\t<!--panel-body-->\n\t\t\t<section data-bind="attr: {\'id\': collapseId}, css: {\'in\': isExpanded}" class="panel-collapse collapse">\t\t\t\t\n\t\t\t\t<!-- ko if: (typeof $data.value === \'object\' && !$.isArray($data.value)) -->\n\t\t\t\t\t<object-panel-body params="config: config, data: $data, index: $index, panelGroup: panelGroup, page: page, collapseId: collapseId"></object-panel-body>\n\t\t\t\t<!-- /ko -->\n\t\t\t\t<!-- ko if: (typeof $data.value === \'object\' && $.isArray($data.value)) -->\n\t\t\t\t\t<array-panel-body params="config: config, data: $data, index: $index, panelGroup: panelGroup"></array-panel-body>\n\t\t\t\t<!-- /ko -->\n\t\t\t</section>\n\t\t</section>\n' });
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Pagination element
	 * @param params
	 */
	var Pagination = function () {
		function Pagination(_ref) {
			var _ref$page = _ref.page,
			    page = _ref$page === undefined ? {} : _ref$page,
			    totalPages = _ref.totalPages,
			    number = _ref.number;
	
			_classCallCheck(this, Pagination);
	
			this.page = page;
			this.totalPages = +totalPages;
			this.number = +number;
			this.first = !!this.number;
			this.last = +number < +totalPages - 1;
			this.requestBtn = $('#api-exp-get-btn');
		}
	
		/**
	  * get next page
	  */
	
	
		_createClass(Pagination, [{
			key: 'getPrevPage',
			value: function getPrevPage() {
				var page = this.page;
				var val = ko.unwrap(page.pageParam);
				page.pageParam(val > 0 ? val - 1 : 0);
				page.setParams({
					category: page.category,
					method: page.method,
					methodId: page.methodId,
					params: page.params
				});
				this.requestBtn.trigger('click');
			}
	
			/**
	   * get prev page
	   */
	
		}, {
			key: 'getNextPage',
			value: function getNextPage() {
				var page = this.page;
				var val = ko.unwrap(this.number);
				page.pageParam(val < this.totalPages - 1 ? val + 1 : val);
				page.setParams({
					category: page.category,
					method: page.method,
					methodId: page.methodId,
					params: page.params
				});
				this.requestBtn.trigger('click');
			}
		}]);
	
		return Pagination;
	}();
	
	module.exports = ko.components.register('pagination', {
		viewModel: Pagination,
		template: '<span class="navigation-wrapper">\n\t\t<button data-bind="click: getPrevPage, enable: first" type="button" class="navigation prev"></button>\n\t\t<button  data-bind="click: getNextPage, enable: last" type="button" class="navigation next"></button>\n\t</span>'
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _colorClasses = __webpack_require__(32);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var PanelHeading = function () {
		function PanelHeading(_ref) {
			var _ref$config = _ref.config,
			    config = _ref$config === undefined ? {} : _ref$config,
			    _ref$data = _ref.data,
			    data = _ref$data === undefined ? {} : _ref$data,
			    setActive = _ref.setActive,
			    isExpanded = _ref.isExpanded,
			    page = _ref.page,
			    collapseId = _ref.collapseId,
			    colorClass = _ref.colorClass;
	
			_classCallCheck(this, PanelHeading);
	
			this.config = config._CONFIG;
			this.setActive = setActive;
			this.isExpanded = isExpanded;
			this._panelName = data.key;
			this.title = this.config && this.config.title || this._panelName;
			this.data = data.value;
			this.collapseId = collapseId;
			this.page = page;
			this.init({ page: page, colorClass: colorClass });
		}
	
		_createClass(PanelHeading, [{
			key: 'init',
			value: function init(_ref2) {
				var page = _ref2.page,
				    colorClass = _ref2.colorClass;
	
				if (page) {
					this.cardSize = page.size;
				}
				if (this.config.request) {
					this.getRandomColor = (0, _colorClasses.getRandomColor)(colorClass);
				}
			}
		}, {
			key: 'followRequest',
			value: function followRequest(value) {
				var url = Object.getProp(value, '.config.request');
				url && location.assign(url);
			}
		}]);
	
		return PanelHeading;
	}();
	
	module.exports = ko.components.register('panel-heading', {
		viewModel: PanelHeading,
		template: '\n\t\t<section class="panel-heading">\n\t\t\t<div class="panel-title">\n\t\t\t\t\n\t\t\t\t<a data-bind="click: setActive, attr: {href: \'#\' + collapseId, \'aria-controls\': collapseId, \'aria-expanded\': isExpanded}" class="btn btn-icon btn-title" type="button" data-toggle="collapse" aria-expanded="false">\n\t\t\t\t\t<span class="btn btn-icon shevron white-shevron-up"></span>\n\t\t\t\t\t<p data-bind="text: title" class="title">Panel title</p>\n\t\t\t\t</a>\n\t\t\t\t\n\t\t\t\t<!-- ko if: _panelName === \'events\'-->\n\t\t\t\t\t<span data-bind="text: cardSize" class="counter"></span>\n\t\t\t\t<!-- /ko-->\n\t\t\t\t\n\t\t\t\t<!-- ko if: _panelName === \'page\'-->\n\t\t\t\t\t<pagination params="number: data.number, totalPages: data.totalPages, page: page"></pagination>\n\t\t\t\t<!-- /ko-->\n\t\t\t\t\n\t\t\t\t<!-- ko if: config.request !== undefined -->\n\t\t\t\t<section class="follow-request">\n\t\t\t\t\t<span data-bind="css: getRandomColor" class="color-indicator"></span>\n\t\t\t\t\t<button data-bind="click: followRequest" class="btn btn-request" type="button">another request</button>\n\t\t\t\t</section>\n\t\t\t\t<!-- /ko-->\n\t\t\t</div>\n\t\t</section>\n' });

/***/ },
/* 32 */
/***/ function(module, exports) {

	'use strict';
	
	var NUM = 12;
	var PREFIX = 'color-';
	
	var colors = getColors(NUM, PREFIX);
	
	function getColors(num, classPrefix) {
		var colors = new Array(num);
	
		for (var i = 0; i < colors.length; i++) {
			colors[i] = classPrefix + (i + 1);
		}
		return colors;
	}
	
	function getRandomColor(color) {
		var randomNumber;
		do {
			randomNumber = getRandomInt(1, colors.length);
		} while (PREFIX + randomNumber === color);
	
		return PREFIX + randomNumber;
	}
	
	/**
	 * Returns a random integer between min (inclusive) and max (inclusive)
	 * Using Math.round() will give you a non-uniform distribution!
	 */
	function getRandomInt(min, max) {
		return Math.floor(Math.random() * (max - min + 1)) + min;
	}
	module.exports = {
		colors: colors,
		getRandomColor: getRandomColor
	};

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var self;
	
	function ObjectPanelBody(params) {
		self = this;
		this.data = this.data || ko.observable(params.data.value);
		this.config = params.config;
		this._panelName = params.data.key;
		this.cardIndex = this.cardIndex || ko.utils.unwrapObservable(params.index);
		this.panelGroup = params.panelGroup || {};
		this.getMore = this.panelGroup.getMore;
		this.page = params.page;
		this.collapseId = params.collapseId;
		this._allInside = !!Object.getProp(ko.unwrap(this.config), '._CONFIG.allInside');
		this.sortByConfig = this.panelGroup.sortByConfig;
	}
	
	ObjectPanelBody.prototype.onEnterKeyDown = function (model, event) {
		if (event.keyCode === 13) {
			var page = this.page;
			var value = +event.currentTarget.value;
			value = Number.isNaN(value) ? 0 : value;
			var pageNumber = ~~value < 0 ? 0 : ~~value;
			page.pageParam(pageNumber < ko.unwrap(this.data).totalPages ? pageNumber : ko.unwrap(this.data).totalPages - 1);
			page.setParams({
				category: page.category,
				method: page.method,
				methodId: page.methodId,
				params: page.params
			});
			$('#api-exp-get-btn').trigger('click');
		} else {
			return true;
		}
	};
	
	ObjectPanelBody.prototype.canBeCopied = function () {
		if (_typeof(this.value) === 'object') return false;
		this.copied = ko.observable(false);
		if (Object.getProp(self.config, '._CONFIG.copyBtn.' + this.key)) {
			return true;
		}
	
		return false;
	};
	
	ObjectPanelBody.prototype.copyValue = function (model, event) {
		var currentField = this;
		self.clipboard = new Clipboard(event.currentTarget);
		self.clipboard.on('success', function onSuccessCopy(e) {
			currentField.copied(true);
			setTimeout(function () {
				currentField.copied(false);
			}, 500);
			e.clearSelection();
		}).on('error', function onErrorCopy(e) {
			console.error('Action:', e.action);
			console.error('Trigger:', e.trigger);
		});
	};
	
	ObjectPanelBody.prototype.removeHandler = function () {
		self.clipboard && self.clipboard.destroy();
		delete self.clipboard;
	};
	ObjectPanelBody.prototype.setActive = function (key, value, model, e) {
		$(e.currentTarget).parents('.slick-slide').find('.item.object').removeClass('active');
		$(e.currentTarget).parent('.item').addClass('active');
		this.getMore.call(this, key, value);
	};
	
	module.exports = ko.components.register('object-panel-body', {
		viewModel: ObjectPanelBody,
		template: '\n\t\t<section data-bind="css: {\'all-inside\': $component._allInside}" class="panel-body object-panel-body">\n\t\t\t<!-- ko if: $component._panelName === \'object\' && !!Object.getProp(ko.unwrap(data), \'.ratio\')-->\n\t\t\t\t<img data-bind="attr: {src: ko.utils.unwrapObservable(data).url, alt: \'image-\' + ko.utils.unwrapObservable(data).ratio}" alt="img" class="img img-thumbnail">\n\t\t\t<!-- /ko -->\n\t\t\t\n\t\t\t<ul data-bind="foreachprop: {data: data, sortFn: $component.sortByConfig.bind($component)}" class="list object-list">\n\t\t\t\t<li data-bind="css: {\'object\': typeof value === \'object\', \'primitive\': typeof value !== \'object\'}" class="clearfix pading item">\n\t\t\t\t\n\t\t\t\t\t<!-- ko ifnot: typeof value === \'object\' && $component._allInside -->\n\t\t\t\t\t<span data-bind="text: typeof value === \'object\' ? key: key + \':\'" class="key"></span>\n\t\t\t\t\t<!-- /ko -->\n\t\t\t\t\t\n\t\t\t\t\t<!-- ko ifnot: typeof value === \'object\' || $component._panelName === \'page\' && key === \'number\' -->\n\t\t\t\t\t\t<span data-bind="text: value" class="value"></span>\n\t\t\t\t\t<!-- /ko -->\n\t\t\t\t\t\n\t\t\t\t\t<!-- ko if: $component._panelName === \'page\' && key === \'number\'-->\n\t\t\t\t\t\t<div class="form-inline">\n\t\t\t\t\t\t\t<input id="pagination-input" data-bind="event: {keydown: $component.onEnterKeyDown.bind($component)}, attr: {placeholder: value}" type="text" pattern="[0-9]+" class="form-control">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t<!-- /ko -->\n\t\t\t\t\t\n\t\t\t\t\t<!-- ko if: $component.canBeCopied.call($data, \'#prop-value-\' + key + $index()) -->\n\t\t\t\t\t\t<button data-bind="event: {mouseover: $component.copyValue, mouseout: $component.removeHandler}, css: {\'copied\': copied}, attr: {\'data-clipboard-text\': value.toString(), id: \'prop-value-\' + key + $index()}, popover: {type: \'tooltip\', title: \'Copy value\'}" type="button" class="btn btn-icon btn-copy"></button>\n\t\t\t\t\t<!-- /ko -->\n\t\t\t\t\t\n\t\t\t\t\t\t<!-- ko if: typeof value === \'object\' && $component._allInside -->\n\t\t\t\t\t\t\t<panel params="$data: $data, $index: $index, panelGroup: $component"></panel>\n\t\t\t\t\t\t<!-- /ko -->\n\t\t\t\t\t\t<!-- ko if: typeof value === \'object\' && !$component._allInside -->\n\t\t\t\t\t\t\t<button data-bind="click: $component.setActive.bind($component, key, value)" type="button" class="btn btn-icon blue-shevron-right pull-right"></button>\n\t\t\t\t\t\t<!-- /ko -->\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</section>\n' });
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';
	
	var self;
	
	function ArrayPanelBody(params) {
		self = this;
		this.data = params.data.value;
		this.config = params.config;
		this._panelName = params.data.key;
		this.cardIndex = this.cardIndex || ko.utils.unwrapObservable(params.index);
		this.panelGroup = params.panelGroup;
		this.getMore = this.panelGroup.getMore;
	}
	
	ArrayPanelBody.prototype.getStartData = function ($data) {
		return Object.getProp($data, 'dates.start.localDate') || '';
	};
	
	ArrayPanelBody.prototype.getVenueName = function ($data) {
		return Object.getProp($data, '_embedded.venues[0].name') || '';
	};
	
	ArrayPanelBody.prototype.setActive = function ($index, model, e) {
		$(e.currentTarget).parents('.slick-slide').find('.item.object').removeClass('active');
		$(e.currentTarget).parent('.item').addClass('active');
		this.getMore.call(this, $index, model);
	};
	
	module.exports = ko.components.register('array-panel-body', {
		viewModel: ArrayPanelBody,
		template: '\n\t\t<section class="panel-body no-padding array-panel-body">\n\t\t\t<ul data-bind="foreach: data, css: {\'events\': $component._panelName === \'events\'}" class="list list-group">\n\t\t\t\t<li data-bind="css: {\'object\': typeof $data === \'object\'}" class="list-group-item item">\n\t\t\t\t\n\t\t\t\t\t<!-- ko if: $component._panelName === \'images\' -->\n\t\t\t\t\t\t<img data-bind="attr: {src: url, alt: \'image-\' + ratio}" alt="img" class="img">\n\t\t\t\t\t<!-- /ko -->\n\t\t\t\t\t\n\t\t\t\t\t<!-- ko ifnot: $component._panelName === \'images\' -->\n\t\t\t\t\t\t<div class="name-wrapper">\n\t\t\t\t\t\t\t<span data-bind="text: name || \'#\' + $index(), blockEllipsis: {clamp: 2}" class="name">label</span>\n\t\t\t\t\t\t</div>\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t<!-- ko if: $component._panelName === \'events\' -->\n\t\t\t\t\t\t\t<div class="additional-info">\n\t\t\t\t\t\t\t\t<p data-bind="text: $component.getStartData($data)" class="date">event date</p>\n\t\t\t\t\t\t\t\t<!-- ko if: $component.getVenueName($data)-->\n\t\t\t\t\t\t\t\t\t<p data-bind="text: $component.getVenueName($data)" class="venue truncate">event venue</p>\n\t\t\t\t\t\t\t\t<!--/ko-->\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<!-- /ko -->\n\t\t\t\t\t\t\n\t\t\t\t\t<!-- /ko -->\n\t\t\t\t\t\n\t\t\t\t\t<!-- ko if: typeof $data === \'object\' -->\n\t\t\t\t\t\t<button data-bind="click: $component.setActive.bind($component, $index())" type="button" class="btn btn-icon blue-shevron-right pull-right"></button>\n\t\t\t\t\t<!-- /ko -->\n\t\t\t\t\t\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</section>\n' });
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
		base: __webpack_require__(36),
		apiKey: __webpack_require__(37),
		rest: __webpack_require__(38),
		config: __webpack_require__(39)
	};

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {"use strict";
	
	var base = {};
	var CONFIG_URL = '../../apidescription.xml';
	
	var parseData = function parseData(xml) {
		var global = {};
		//get all APIs
		var resourcesEl = $(xml).find("resources").eq(0);
	
		// resource
		$(xml).find("resource").get().map(function (res) {
			var resource = $(res);
			// method --------------------------------
			var methodElem = resource.find("method").eq(0);
	
			var method = {
				id: methodElem.attr("id"), // method id
				name: methodElem.attr("apigee:displayName") || methodElem.attr("id"), // method name
				method: methodElem.attr('name'), // GET or POST
				category: methodElem.find('[primary="true"]').text().trim(), // API name
				path: resource.attr('path'), // method URL
				base: resourcesEl.attr('base'), // method base link
				link: methodElem.find('doc').eq(0).attr('apigee:url'), // link to documentation
				description: methodElem.find('doc').eq(0).text().trim(), //method description
				parameters: {}
			};
	
			// params --------------------------------
			resource.find('param').get().map(function (par) {
				var param = $(par);
				var options = param.find('option');
				var isSelect = !!options.length;
	
				var parameter = {
					name: param.attr('name'),
					doc: param.first('doc').text().trim(),
					style: param.attr('style'),
					required: param.attr('required'),
					default: param.attr('default') === 'none' && isSelect ? '' : param.attr('default'),
					select: isSelect
				};
	
				if (isSelect) {
					parameter.options = options.get().map(function (option) {
						return {
							name: $(option).attr('value'),
							checked: $(option).attr('value') === parameter.default || $(option).attr('value') === 'none',
							link: false
						};
					});
				}
	
				method.parameters[parameter.name] = parameter;
			});
	
			/**
	   * Global obj composition
	      */
			// set category obj
			global[method.category] = global[method.category] || {};
	
			// set methods type obj
			global[method.category].ALL = global[method.category].ALL || {};
			global[method.category][method.method] = global[method.category][method.method] || {};
	
			// set method obj
			global[method.category].ALL[method.id] = method;
			global[method.category][method.method][method.id] = method;
		});
	
		return global;
	};
	
	//gets document from WADL configuration file
	var readFromWADL = function readFromWADL() {
		$.ajax({
			url: CONFIG_URL,
			async: false,
			dataType: "text",
			success: function success(response) {
				var xml = $.parseXML(response);
				base = parseData(xml);
			},
	
			error: function error(XMLHttpRequest, textStatus, errorThrown) {
				alert('Data Could Not Be Loaded - ' + textStatus);
			}
		});
	};
	readFromWADL();
	module.exports = base;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 37 */
/***/ function(module, exports) {

	'use strict';
	
	var apiKey = 'XiOrN2UC9yjuR4XF87sdMbRpaVNsP6W2' || apiKeyService.checkApiKeyCookie('tk-api-key') || apiKeyService.getApiExploreKey(); //API Key
	
	module.exports = {
	  name: 'apikey',
	  style: 'query',
	  value: ko.observable(apiKey)
	};

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';
	
	module.exports = function (arr, requests, onError, global) {
	  var url = prepareUrl(arr);
	  ajaxService(url, arr[0].method, function (res, msg) {
	    var resObj = {
	      category: arr[0].category,
	      method: arr[0].method,
	      methodId: arr[0].id,
	      params: arr[2].map(function (obj) {
	        return $.extend(true, {}, {
	          name: obj.name,
	          value: ko.observable(ko.unwrap(obj.value)),
	          options: obj.options
	        });
	      }),
	      req: url,
	      index: requests().length
	    };
	
	    if (msg == 'error') {
	      // notifying error modal
	      onError.notifySubscribers(res, 'error');
	      // error popover of request
	      resObj.error = res;
	    } else {
	      global.lastResponse = resObj.response = res.responseJSON;
	    }
	
	    // exporting data using observable
	    requests.unshift(resObj);
	  });
	};
	
	/**
	 * Ajax Service
	 * @param url
	 * @param method
	 * @param callback
	 */
	function ajaxService(url, method, callback) {
	  $.ajax({
	    type: method,
	    url: url,
	    async: true,
	    dataType: "json",
	    complete: callback
	  });
	}
	
	/**
	 * Filters and prepares params pairs
	 * @param arr
	 * @returns {boolean}
	 */
	function prepareUrl(arr) {
	  var replacement, url, domain, path, method, apiKey, params;
	
	  if (!arr && !arr.length) {
	    return false;
	  }
	
	  domain = arr[0].base;
	  path = arr[0].path;
	  apiKey = arr[1];
	  params = arr[2].filter(function (item) {
	    return item.style === 'query';
	  });
	
	  // arr of template marks
	  replacement = path.match(/([^{]*?)\w(?=\})/gmi);
	
	  // arr of template params
	  var templatesArr = arr[2].filter(function (item) {
	    return item.style === 'template';
	  });
	
	  // replacement
	  replacement.forEach(function (val) {
	    var param = templatesArr.find(function (item) {
	      return item.name === val;
	    });
	    path = path.replace('{' + param.name + '}', param.value() || param.default);
	  });
	
	  // adds apiKey param
	  if (!params[0] || params[0].name !== 'apikey') {
	    params.unshift(apiKey);
	  }
	
	  // prepares params part of url
	  params = params.map(function (item) {
	    return [item.name, item.value() || item.default].join('=');
	  }).join('&');
	
	  url = [domain, '/', path, '?', params].join('');
	
	  return encodeURI(url);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';
	
	var config = ko.observable();
	
	$.ajax({
		type: 'GET',
		url: ['http://', document.location.hostname, document.location.port && ':' + document.location.port, '/scripts/api-explorer/v2/config.json'].join(''),
		async: true,
		dataType: "json",
		complete: function complete(res, msg) {
			if (msg == 'error') {
				console.error('can\'t load config.json!');
			} else {
				config(res.responseJSON);
			}
		}
	});
	
	module.exports = config;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var jsonHighlight = __webpack_require__(41);
	var slider = __webpack_require__(44);
	var filter = __webpack_require__(45);
	var self;
	var colors = __webpack_require__(32).colors;
	
	var RequestsListViewModel = function () {
		function RequestsListViewModel(params) {
			_classCallCheck(this, RequestsListViewModel);
	
			this.url = params.selectedParams;
			this.sharePath = params.sharePath;
			this.requests = params.requests;
			this.setParams = params.setParams;
			self = this;
			this.colors = colors;
			this.isActiveTab = ko.observable(false);
			this.viewModel = ko.observableArray([]);
			this.clearBtnIsVisible = ko.computed(this._isVisible, this);
			this.requests.subscribe(this.updateModel, this);
		}
	
		/**
	  * Update Viewmodel of request list
	  * @param arr
	  */
	
	
		_createClass(RequestsListViewModel, [{
			key: 'updateModel',
			value: function updateModel(arr) {
				var _this = this;
	
				var newModel = ko.unwrap(this.requests).map(function (obj) {
					var newObj = {
						color: _this.colors[obj.index % _this.colors.length],
						active: ko.observable(false),
						copiedForShare: ko.observable(false),
						paramsAreSeted: ko.observable(false),
						copiedUrl: ko.observable(false),
						resHTML: ko.observable('')
					};
	
					// error popover
					if (obj.error) {
						var errorObj = obj.error;
						newObj.error = ko.observable([Object.getProp(errorObj, '.responseJSON.errors[0].status') || errorObj.status + '', Object.getProp(errorObj, '.responseJSON.errors[0].statusText') || '', Object.getProp(errorObj, '.responseJSON.errors[0].detail') || 'unnown', Object.getProp(errorObj, '.responseJSON') || {}]);
					}
	
					return $.extend({}, obj, newObj);
				});
				slider.remove(this.viewModel().length);
				this.viewModel(newModel);
				setTimeout(function () {
					slider.set(_this.viewModel().length);
					$('#show-details-0').trigger('click');
				}, 10);
			}
	
			/**
	   * get details
	   * @param data
	   */
	
		}, {
			key: 'getMore',
			value: function getMore(id, data) {
				var panelGroup = this.panelGroup;
				var panel = this;
				var currentSlider = $('#slider-' + panelGroup.sectionIndex);
				var component = $('<section data-bind="component: {name: \'panel-group\', params: params}"></section>');
				var curslick = currentSlider.slick('getSlick');
	
				// extending additional data (copy)
				var params = $.extend({}, panelGroup, {
					data: data,
					groupIndex: panelGroup.groupIndex + 1,
					_propTitle: typeof id === 'string' && id || 'object',
					config: panel.config
				});
	
				// apply component data bindings
				ko.applyBindings({
					params: params
				}, component[0]);
	
				// add slide with selected data
				currentSlider.slick('slickAdd', component);
	
				// remove outstanding slides
				for (var i = curslick.slideCount - 2; i > panelGroup.groupIndex; i--) {
					currentSlider.slick('slickRemove', i, false);
				}
				// move to next slide
				currentSlider.slick('slickNext');
			}
	
			/**
	   * Visibility flag for Clear btn
	   * @returns {boolean}
	   * @private
	   */
	
		}, {
			key: '_isVisible',
			value: function _isVisible() {
				return ko.utils.unwrapObservable(this.requests).length > 0;
			}
		}, {
			key: 'onClearRequests',
	
	
			/**
	   * Clear requeststs list handler
	   * @param vm
	   * @param event
	   */
			value: function onClearRequests(vm, event) {
				this.requests([]);
			}
		}, {
			key: 'getDetails',
	
	
			/**
	   * Details toggle handler
	   * @param vm
	   * @param event
	   */
			value: function getDetails(vm, event) {
				if (!this.resHTML().length) {
					jsonHighlight(this.resHTML, this.response);
				}
				this.active(!this.active());
			}
		}, {
			key: 'getStr',
	
	
			/**
	   * Join string for id's
	   * @param s
	   * @param i
	   * @returns {string}
	   */
			value: function getStr(s, i) {
				var str = s;
				var i1 = i ? i() : '';
				return [str, i1].join('-');
			}
		}, {
			key: 'getRawData',
	
	
			/**
	   * Get raw response data
	   * @param model {object}
	   * @returns {string}
	   */
			value: function getRawData() {
				var model = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
				var content = model.response || ko.unwrap(model.error)[3] || {};
				var rawWindow = window.open("data:text/json," + encodeURI(JSON.stringify(content, null, 2)), '_blank');
				rawWindow.focus();
			}
		}, {
			key: 'copyUrl',
			value: function copyUrl(model, event) {
				var currentField = this;
				var element = event.currentTarget;
				self.clipboard = new Clipboard(element);
				self.clipboard.on('success', function onSuccessCopy(e) {
					$(element).hasClass('btn-share') ? currentField.copiedForShare(true) : currentField.copiedUrl(true);
					setTimeout(function () {
						$(element).hasClass('btn-share') ? currentField.copiedForShare(false) : currentField.copiedUrl(false);
					}, 500);
					e.clearSelection();
				}).on('error', function onErrorCopy(e) {
					console.error('Action:', e.action);
					console.error('Trigger:', e.trigger);
				});
			}
		}, {
			key: 'setParamsFromHere',
			value: function setParamsFromHere(model, event) {
				var _this2 = this;
	
				this.paramsAreSeted(true);
				setTimeout(function () {
					_this2.paramsAreSeted(false);
				}, 200);
				self.setParams(model);
			}
		}, {
			key: 'removeHandler',
			value: function removeHandler() {
				this.clipboard && this.clipboard.destroy();
				delete this.clipboard;
			}
		}]);
	
		return RequestsListViewModel;
	}();
	
	module.exports = RequestsListViewModel;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';
	
	var Worker = __webpack_require__(42); // Json-formatter worker
	
	module.exports = function (observable, code) {
		var animTime = 100;
		var worker = new Worker();
	
		worker.onmessage = function (event) {
			observable(event.data);
	
			$(document).on('click touch', '.tm-code-container .expanded', function jsonCodeContainerExpanded(e) {
				e.preventDefault();
				e.stopPropagation();
				var $self = $(this);
				$self.parent().find('>ul').slideUp(animTime, function () {
					$self.addClass('collapsed');
				});
			}).on('click touch', '.tm-code-container .expanded.collapsed', function jsonCodeContainerCollapsed(e) {
				e.preventDefault();
				e.stopPropagation();
				var $self = $(this);
				$self.removeClass('collapsed').parent().find('>ul').slideDown(animTime, function () {
					$self.removeClass('collapsed').removeClass('hidden');
				});
			});
		};
		worker.onerror = function (event) {
			console.error(event);
		};
	
		worker.postMessage(code);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = function () {
		return __webpack_require__(43)("/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\r\n\t * Code format web-worker\r\n\t * @param event\r\n\t */\r\n\t// var highlightJson()\r\n\tvar highlightJson = __webpack_require__(1);\r\n\t\r\n\tonmessage = function(event) {\r\n\t  var code = event.data;\r\n\t  // importScripts('json-parse.js');\r\n\t  var result = highlightJson(code, {expanded: true});\r\n\t  // var result =JSON.stringify(code);\r\n\t  postMessage(result);\r\n\t};\r\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar prefix = 'tm-code';\n\t\n\tvar getExpanderClasses = function getExpanderClasses(expanded) {\n\t\tif (!expanded) {\n\t\t\treturn 'expanded collapsed hidden';\n\t\t}\n\t\treturn 'expanded';\n\t};\n\t\n\tvar encode = function encode(value) {\n\t\treturn ['<span>', value, '</span>'].join('');\n\t};\n\t\n\tvar createElement = function createElement(key, value, type, expanderClasses) {\n\t\tvar klass = 'object',\n\t\t    open = '{',\n\t\t    close = '}';\n\t\n\t\tif (Array.isArray(value)) {\n\t\t\tklass = 'array';\n\t\t\topen = '[';\n\t\t\tclose = ']';\n\t\t}\n\t\n\t\tif (value === null) {\n\t\t\treturn ['<li>', '<span class=\"key\">\"', encode(key), '\": </span>', '<span class=\"null\">\"', encode(value), '\"</span>', '</li>'].join('');\n\t\t}\n\t\n\t\tif (type == 'object') {\n\t\t\treturn ['<li>', '<span class=\"', expanderClasses, '\"></span>', '<span class=\"key\">\"', encode(key), '\": </span> ', '<span class=\"open\">', open, '</span> ', '<ul class=\"', klass, '\">', json2html(value, expanderClasses), '</ul>', '<span class=\"close\">', close, '</span>', '</li>'].join('');\n\t\t}\n\t\n\t\tif (type == 'number' || type == 'boolean') {\n\t\t\treturn ['<li>', '<span class=\"key\">\"', encode(key), '\": </span>', '<span class=\"', type, '\">', encode(value), '</span>', '</li>'].join('');\n\t\t}\n\t\treturn ['<li>', '<span class=\"key\">\"', encode(key), '\": </span>', '<span class=\"', type, '\">\"', encode(value), '\"</span>', '</li>'].join('');\n\t};\n\t\n\tvar json2html = function json2html(json, expanderClasses) {\n\t\tvar html = '';\n\t\tfor (var key in json) {\n\t\t\tif (!json.hasOwnProperty(key)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\thtml = [html, createElement(key, json[key], _typeof(json[key]), expanderClasses)].join('');\n\t\t}\n\t\treturn html;\n\t};\n\t\n\tvar getJsonViewer = function getJsonViewer(data, options) {\n\t\ttry {\n\t\t\treturn ['<ul class=\"', prefix, '-container\">', json2html([JSON.parse(data)], getExpanderClasses(options.expanded)), '</ul>'].join('');\n\t\t} catch (e) {\n\t\t\treturn ['<div class=\"', prefix, '-error\" >', e.toString(), ' </div>'].join('');\n\t\t}\n\t};\n\t\n\tmodule.exports = function (data, opt) {\n\t\tvar json = '';\n\t\tvar options = opt || { expanded: true };\n\t\tif (typeof data == 'string') {\n\t\t\tjson = data;\n\t\t} else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) == 'object') {\n\t\t\tjson = JSON.stringify(data);\n\t\t}\n\t\treturn getJsonViewer(json, options);\n\t};\n\n/***/ }\n/******/ ]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,", __webpack_require__.p + "highlightJson.worker.js");
	};

/***/ },
/* 43 */
/***/ function(module, exports) {

	// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string
	
	var URL = window.URL || window.webkitURL;
	module.exports = function(content, url) {
		try {
			try {
				var blob;
				try { // BlobBuilder = Deprecated, but widely implemented
					var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
					blob = new BlobBuilder();
					blob.append(content);
					blob = blob.getBlob();
				} catch(e) { // The proposed API
					blob = new Blob([content]);
				}
				return new Worker(URL.createObjectURL(blob));
			} catch(e) {
				return new Worker('data:application/javascript,' + encodeURIComponent(content));
			}
		} catch(e) {
			return new Worker(url);
		}
	}

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {"use strict";
	
	function slick(times) {
		"use strict";
	
		var selector = '#slider-';
	
		for (var i = 0; i < times; i++) {
			$(selector + i).length && $(selector + i).slick({
				dots: false,
				infinite: false,
				speed: 300,
				slidesToShow: 3,
				slidesToScroll: 1,
				variableWidth: true,
				autoplay: false,
				responsive: [{
					breakpoint: 1200,
					settings: {
						variableWidth: true,
						slidesToShow: 2,
						slidesToScroll: 1,
						infinite: false,
						dots: false
					}
				}, {
					breakpoint: 800,
					settings: {
						variableWidth: true,
						slidesToShow: 1,
						slidesToScroll: 1
					}
				}]
			});
		}
	}
	
	function unslick(times) {
		"use strict";
	
		for (var i = 0; i < times; i++) {
			var selector = '#slider-' + i;
			$(selector) && $(selector).length && $(selector).slick('unslick');
		}
		console.info('cleared');
	}
	
	module.exports = {
		set: slick,
		remove: unslick
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 45 */
/***/ function(module, exports) {

	module.exports = {
		"discovery.v2.events.get": {
			"events": {
				"object": {
					"_CONFIG": {
						"title": "Event",
						"copyBtn": {
							"name": true
						},
						"request": "http://www.google.com",
						"index": 0
					}
				},
				"images": {
					"object": {
						"_CONFIG": {
							"title": "image"
						}
					},
					"_CONFIG": {
						"index": 1,
						"collapsed": true
					}
				},
				"sales": {
					"_CONFIG": {
						"index": 2
					}
				},
				"venues": {
					"object": {
						"_CONFIG": {
							"title": "venue",
							"index": 0
						}
					},
					"city": {
						"_CONFIG": {
							"index": 2
						}
					},
					"state": {
						"_CONFIG": {
							"index": 1
						}
					},
					"country": {
						"_CONFIG": {
							"index": 1
						}
					},
					"address": {
						"_CONFIG": {
							"index": 3
						}
					},
					"location": {
						"_CONFIG": {
							"index": 4
						}
					},
					"_CONFIG": {
						"index": 3
					}
				},
				"dates": {
					"access": {
						"_CONFIG": {
							"index": 3,
							"copyBtn": {},
							"collapsed": true
						}
					},
					"timezone": {
						"_CONFIG": {
							"index": 0
						}
					},
					"start": {
						"_CONFIG": {
							"index": 1,
							"copyBtn": {
								"dateTime": true
							},
							"collapsed": true
						}
					},
					"status": {
						"_CONFIG": {
							"index": 3,
							"collapsed": true
						}
					},
					"end": {
						"_CONFIG": {
							"index": 2,
							"copyBtn": {
								"dateTime": true
							},
							"collapsed": true
						}
					},
					"_CONFIG": {
						"index": 4,
						"allInside": true
					}
				},
				"_CONFIG": {
					"collapsed": false,
					"index": 0
				}
			},
			"page": {
				"_CONFIG": {
					"index": 1,
					"collapsed": true
				}
			},
			"_CONFIG": {
				"method": "discovery.v2.events.get"
			}
		},
		"discovery.v2.attractions.get": {
			"attractions": {
				"object": {
					"_CONFIG": {
						"index": 0
					}
				},
				"images": {
					"_CONFIG": {
						"index": 2
					}
				},
				"classifications": {
					"_CONFIG": {
						"index": 1
					}
				},
				"_CONFIG": {
					"collapsed": true,
					"index": 0
				}
			},
			"page": {
				"_CONFIG": {
					"collapsed": false,
					"index": 1
				}
			},
			"_CONFIG": {
				"methodConfig": true
			}
		},
		"_GLOBAL_CONFIG": {
			"copyBtn": {
				"id": true
			},
			"deprecated": [
				"_links"
			],
			"unwrapp": [
				"_embedded"
			]
		}
	};

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,